/**
 * üëë –ö–í–ï–°–¢ –ü–†–û –ü–£–õ–ü–£–õ–ê–ö –ù–ê TAU-PROLOG üëë
 * –†–µ–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∫–Ω—è–∂–Ω—ã –∏ –µ—ë –ø–æ–º–æ—â–Ω–∏—Ü—ã
 */

const pl = require('tau-prolog');

console.log('üëë === –ö–í–ï–°–¢ –ö–ù–Ø–ñ–ù–´ –ü–£–õ–ü–£–õ–ê–ö === üëë\n');

const session = pl.create();

const pulpulakQuest = `
% === –ü–ï–†–°–û–ù–ê–ñ–ò –ò –ò–• –†–û–õ–ò ===
character(pulpulak).
character(helper).
character_role(pulpulak, princess).
character_role(helper, servant).

% === –õ–û–ö–ê–¶–ò–ò –ó–ê–ú–ö–ê ===
location(princess_chamber).
location(throne_room).
location(corridor_upper).
location(corridor_lower).
location(kitchen).
location(garden).
location(library).
location(secret_archive).
location(greenhouse).

% –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ª–æ–∫–∞—Ü–∏–π –ø–æ —Å—Ç–∞—Ç—É—Å—É
royal_location(princess_chamber).
royal_location(throne_room).
royal_location(library).
royal_location(secret_archive).

servant_location(kitchen).
servant_location(garden).
servant_location(greenhouse).

public_location(corridor_upper).
public_location(corridor_lower).

% === NPC –ò –ò–• –ú–ï–°–¢–û–ù–ê–•–û–ñ–î–ï–ù–ò–ï ===
npc(royal_advisor).
npc(librarian).
npc(cook).
npc(herbalist).

npc_location(royal_advisor, throne_room).
npc_location(librarian, library).
npc_location(cook, kitchen).
npc_location(herbalist, garden).

% === –û–î–ï–ñ–î–ê –ò –ï–Å –ó–ù–ê–ß–ï–ù–ò–ï ===
outfit(princess_dress).
outfit(simple_dress).

outfit_grants_access(princess_dress, royal_location).
outfit_grants_access(simple_dress, servant_location).
outfit_grants_access(_, public_location).

% === –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –ò–ì–†–´ ===
character_location(pulpulak, princess_chamber).
character_location(helper, princess_chamber).
character_outfit(pulpulak, princess_dress).
character_outfit(helper, simple_dress).

% === –ö–í–ï–°–¢–´ ===
quest(lost_royal_relic).
quest(secret_healing_potion).

quest_giver(lost_royal_relic, royal_advisor).
quest_giver(secret_healing_potion, cook).

quest_requires_outfit(lost_royal_relic, princess_dress).
quest_requires_outfit(secret_healing_potion, simple_dress).

% –®–∞–≥–∏ –∫–≤–µ—Å—Ç–∞ —Ä–µ–ª–∏–∫–≤–∏–∏
quest_step(lost_royal_relic, 1, talk_to_advisor).
quest_step(lost_royal_relic, 2, visit_library).
quest_step(lost_royal_relic, 3, find_librarian_in_archive).
quest_step(lost_royal_relic, 4, return_to_advisor).

% –®–∞–≥–∏ –∫–≤–µ—Å—Ç–∞ –∑–µ–ª—å—è
quest_step(secret_healing_potion, 1, talk_to_cook).
quest_step(secret_healing_potion, 2, find_herbalist).
quest_step(secret_healing_potion, 3, gather_herbs_in_greenhouse).
quest_step(secret_healing_potion, 4, return_to_cook).

% === –ú–ï–•–ê–ù–ò–ö–ê –ü–ï–†–ï–û–î–ï–í–ê–ù–ò–Ø ===
% –ú–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –æ–¥–µ–∂–¥—É —Ç–æ–ª—å–∫–æ –Ω–∞–µ–¥–∏–Ω–µ
can_swap_outfits(Character1, Character2) :-
    character_location(Character1, Location),
    character_location(Character2, Location),
    Character1 \\= Character2,
    private_location(Location).

private_location(princess_chamber).

% === –î–û–°–¢–£–ü–ù–û–°–¢–¨ –ö–í–ï–°–¢–û–í ===
quest_available(Character, Quest) :-
    character_outfit(Character, RequiredOutfit),
    quest_requires_outfit(Quest, RequiredOutfit),
    quest_giver(Quest, NPC),
    can_talk_to_npc(Character, NPC),
    \\+ quest_completed(Quest).

% === –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ï –° NPC ===
can_talk_to_npc(Character, NPC) :-
    character_location(Character, Location),
    npc_location(NPC, Location),
    has_access_to_location(Character, Location).

has_access_to_location(Character, Location) :-
    character_outfit(Character, Outfit),
    location_type(Location, Type),
    outfit_grants_access(Outfit, Type).

location_type(Location, royal_location) :- royal_location(Location).
location_type(Location, servant_location) :- servant_location(Location).
location_type(Location, public_location) :- public_location(Location).

% === NPC –†–ï–ê–ö–¶–ò–ò –ù–ê –ü–ï–†–°–û–ù–ê–ñ–ï–ô ===
npc_attitude(royal_advisor, Character, respectful) :-
    character_outfit(Character, princess_dress).

npc_attitude(royal_advisor, Character, confused) :-
    character_outfit(Character, simple_dress).

npc_attitude(cook, Character, welcoming) :-
    character_outfit(Character, simple_dress).

npc_attitude(cook, Character, nervous) :-
    character_outfit(Character, princess_dress).

npc_attitude(librarian, Character, helpful) :-
    character_outfit(Character, princess_dress).

npc_attitude(herbalist, Character, friendly) :-
    character_outfit(Character, simple_dress).

% === –ò–°–¢–û–†–ò–Ø –ò –°–Æ–ñ–ï–¢ ===
% –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞
kingdom_problem(missing_ancient_relic).
kingdom_problem(plague_needs_cure).

% –ö–≤–µ—Å—Ç —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É
quest_solves(lost_royal_relic, missing_ancient_relic).
quest_solves(secret_healing_potion, plague_needs_cure).

% === –°–ò–°–¢–ï–ú–ê –ü–û–î–°–ö–ê–ó–û–ö ===
hint_available(Character, go_to_throne_room) :-
    character_location(Character, princess_chamber),
    character_outfit(Character, princess_dress),
    \\+ quest_started(lost_royal_relic).

hint_available(Character, go_to_kitchen) :-
    character_location(Character, princess_chamber),
    character_outfit(Character, simple_dress),
    \\+ quest_started(secret_healing_potion).

hint_available(Character, swap_outfits) :-
    character_location(Character, princess_chamber),
    character_location(OtherCharacter, princess_chamber),
    Character \\= OtherCharacter,
    character_outfit(Character, CurrentOutfit),
    character_outfit(OtherCharacter, OtherOutfit),
    CurrentOutfit \\= OtherOutfit.

hint_available(Character, visit_library) :-
    quest_started(lost_royal_relic),
    quest_step_completed(lost_royal_relic, 1),
    \\+ quest_step_completed(lost_royal_relic, 2).

% === –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–û–ï –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï ===
% –ú–æ–∂–µ—Ç –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–≤–µ—Å—Ç –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
can_complete_quest(Character, Quest) :-
    quest_available(Character, Quest),
    quest_all_steps_accessible(Character, Quest).

quest_all_steps_accessible(Character, Quest) :-
    character_outfit(Character, Outfit),
    quest_requires_outfit(Quest, Outfit),
    quest_giver(Quest, NPC),
    npc_location(NPC, NPCLocation),
    has_access_to_location(Character, NPCLocation).

% === –ê–ù–ê–õ–ò–ó –ò–ì–†–û–í–û–ô –°–ò–¢–£–ê–¶–ò–ò ===
situation_analysis(Character, can_start_main_quest) :-
    character_role(Character, princess),
    can_complete_quest(Character, lost_royal_relic).

situation_analysis(Character, can_start_secret_quest) :-
    can_complete_quest(Character, secret_healing_potion).

situation_analysis(Character, needs_outfit_change) :-
    character_location(Character, princess_chamber),
    \\+ can_complete_quest(Character, _),
    can_swap_outfits(Character, _).

situation_analysis(Character, stuck_wrong_outfit) :-
    character_location(Character, Location),
    \\+ has_access_to_location(Character, Location).

% === –ò–°–¢–û–†–ò–Ø –ü–ï–†–°–û–ù–ê–ñ–ï–ô ===
character_backstory(pulpulak, royal_bloodline).
character_backstory(pulpulak, educated_in_ancient_lore).
character_backstory(helper, common_birth).
character_backstory(helper, skilled_in_herbs).

% –ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫–≤–µ—Å—Ç–∞ –ø–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—é
character_suited_for_quest(Character, Quest) :-
    character_backstory(Character, royal_bloodline),
    quest(lost_royal_relic),
    Quest = lost_royal_relic.

character_suited_for_quest(Character, Quest) :-
    character_backstory(Character, skilled_in_herbs),
    quest(secret_healing_potion),
    Quest = secret_healing_potion.

% === –°–õ–û–ñ–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ö–û–û–ü–ï–†–ê–¢–ò–í–ù–´–ï –ö–í–ï–°–¢–´ ===
% –ú–æ–≥—É—Ç –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±–∞ –∫–≤–µ—Å—Ç–∞, –º–µ–Ω—è—è—Å—å –º–µ—Å—Ç–∞–º–∏
cooperative_quest_possible :-
    can_swap_outfits(pulpulak, helper),
    character_suited_for_quest(pulpulak, lost_royal_relic),
    character_suited_for_quest(helper, secret_healing_potion).

% –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤
optimal_strategy(start_with_natural_roles) :-
    character_role(pulpulak, princess),
    character_suited_for_quest(pulpulak, lost_royal_relic),
    character_role(helper, servant),
    character_suited_for_quest(helper, secret_healing_potion).

optimal_strategy(swap_for_efficiency) :-
    cooperative_quest_possible,
    character_location(pulpulak, princess_chamber),
    character_location(helper, princess_chamber).
`;

console.log('üìö –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∏—Ä –ü—É–ª–ø—É–ª–∞–∫...');
session.consult(pulpulakQuest, {
    success: function() {
        console.log('‚úÖ –ú–∏—Ä –ü—É–ª–ø—É–ª–∞–∫ –∑–∞–≥—Ä—É–∂–µ–Ω!\n');
        explorePulpulakWorld();
    },
    error: function(err) {
        console.log('‚ùå –û—à–∏–±–∫–∞:', err);
    }
});

async function explorePulpulakWorld() {
    console.log('üè∞ === –ò–°–°–õ–ï–î–£–ï–ú –ú–ò–† –ö–ù–Ø–ñ–ù–´ –ü–£–õ–ü–£–õ–ê–ö ===\n');
    
    console.log('1. üëë –ü–ï–†–°–û–ù–ê–ñ–ò –ò –ò–• –°–û–°–¢–û–Ø–ù–ò–ï:');
    await findAll("character_location(Character, Location)", "–ì–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∏");
    await findAll("character_outfit(Character, Outfit)", "–í–æ —á—Ç–æ –æ–¥–µ—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∏");
    await findAll("character_role(Character, Role)", "–†–æ–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π");
    
    console.log('\n2. üè∞ –ú–ò–† –ó–ê–ú–ö–ê:');
    await findAll("npc_location(NPC, Location)", "–ì–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è NPC");
    await findAll("royal_location(Location)", "–ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–µ –ø–æ–∫–æ–∏");
    await findAll("servant_location(Location)", "–ú–µ—Å—Ç–∞ –¥–ª—è —Å–ª—É–≥");
    
    console.log('\n3. üí¨ –°–û–¶–ò–ê–õ–¨–ù–´–ï –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø:');
    await findAll("can_talk_to_npc(Character, NPC)", "–ö—Ç–æ —Å –∫–µ–º –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å");
    await findAll("npc_attitude(NPC, Character, Attitude)", "–û—Ç–Ω–æ—à–µ–Ω–∏–µ NPC –∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º");
    
    console.log('\n4. üéØ –ö–í–ï–°–¢–û–í–´–ô –ê–ù–ê–õ–ò–ó:');
    await findAll("quest_available(Character, Quest)", "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–≤–µ—Å—Ç—ã");
    await findAll("can_complete_quest(Character, Quest)", "–ö–≤–µ—Å—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å");
    
    console.log('\n5. üëó –ú–ï–•–ê–ù–ò–ö–ê –ü–ï–†–ï–û–î–ï–í–ê–ù–ò–Ø:');
    await findAll("can_swap_outfits(Character1, Character2)", "–ö—Ç–æ –º–æ–∂–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å—Å—è –æ–¥–µ–∂–¥–æ–π");
    await findAll("has_access_to_location(Character, Location)", "–î–æ—Å—Ç—É–ø –∫ –ª–æ–∫–∞—Ü–∏—è–º");
    
    console.log('\n6. üí° –£–ú–ù–´–ï –ü–û–î–°–ö–ê–ó–ö–ò:');
    await findAll("hint_available(Character, Hint)", "–ü–æ–¥—Å–∫–∞–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã");
    
    console.log('\n7. üìñ –ü–†–ï–î–´–°–¢–û–†–ò–Ø –ò –•–ê–†–ê–ö–¢–ï–†–´:');
    await findAll("character_backstory(Character, Trait)", "–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π");
    await findAll("character_suited_for_quest(Character, Quest)", "–ö—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫–∞–∫–æ–≥–æ –∫–≤–µ—Å—Ç–∞");
    
    console.log('\n8. ü§ù –ö–û–û–ü–ï–†–ê–¢–ò–í–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø:');
    await checkFact("cooperative_quest_possible", "–í–æ–∑–º–æ–∂–Ω–æ –ª–∏ –∫–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ?");
    await findAll("optimal_strategy(Strategy)", "–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏");
    
    console.log('\n9. üß† –ê–ù–ê–õ–ò–ó –ò–ì–†–û–í–û–ô –°–ò–¢–£–ê–¶–ò–ò:');
    await findAll("situation_analysis(Character, Analysis)", "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏");
    
    console.log('\n10. üë• –ö–û–†–û–õ–ï–í–°–¢–í–û –ò –ï–ì–û –ü–†–û–ë–õ–ï–ú–´:');
    await findAll("kingdom_problem(Problem)", "–ü—Ä–æ–±–ª–µ–º—ã –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞");
    await findAll("quest_solves(Quest, Problem)", "–ö–∞–∫–∏–µ –∫–≤–µ—Å—Ç—ã —Ä–µ—à–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã");
    
    console.log('\nüé≠ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–Æ–ñ–ï–¢–ù–´–• –°–¶–ï–ù–ê–†–ò–ï–í ===');
    
    // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ü—É–ª–ø—É–ª–∞–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç –∫–≤–µ—Å—Ç —Ä–µ–ª–∏–∫–≤–∏–∏
    console.log('\nüìú –°–¶–ï–ù–ê–†–ò–ô 1: –ü—É–ª–ø—É–ª–∞–∫ –∏–¥—ë—Ç –∫ —Å–æ–≤–µ—Ç–Ω–∏–∫—É');
    await simulateScenario([
        'character_location(pulpulak, throne_room)'
    ], [
        "can_talk_to_npc(pulpulak, royal_advisor)",
        "quest_available(pulpulak, lost_royal_relic)",
        "npc_attitude(royal_advisor, pulpulak, Attitude)"
    ]);
    
    // –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ü–æ–º–æ—â–Ω–∏—Ü–∞ –ø–µ—Ä–µ–æ–¥–µ–≤–∞–µ—Ç—Å—è
    console.log('\nüìú –°–¶–ï–ù–ê–†–ò–ô 2: –ü–æ–º–æ—â–Ω–∏—Ü–∞ –Ω–∞–¥–µ–≤–∞–µ—Ç –∫–Ω—è–∂–µ—Å–∫–æ–µ –ø–ª–∞—Ç—å–µ');
    await simulateScenario([
        'character_outfit(helper, princess_dress)'
    ], [
        "has_access_to_location(helper, throne_room)",
        "quest_available(helper, lost_royal_relic)",
        "npc_attitude(royal_advisor, helper, Attitude)"
    ]);
    
    console.log('\nüéâ === –ò–°–¢–û–†–ò–Ø –ü–£–õ–ü–£–õ–ê–ö –ó–ê–í–ï–†–®–ï–ù–ê ===');
    console.log('\nüí≠ –í–´–í–û–î–´ –û –ú–ò–†–ï –ü–£–õ–ü–£–õ–ê–ö:');
    console.log('   ‚úÖ –°–ª–æ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π –∏ –æ–¥–µ–∂–¥—ã');
    console.log('   ‚úÖ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ NPC —Å —Ä–∞–∑–Ω—ã–º –æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º');
    console.log('   ‚úÖ –ö–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞ —Å–º–µ–Ω—ã —Ä–æ–ª–µ–π');
    console.log('   ‚úÖ –ë–æ–≥–∞—Ç–∞—è –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π');
    console.log('   ‚úÖ –õ–æ–≥–∏—á–µ—Å–∫–∞—è —Å–≤—è–∑—å –º–µ–∂–¥—É –∫–≤–µ—Å—Ç–∞–º–∏ –∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞');
}

async function simulateScenario(newFacts, queries) {
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã
    for (const fact of newFacts) {
        const tempProgram = fact + '.';
        await new Promise(resolve => {
            session.consult(tempProgram, {
                success: () => resolve(),
                error: () => resolve()
            });
        });
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã
    for (const query of queries) {
        await findAll(query, `   ${query}`);
    }
}

function checkFact(query, description) {
    return new Promise((resolve) => {
        console.log(`  üìã ${description}`);
        session.query(query + '.', {
            success: function(goal) {
                session.answer(function(answer) {
                    if (answer !== null && answer !== false) {
                        console.log(`     ‚úÖ –î–ê`);
                    } else {
                        console.log(`     ‚ùå –ù–ï–¢`);
                    }
                    resolve();
                });
            },
            error: function(err) {
                console.log(`     ‚ùå –û–®–ò–ë–ö–ê: ${err}`);
                resolve();
            }
        });
    });
}

function findAll(query, description) {
    return new Promise((resolve) => {
        console.log(`  üìã ${description}:`);
        session.query(query + '.', {
            success: function(goal) {
                let count = 0;
                
                function getNext() {
                    session.answer(function(answer) {
                        if (answer !== null && answer !== false) {
                            count++;
                            const formatted = session.format_answer(answer);
                            console.log(`     ${count}. ${formatted}`);
                            setTimeout(getNext, 10);
                        } else {
                            if (count === 0) {
                                console.log('     (–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)');
                            }
                            resolve();
                        }
                    });
                }
                
                getNext();
            },
            error: function(err) {
                console.log(`     ‚ùå –û–®–ò–ë–ö–ê: ${err}`);
                resolve();
            }
        });
    });
}