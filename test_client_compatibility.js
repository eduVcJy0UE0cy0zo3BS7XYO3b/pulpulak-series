/**
 * –¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–º –∫–æ–¥–æ–º
 */

const LegacyGameAdapter = require('./engine/adapters/LegacyGameAdapter');
const PulpulakGameConfig = require('./games/pulpulak/PulpulakGameConfig');

console.log('=== –¢–ï–°–¢ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –° –ö–õ–ò–ï–ù–¢–°–ö–ò–ú –ö–û–î–û–ú ===\n');

// –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
const gameConfig = new PulpulakGameConfig();
const gameLogic = new LegacyGameAdapter(gameConfig);

console.log('1. –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ Legacy Adapter:');
const players = {
    princess: { id: 'socket_123', name: '–¢–µ—Å—Ç –ö–Ω—è–∂–Ω–∞' },
    helper: { id: 'socket_456', name: '–¢–µ—Å—Ç –ü–æ–º–æ—â–Ω–∏—Ü–∞' }
};

const gameData = gameLogic.startGame('client_test', players);

console.log('   ‚úÖ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞');
console.log(`   üìã –°—Ü–µ–Ω–∞: ${gameData.scene?.title || '–ù–µ –Ω–∞–π–¥–µ–Ω–∞'}`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç
console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:');

const requiredFields = [
    'players',
    'stats', 
    'scene',
    'choices',
    'turnOrder',
    'currentScene'
];

const checkField = (obj, field) => {
    const exists = obj && obj[field] !== undefined;
    console.log(`   ${exists ? '‚úÖ' : '‚ùå'} ${field}: ${exists ? '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
    return exists;
};

const allFieldsPresent = requiredFields.every(field => checkField(gameData, field));

console.log('\n3. –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:');

if (gameData.players) {
    console.log(`   ‚úÖ players.princess: ${gameData.players.princess ? '–î–∞' : '–ù–µ—Ç'}`);
    console.log(`   ‚úÖ players.helper: ${gameData.players.helper ? '–î–∞' : '–ù–µ—Ç'}`);
    
    if (gameData.players.princess) {
        console.log(`   üìù players.princess.id: ${gameData.players.princess.id}`);
        console.log(`   üìù players.princess.name: ${gameData.players.princess.name}`);
    }
}

if (gameData.stats) {
    console.log(`   ‚úÖ stats.princess: ${gameData.stats.princess ? '–î–∞' : '–ù–µ—Ç'}`);
    console.log(`   ‚úÖ stats.helper: ${gameData.stats.helper ? '–î–∞' : '–ù–µ—Ç'}`);
    
    if (gameData.stats.princess) {
        console.log(`   üìù stats.princess.outfit: ${gameData.stats.princess.outfit}`);
        console.log(`   üìù stats.princess.location: ${gameData.stats.princess.location}`);
    }
}

if (gameData.choices) {
    console.log(`   ‚úÖ choices.princess: ${gameData.choices.princess?.length || 0} –≤—ã–±–æ—Ä–æ–≤`);
    console.log(`   ‚úÖ choices.helper: ${gameData.choices.helper?.length || 0} –≤—ã–±–æ—Ä–æ–≤`);
}

console.log('\n4. –°–∏–º—É–ª—è—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ determinePlayerRole:');

// –°–∏–º—É–ª—è—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
function determinePlayerRole(data, socketId) {
    if (!data) return null;
    if (data.players.princess?.id === socketId) {
        return 'princess';
    } else if (data.players.helper?.id === socketId) {
        return 'helper';
    }
    return null;
}

try {
    const role1 = determinePlayerRole(gameData, 'socket_123');
    const role2 = determinePlayerRole(gameData, 'socket_456');
    const role3 = determinePlayerRole(gameData, 'socket_unknown');
    
    console.log(`   ‚úÖ Socket 'socket_123' ‚Üí —Ä–æ–ª—å: ${role1}`);
    console.log(`   ‚úÖ Socket 'socket_456' ‚Üí —Ä–æ–ª—å: ${role2}`);
    console.log(`   ‚úÖ Socket 'socket_unknown' ‚Üí —Ä–æ–ª—å: ${role3}`);
    
    const expectedRoles = role1 === 'princess' && role2 === 'helper' && role3 === null;
    console.log(`   ${expectedRoles ? '‚úÖ' : '‚ùå'} –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
    
} catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –≤ determinePlayerRole: ${error.message}`);
}

console.log('\n5. –¢–µ—Å—Ç –∏–≥—Ä–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞:');

try {
    const choiceResult = gameLogic.makeChoice('client_test', 'socket_123', 'prepare_morning', 'princess');
    
    if (choiceResult.success) {
        console.log(`   ‚úÖ –í—ã–±–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω: ${choiceResult.message}`);
        
        const updatedGameData = gameLogic.getGameData('client_test');
        console.log(`   üìã –ù–æ–≤–∞—è —Å—Ü–µ–Ω–∞: ${updatedGameData.scene?.title}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        const stillValid = requiredFields.every(field => updatedGameData[field] !== undefined);
        console.log(`   ${stillValid ? '‚úÖ' : '‚ùå'} –í—Å–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞`);
        
    } else {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞: ${choiceResult.message}`);
    }
    
} catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞: ${error.message}`);
}

console.log('\n6. –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è:');

try {
    const moveResult = gameLogic.makeChoice('client_test', 'socket_123', 'move_to_corridor_upper', 'princess');
    
    if (moveResult.success) {
        console.log(`   ‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${moveResult.message}`);
        
        const updatedGameData = gameLogic.getGameData('client_test');
        console.log(`   üìç –ù–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è: ${updatedGameData.stats?.princess?.location}`);
        
    } else {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: ${moveResult.message}`);
    }
    
} catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏: ${error.message}`);
}

console.log('\n=== –†–ï–ó–£–õ–¨–¢–ê–¢ ===');

if (allFieldsPresent) {
    console.log('üéâ –ö–õ–ò–ï–ù–¢–°–ö–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –û–ë–ï–°–ü–ï–ß–ï–ù–ê!');
    console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
    console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º');
    console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è determinePlayerRole —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –ò–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç');
    
    console.log('\nüí° –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–æ–¥ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π!');
} else {
    console.log('‚ùå –¢–†–ï–ë–£–Æ–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ò –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò');
    console.log('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –∏–º–µ—é—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É');
}

// –û—á–∏—Å—Ç–∫–∞
gameLogic.removeGame('client_test');
console.log('\nüßπ –¢–µ—Å—Ç–æ–≤–∞—è –∏–≥—Ä–∞ –æ—á–∏—â–µ–Ω–∞');