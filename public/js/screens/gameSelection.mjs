// Mithril is loaded globally from CDN
const m = window.m;
import NotificationManager from '../notificationManager.mjs';

const GameSelection = {
    oninit(vnode) {
        this.app = vnode.attrs.app;
        this.availableGames = [];
        this.loading = true;
        this.selectedGame = null;
        this.mode = vnode.attrs.data?.mode || 'create'; // 'create' or 'join'
        this.roomId = vnode.attrs.data?.roomId || '';
        
        // Fetch available games from server
        this.fetchAvailableGames();
    },

    async fetchAvailableGames() {
        try {
            this.loading = true;
            m.redraw();

            const response = await fetch('/api/games');
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();
            console.log('üéÆ Received games data:', data);
            // API returns array directly, not wrapped in {games: [...]}
            this.availableGames = Array.isArray(data) ? data : (data.games || []);
            console.log('üéÆ Available games:', this.availableGames);
            
            // Pre-select first game if available
            if (this.availableGames.length > 0) {
                this.selectedGame = this.availableGames[0].id;
                console.log('üéÆ Pre-selected game:', this.selectedGame);
            }
            
            this.loading = false;
            m.redraw();
        } catch (error) {
            console.error('‚ùå Failed to fetch games:', error);
            NotificationManager.add('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä', 'error');
            this.loading = false;
            m.redraw();
        }
    },

    selectGame(gameId) {
        this.selectedGame = gameId;
        m.redraw();
    },

    getGameInfo(gameId) {
        return this.availableGames.find(game => game.id === gameId);
    },

    proceedWithGame() {
        if (!this.selectedGame) {
            NotificationManager.add('–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É!', 'warning');
            return;
        }

        const gameInfo = this.getGameInfo(this.selectedGame);
        console.log(`üéÆ –í—ã–±—Ä–∞–Ω–∞ –∏–≥—Ä–∞: ${gameInfo.name} (${this.selectedGame})`);

        if (this.mode === 'create') {
            // Create room with selected game
            this.app.createRoomWithGame(this.selectedGame);
        } else {
            // Join room (game will be determined by room)
            this.app.joinRoom(this.roomId);
        }
    },

    backToMenu() {
        this.app.showScreen('mainMenu');
    },

    createGameCard(game) {
        const isSelected = this.selectedGame === game.id;
        
        return m('.game-card', {
            class: isSelected ? 'selected' : '',
            onclick: () => this.selectGame(game.id)
        }, [
            m('.game-icon', game.icon || 'üéÆ'),
            m('.game-info', [
                m('h3', game.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞'),
                m('p.game-description', game.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'),
                m('.game-meta', [
                    m('span.game-players', `üë• ${game.minPlayers || 2}-${game.maxPlayers || 2} –∏–≥—Ä–æ–∫–æ–≤`),
                    (game.estimatedPlayTime || game.estimatedDuration) && m('span.game-time', `‚è±Ô∏è ${game.estimatedPlayTime || game.estimatedDuration}`)
                ]),
                (game.tags && game.tags.length > 0) && m('.game-tags', 
                    game.tags.map(tag => m('span.tag', tag))
                )
            ]),
            isSelected && m('.selection-indicator', '‚úì')
        ]);
    },

    view() {
        if (this.loading) {
            return m('div#game-selection.menu-container.fade-in', [
                m('button.btn.btn-secondary.mb-2', {
                    onclick: () => this.backToMenu()
                }, '‚Üê –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
                
                m('.loading-container.text-center', [
                    m('h2', 'üéÆ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä...'),
                    m('.spinner', '‚ü≥')
                ])
            ]);
        }

        if (this.availableGames.length === 0) {
            return m('div#game-selection.menu-container.fade-in', [
                m('button.btn.btn-secondary.mb-2', {
                    onclick: () => this.backToMenu()
                }, '‚Üê –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
                
                m('.error-container.text-center', [
                    m('h2', '‚ùå –ò–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'),
                    m('p', '–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–æ–∑–≤—Ä–∞—Ç–∏–ª –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'),
                    m('button.btn.btn-primary', {
                        onclick: () => this.fetchAvailableGames()
                    }, 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å')
                ])
            ]);
        }

        const selectedGameInfo = this.getGameInfo(this.selectedGame);
        const modeText = this.mode === 'create' ? '—Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã' : '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';
        const buttonText = this.mode === 'create' ? 'üè† –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É' : 'üö™ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è';

        return m('div#game-selection.menu-container.fade-in', [
            m('button.btn.btn-secondary.mb-2', {
                onclick: () => this.backToMenu()
            }, '‚Üê –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
            
            m('.selection-header.text-center', [
                m('h2', `üéÆ –í—ã–±–æ—Ä –∏–≥—Ä—ã –¥–ª—è ${modeText}`),
                this.mode === 'join' && m('p', `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ: ${this.roomId}`)
            ]),

            m('.games-grid', 
                this.availableGames.map(game => this.createGameCard(game))
            ),

            selectedGameInfo && m('.selected-game-info', [
                m('h3', `–í—ã–±—Ä–∞–Ω–∞: ${selectedGameInfo.name}`),
                m('p', selectedGameInfo.description),
                selectedGameInfo.tags && m('.game-tags', 
                    selectedGameInfo.tags.map(tag => m('span.tag', tag))
                )
            ]),

            m('.selection-controls.text-center.mt-2', [
                m('button.btn.btn-primary.btn-large', {
                    disabled: !this.selectedGame,
                    onclick: () => this.proceedWithGame()
                }, buttonText),
                
                !this.selectedGame && m('p.help-text', '–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ')
            ])
        ]);
    }
};

export default GameSelection;