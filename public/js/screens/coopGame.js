import { loadComponent } from '../utils/helpers.js';

class CoopGame {
    constructor(app) {
        this.app = app;
        this.element = null;
        this.gameData = null;
        this.playerRole = null;
        this.chatVisible = false;
	this.activeOutfitRequest = null; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    }

    async show(data) {
        this.gameData = data;
        this.playerRole = this.determinePlayerRole(data);
        
        this.element = await loadComponent('coopGame');
        this.app.container.appendChild(this.element);
        this.setupEventListeners();
        this.updateGame(data);
    }

    hide() {
        if (this.element) {
            this.element.remove();
            this.element = null;
        }
    }

    setupEventListeners() {
        // –ü–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É
        this.element.querySelector('[data-action="leave-game"]').addEventListener('click', () => {
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É?')) {
                this.app.leaveRoom(this.gameData.roomId);
                this.app.showScreen('mainMenu');
            }
        });

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —á–∞—Ç–∞
        this.element.querySelector('[data-action="toggle-chat"]').addEventListener('click', () => {
            this.toggleChat();
        });

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
        this.element.querySelector('[data-action="send-chat"]').addEventListener('click', () => {
            this.sendChatMessage();
        });

        // Enter –≤ —á–∞—Ç–µ
        this.element.querySelector('#chat-input').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.sendChatMessage();
            }
        });

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —á–∞—Ç–∞
        this.app.socketManager.socket.on('chat-message', (data) => {
            this.addChatMessage(data);
        });
	
	this.app.socketManager.socket.on('outfit-request-created', (data) => {
            this.handleOutfitRequestCreated(data);
        });

        this.app.socketManager.socket.on('outfit-request-resolved', (data) => {
            this.handleOutfitRequestResolved(data);
        });
    }

    determinePlayerRole(data) {
        const socketId = this.app.socketManager.socket.id;
        if (data.players.princess?.id === socketId) {
            return 'princess';
        } else if (data.players.helper?.id === socketId) {
            return 'helper';
        }
        return null;
    }

    updateGame(data) {
        console.log('üìä DEBUG updateGame called with data:', {
            roomId: data.roomId,
            choices: data.choices,
            playerRole: this.playerRole,
            location: data.location,
            npcsPresent: data.npcsPresent
        });
        
        this.gameData = data;
	this.activeOutfitRequest = data.activeOutfitRequest;

        // –û–±–Ω–æ–≤–ª—è–µ–º ID –∫–æ–º–Ω–∞—Ç—ã
        this.element.querySelector('#current-room-id').textContent = data.roomId;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏
        this.element.querySelector('#scene-title').textContent = data.scene.title;
        this.element.querySelector('#story-text').innerHTML = data.scene.text;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞—Ü–∏–∏
        this.updateLocationInfo(data);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–æ–∫–∞—Ö
        this.updatePlayersInfo(data);

	this.updateOutfitRequestDisplay();

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        this.updateCharacterChoices('princess', data.choices.princess);
        this.updateCharacterChoices('helper', data.choices.helper);
    }

    updateOutfitRequestDisplay() {
        const requestContainer = this.element.querySelector('#outfit-request-container');
        requestContainer.innerHTML = '';

        if (!this.activeOutfitRequest) {
            return;
        }

        const socketId = this.app.socketManager.socket.id;
        const isTargetPlayer = this.activeOutfitRequest.targetPlayerId === socketId;
        const isRequestInitiator = this.activeOutfitRequest.fromPlayerId === socketId;

        if (isTargetPlayer) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏–Ω—è—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å
            this.showIncomingOutfitRequest();
        } else if (isRequestInitiator) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞
            this.showOutgoingOutfitRequest();
        }
    }

    getCharacterName(character) {
        return character === 'princess' ? '–ö–Ω—è–∂–Ω–∞' : '–ü–æ–º–æ—â–Ω–∏—Ü–∞';
    }
    
    showIncomingOutfitRequest() {
        const requestContainer = this.element.querySelector('#outfit-request-container');
        const fromCharacterName = this.getCharacterName(this.activeOutfitRequest.fromCharacter);
        
        requestContainer.innerHTML = `
            <div class="outfit-request-notification incoming">
                <div class="request-header">üëó –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω –æ–¥–µ–∂–¥–æ–π</div>
                <div class="request-message">
                    ${fromCharacterName} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å—Å—è –æ–¥–µ–∂–¥–æ–π!
                </div>
                <div class="request-actions">
                    <button class="btn btn-success request-btn" data-action="accept-outfit-swap">
                        ‚úÖ –ü—Ä–∏–Ω—è—Ç—å
                    </button>
                    <button class="btn btn-secondary request-btn" data-action="decline-outfit-swap">
                        ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                    </button>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        requestContainer.querySelector('[data-action="accept-outfit-swap"]').addEventListener('click', () => {
            this.respondToOutfitRequest(true);
        });

        requestContainer.querySelector('[data-action="decline-outfit-swap"]').addEventListener('click', () => {
            this.respondToOutfitRequest(false);
        });
    }

    showOutgoingOutfitRequest() {
        const requestContainer = this.element.querySelector('#outfit-request-container');
        const targetCharacterName = this.getCharacterName(this.activeOutfitRequest.targetCharacter);
        
        requestContainer.innerHTML = `
            <div class="outfit-request-notification outgoing">
                <div class="request-header">üëó –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</div>
                <div class="request-message">
                    –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç ${targetCharacterName}...
                </div>
                <div class="request-waiting">‚è≥</div>
            </div>
        `;
    }
    
    updateLocationInfo(data) {
	const locationNames = {
            'princess_chamber': '–°–ø–∞–ª—å–Ω—è –∫–Ω—è–∂–Ω—ã',
            'throne_room': '–¢—Ä–æ–Ω–Ω—ã–π –∑–∞–ª',
            'kitchen': '–ö—É—Ö–Ω—è',
            'garden': '–°–∞–¥',
            'armory': '–ê—Ä—Å–µ–Ω–∞–ª',
            'private_quarters': '–õ–∏—á–Ω—ã–µ –ø–æ–∫–æ–∏',
            'secret_passage': '–¢–∞–π–Ω—ã–π –ø—Ä–æ—Ö–æ–¥'
	};

	this.element.querySelector('#current-location').textContent = 
            locationNames[data.location] || data.location;

	const npcsElement = this.element.querySelector('#npcs-present');
	if (data.npcsPresent && data.npcsPresent.length > 0) {
            npcsElement.innerHTML = `<br>üë• <em>–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: ${data.npcsPresent.join(', ')}</em>`;
	} else {
            npcsElement.innerHTML = `<br>ü§´ <em>–ù–∏–∫–æ–≥–æ –Ω–µ—Ç –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ - –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–¥–µ–≤–∞—Ç—å—Å—è!</em>`;
	}
    }

    updatePlayersInfo(data) {
	console.log('üé≠ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ:', {
            stats: data.stats,
            helperStats: data.stats.helper,
            princessStats: data.stats.princess
	});

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–Ω—è–∂–Ω–µ
	this.element.querySelector('#princess-player').textContent = 
            data.players.princess?.name || '-';
	this.element.querySelector('#princess-outfit').textContent = 
            this.getOutfitName(data.stats.princess?.outfit || 'nightgown');

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–º–æ—â–Ω–∏—Ü–µ
	this.element.querySelector('#helper-player').textContent = 
            data.players.helper?.name || '-';
	
	const helperOutfit = data.stats.helper?.outfit;
	console.log('üëó –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—è–¥–∞ –ø–æ–º–æ—â–Ω–∏—Ü—ã:', helperOutfit);
	
	this.element.querySelector('#helper-outfit').textContent = 
            this.getOutfitName(helperOutfit || 'common_dress');
    }

    getOutfitName(outfitId) {
        const outfitNames = {
            'nightgown': '–ù–æ—á–Ω–∞—è —Ä—É–±–∞—à–∫–∞',
            'princess_dress': '–ö–Ω—è–∂–µ—Å–∫–æ–µ –ø–ª–∞—Ç—å–µ',
            'common_dress': '–ü—Ä–æ—Å—Ç–æ–µ –ø–ª–∞—Ç—å–µ',
            'court_dress': '–ü—Ä–∏–¥–≤–æ—Ä–Ω–æ–µ –ø–ª–∞—Ç—å–µ'
        };
        return outfitNames[outfitId] || outfitId;
    }

    updateCharacterChoices(character, choices) {
        console.log(`üîç DEBUG updateCharacterChoices for ${character}:`, {
            choices: choices,
            playerRole: this.playerRole,
            isMyRole: this.playerRole === character,
            gameDataChoices: this.gameData.choices,
            outfitChoices: choices?.filter(c => c.isOutfitChange)
        });

        const choicesDiv = this.element.querySelector(`#${character}-choices`);
        choicesDiv.innerHTML = '';

        const isMyRole = this.playerRole === character;
        const hasChoices = choices && choices.length > 0;

        if (!isMyRole) {
            this.renderOtherPlayerChoices(choicesDiv, choices, character, hasChoices);
            return;
        }

        this.renderMyPlayerChoices(choicesDiv, choices, hasChoices);
    }

    renderOtherPlayerChoices(choicesDiv, choices, character, hasChoices) {
        if (hasChoices) {
            const outfitChoices = choices.filter(choice => choice.isOutfitChange);
            console.log(`üé≠ DEBUG: Filtered outfit choices for ${character}:`, outfitChoices);
            
            if (outfitChoices.length > 0) {
                this.addChoicesHeader(choicesDiv, 'üîÑ –ú–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:');
                this.addChoiceButtons(choicesDiv, outfitChoices, character);
            }
        }
        
        this.addWaitingIndicator(choicesDiv, '–•–æ–¥ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞...');
    }

    renderMyPlayerChoices(choicesDiv, choices, hasChoices) {
        if (!hasChoices) {
            choicesDiv.innerHTML = '<div class="waiting-turn">–û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞–∑–≤–∏—Ç–∏—è —Å—é–∂–µ—Ç–∞...</div>';
            return;
        }

        this.addTurnIndicator(choicesDiv);
        this.addChoiceButtons(choicesDiv, choices, null);
    }

    addChoicesHeader(container, text) {
        const header = document.createElement('div');
        header.className = 'other-player-actions';
        header.textContent = text;
        container.appendChild(header);
    }

    addWaitingIndicator(container, text) {
        const waitingDiv = document.createElement('div');
        waitingDiv.className = 'waiting-turn';
        waitingDiv.textContent = text;
        container.appendChild(waitingDiv);
    }

    addTurnIndicator(container) {
        const turnIndicator = document.createElement('div');
        turnIndicator.className = 'turn-indicator';
        turnIndicator.textContent = 'üéØ –í–∞—à —Ö–æ–¥!';
        container.appendChild(turnIndicator);
    }

    addChoiceButtons(container, choices, character) {
        choices.forEach(choice => {
            const button = this.createChoiceButton(choice, character);
            container.appendChild(button);
        });
    }

    createChoiceButton(choice, character) {
        const button = document.createElement('button');
        button.className = 'choice-button';
        
        // –û—Å–æ–±–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ–±–º–µ–Ω–∞ –æ–¥–µ–∂–¥–æ–π
        if (choice.id === 'request_outfit_swap') {
            button.classList.add('outfit-request-btn');
        }
        
        button.innerHTML = `
            <strong>${choice.text}</strong><br>
            <small>${choice.description}</small>
        `;
        
        button.addEventListener('click', () => {
            if (choice.id === 'request_outfit_swap') {
                this.requestOutfitSwap(character);
            } else {
                this.makeChoice(choice.id, character);
            }
        });
        
        if (choice.disabled) {
            button.disabled = true;
            button.innerHTML += `<br><small style="color: #dc3545;">üö´ ${choice.reason}</small>`;
        }
        
        return button;
    }

    requestOutfitSwap(character) {
        console.log(`üëó –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –æ–±–º–µ–Ω–∞ –æ–¥–µ–∂–¥–æ–π –¥–ª—è ${character}`);
        this.app.socketManager.socket.emit('request-outfit-swap', { character: character });
    }

    respondToOutfitRequest(accepted) {
        console.log(`üëó –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ–±–º–µ–Ω–∞ –æ–¥–µ–∂–¥–æ–π: ${accepted}`);
        this.app.socketManager.socket.emit('respond-outfit-swap', { accepted: accepted });
    }

    handleOutfitRequestCreated(data) {
        console.log('üëó –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ–±–º–µ–Ω–∞ –æ–¥–µ–∂–¥–æ–π:', data);
        this.updateGame(data.gameData);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showNotification(data.message, 'info');
    }
    
    showNotification(message, type = 'info') {
        // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ–µ
        const notification = document.createElement('div');
        notification.className = `game-notification ${type}`;
        notification.textContent = message;
        
        this.element.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 4000);
    }

    handleOutfitRequestResolved(data) {
        console.log('üëó –ó–∞–ø—Ä–æ—Å –æ–±–º–µ–Ω–∞ –æ–¥–µ–∂–¥–æ–π —Ä–∞–∑—Ä–µ—à–µ–Ω:', data);
        this.updateGame(data.gameData);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (data.accepted) {
            this.showNotification(data.message, 'success');
        } else {
            this.showNotification(data.message, 'warning');
        }
    }

    makeChoice(choiceId, character) {
        console.log(`üéØ –î–µ–ª–∞–µ–º –≤—ã–±–æ—Ä: ${choiceId} –¥–ª—è ${character}`);
        this.app.makeChoice(this.gameData.roomId, choiceId, character);

        // –í—Ä–µ–º–µ–Ω–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        const choicesDiv = this.element.querySelector(`#${character}-choices`);
        const buttons = choicesDiv.querySelectorAll('.choice-button');
        buttons.forEach(btn => {
            btn.disabled = true;
            btn.style.opacity = '0.6';
        });
    }

    toggleChat() {
        this.chatVisible = !this.chatVisible;
        const chatSection = this.element.querySelector('#chat-section');
        
        if (this.chatVisible) {
            chatSection.classList.remove('hidden');
            this.element.querySelector('[data-action="toggle-chat"]').textContent = 'üí¨ –°–∫—Ä—ã—Ç—å —á–∞—Ç';
        } else {
            chatSection.classList.add('hidden');
            this.element.querySelector('[data-action="toggle-chat"]').textContent = 'üí¨ –ß–∞—Ç';
        }
    }

    sendChatMessage() {
        const input = this.element.querySelector('#chat-input');
        const message = input.value.trim();
        
        if (message && this.gameData) {
            this.app.sendChatMessage(this.gameData.roomId, message);
            input.value = '';
        }
    }

    addChatMessage(data) {
        const messagesContainer = this.element.querySelector('#chat-messages');
        const messageDiv = document.createElement('div');
        messageDiv.style.marginBottom = '5px';
        messageDiv.innerHTML = `<strong>${data.playerName}:</strong> ${this.escapeHTML(data.message)}`;
        
        messagesContainer.appendChild(messageDiv);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    escapeHTML(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

export default CoopGame;
