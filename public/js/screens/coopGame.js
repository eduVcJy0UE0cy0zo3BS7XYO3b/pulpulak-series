import { loadComponent } from '../utils/helpers.js';

class CoopGame {
    constructor(app) {
        this.app = app;
        this.element = null;
        this.gameData = null;
        this.playerRole = null;
        this.chatVisible = false;
    }

    async show(data) {
        this.gameData = data;
        this.playerRole = this.determinePlayerRole(data);
        
        this.element = await loadComponent('coopGame');
        this.app.container.appendChild(this.element);
        this.setupEventListeners();
        this.updateGame(data);
    }

    hide() {
        if (this.element) {
            this.element.remove();
            this.element = null;
        }
    }

    setupEventListeners() {
        // –ü–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É
        this.element.querySelector('[data-action="leave-game"]').addEventListener('click', () => {
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É?')) {
                this.app.leaveRoom(this.gameData.roomId);
                this.app.showScreen('mainMenu');
            }
        });

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —á–∞—Ç–∞
        this.element.querySelector('[data-action="toggle-chat"]').addEventListener('click', () => {
            this.toggleChat();
        });

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
        this.element.querySelector('[data-action="send-chat"]').addEventListener('click', () => {
            this.sendChatMessage();
        });

        // Enter –≤ —á–∞—Ç–µ
        this.element.querySelector('#chat-input').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.sendChatMessage();
            }
        });

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —á–∞—Ç–∞
        this.app.socketManager.socket.on('chat-message', (data) => {
            this.addChatMessage(data);
        });
    }

    determinePlayerRole(data) {
        const socketId = this.app.socketManager.socket.id;
        if (data.players.princess?.id === socketId) {
            return 'princess';
        } else if (data.players.helper?.id === socketId) {
            return 'helper';
        }
        return null;
    }

    updateGame(data) {
        this.gameData = data;

        // –û–±–Ω–æ–≤–ª—è–µ–º ID –∫–æ–º–Ω–∞—Ç—ã
        this.element.querySelector('#current-room-id').textContent = data.roomId;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏
        this.element.querySelector('#scene-title').textContent = data.scene.title;
        this.element.querySelector('#story-text').innerHTML = data.scene.text;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞—Ü–∏–∏
        this.updateLocationInfo(data);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–æ–∫–∞—Ö
        this.updatePlayersInfo(data);

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        this.updateCharacterChoices('princess', data.choices.princess);
        this.updateCharacterChoices('helper', data.choices.helper);
    }

    updateLocationInfo(data) {
        const locationNames = {
            'princess_chamber': '–°–ø–∞–ª—å–Ω—è –∫–Ω—è–∂–Ω—ã',
            'throne_room': '–¢—Ä–æ–Ω–Ω—ã–π –∑–∞–ª',
            'kitchen': '–ö—É—Ö–Ω—è',
            'garden': '–°–∞–¥',
            'armory': '–ê—Ä—Å–µ–Ω–∞–ª'
        };

        this.element.querySelector('#current-location').textContent = 
            locationNames[data.location] || data.location;

        const npcsElement = this.element.querySelector('#npcs-present');
        if (data.npcsPresent && data.npcsPresent.length > 0) {
            npcsElement.innerHTML = `<br>üë• <em>–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: ${data.npcsPresent.join(', ')}</em>`;
        } else {
            npcsElement.innerHTML = `<br>ü§´ <em>–ù–∏–∫–æ–≥–æ –Ω–µ—Ç –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏</em>`;
        }
    }

    updatePlayersInfo(data) {
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–Ω—è–∂–Ω–µ
        this.element.querySelector('#princess-player').textContent = 
            data.players.princess?.name || '-';
        this.element.querySelector('#princess-outfit').textContent = 
            this.getOutfitName(data.stats.princess.outfit);
        this.element.querySelector('#princess-loyalty').textContent = 
            data.stats.princess.loyalty;

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–º–æ—â–Ω–∏—Ü–µ
        this.element.querySelector('#helper-player').textContent = 
            data.players.helper?.name || '-';
        this.element.querySelector('#helper-outfit').textContent = 
            this.getOutfitName(data.stats.helper.outfit);
        this.element.querySelector('#helper-trust').textContent = 
            data.stats.helper.trustLevel;
    }

    getOutfitName(outfitId) {
        const outfitNames = {
            'nightgown': '–ù–æ—á–Ω–∞—è —Ä—É–±–∞—à–∫–∞',
            'princess_dress': '–ö–Ω—è–∂–µ—Å–∫–æ–µ –ø–ª–∞—Ç—å–µ',
            'common_dress': '–ü—Ä–æ—Å—Ç–æ–µ –ø–ª–∞—Ç—å–µ',
            'court_dress': '–ü—Ä–∏–¥–≤–æ—Ä–Ω–æ–µ –ø–ª–∞—Ç—å–µ'
        };
        return outfitNames[outfitId] || outfitId;
    }

    updateCharacterChoices(character, choices) {
	const choicesDiv = this.element.querySelector(`#${character}-choices`);
	choicesDiv.innerHTML = '';

	const isMyRole = this.playerRole === character;
	const hasChoices = choices && choices.length > 0;

	if (!isMyRole) {
            if (hasChoices) {
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—è —Å–º–µ–Ω—ã –æ–¥–µ–∂–¥—ã –¥–ª—è "–Ω–µ –º–æ–µ–≥–æ" –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
		const outfitChoices = choices.filter(choice => choice.isOutfitChange);
		if (outfitChoices.length > 0) {
                    const header = document.createElement('div');
                    header.className = 'other-player-actions';
                    header.textContent = 'üîÑ –ú–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:';
                    choicesDiv.appendChild(header);
                    
                    outfitChoices.forEach(choice => {
			const button = this.createChoiceButton(choice, character);
			choicesDiv.appendChild(button);
                    });
		}
            }
            
            const waitingDiv = document.createElement('div');
            waitingDiv.className = 'waiting-turn';
            waitingDiv.textContent = '–•–æ–¥ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞...';
            choicesDiv.appendChild(waitingDiv);
            return;
	}

	// –≠—Ç–æ –º–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂
	if (!hasChoices) {
            choicesDiv.innerHTML = '<div class="waiting-turn">–û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞–∑–≤–∏—Ç–∏—è —Å—é–∂–µ—Ç–∞...</div>';
            return;
	}

	// –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ö–æ–¥–∞
	const turnIndicator = document.createElement('div');
	turnIndicator.className = 'turn-indicator';
	turnIndicator.textContent = 'üéØ –í–∞—à —Ö–æ–¥!';
	choicesDiv.appendChild(turnIndicator);

	// –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
	choices.forEach(choice => {
            const button = this.createChoiceButton(choice, character);
            choicesDiv.appendChild(button);
	});
    }

    createChoiceButton(choice, character) {
	const button = document.createElement('button');
	button.className = 'choice-button';
	
	if (choice.isOutfitChange) {
            button.classList.add('outfit-switch-btn');
	}
	
	button.innerHTML = `
        <strong>${choice.text}</strong><br>
        <small>${choice.description}</small>
    `;
	
	button.addEventListener('click', () => {
            this.makeChoice(choice.id, character);
	});
	
	if (choice.disabled) {
            button.disabled = true;
            button.innerHTML += `<br><small style="color: #dc3545;">üö´ ${choice.reason}</small>`;
	}
	
	return button;
    }

    createChoiceButton(choice, character) {
	const button = document.createElement('button');
	button.className = 'choice-button';
	
	// –û—Å–æ–±–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–ª—è —Å–º–µ–Ω—ã –æ–¥–µ–∂–¥—ã
	if (choice.id === 'switch_outfits') {
            button.classList.add('outfit-switch-btn');
	}
	
	button.innerHTML = `
        <strong>${choice.text}</strong><br>
        <small>${choice.description}</small>
    `;
	
	button.addEventListener('click', () => {
            this.makeChoice(choice.id, character);
	});
	
	if (choice.disabled) {
            button.disabled = true;
            button.innerHTML += `<br><small style="color: #dc3545;">üö´ ${choice.reason}</small>`;
	}
	
	return button;
    }

    makeChoice(choiceId, character) {
        console.log(`üéØ –î–µ–ª–∞–µ–º –≤—ã–±–æ—Ä: ${choiceId} –¥–ª—è ${character}`);
        this.app.makeChoice(this.gameData.roomId, choiceId, character);

        // –í—Ä–µ–º–µ–Ω–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        const choicesDiv = this.element.querySelector(`#${character}-choices`);
        const buttons = choicesDiv.querySelectorAll('.choice-button');
        buttons.forEach(btn => {
            btn.disabled = true;
            btn.style.opacity = '0.6';
        });
    }

    toggleChat() {
        this.chatVisible = !this.chatVisible;
        const chatSection = this.element.querySelector('#chat-section');
        
        if (this.chatVisible) {
            chatSection.classList.remove('hidden');
            this.element.querySelector('[data-action="toggle-chat"]').textContent = 'üí¨ –°–∫—Ä—ã—Ç—å —á–∞—Ç';
        } else {
            chatSection.classList.add('hidden');
            this.element.querySelector('[data-action="toggle-chat"]').textContent = 'üí¨ –ß–∞—Ç';
        }
    }

    sendChatMessage() {
        const input = this.element.querySelector('#chat-input');
        const message = input.value.trim();
        
        if (message && this.gameData) {
            this.app.sendChatMessage(this.gameData.roomId, message);
            input.value = '';
        }
    }

    addChatMessage(data) {
        const messagesContainer = this.element.querySelector('#chat-messages');
        const messageDiv = document.createElement('div');
        messageDiv.style.marginBottom = '5px';
        messageDiv.innerHTML = `<strong>${data.playerName}:</strong> ${this.escapeHTML(data.message)}`;
        
        messagesContainer.appendChild(messageDiv);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    escapeHTML(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

export default CoopGame;
