// Mithril is loaded globally from CDN
const m = window.m;
import NotificationManager from '../notificationManager.mjs';
import { OUTFIT_NAMES, CHARACTER_NAMES } from '../constants.mjs';

const CoopGame = {
    oninit(vnode) {
        this.app = vnode.attrs.app;
        this.chatVisible = false;
        this.dialogueProcessing = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–≤–æ–π–Ω—ã—Ö –∫–ª–∏–∫–æ–≤
        
        // Setup socket listeners
        this.setupSocketListeners();
    },
    
    getGameData(vnode) {
        // Always prefer app.screenData as it gets updated
        return this.app.screenData || vnode.attrs.data || null;
    },
    
    getPlayerRole(vnode) {
        const data = this.getGameData(vnode);
        return this.determinePlayerRole(data);
    },

    onremove() {
        // Clean up socket listeners
        const socket = this.app.socketManager.socket;
        socket.off('chat-message');
        socket.off('outfit-request-created');
        socket.off('outfit-request-resolved');
        socket.off('game-state-updated');
    },

    setupSocketListeners() {
        const socket = this.app.socketManager.socket;
        
        socket.on('chat-message', (data) => {
            this.addChatMessage(data);
            m.redraw();
        });

        socket.on('outfit-request-created', (data) => {
            this.handleOutfitRequestCreated(data);
            m.redraw();
        });

        socket.on('outfit-request-resolved', (data) => {
            this.handleOutfitRequestResolved(data);
            m.redraw();
        });

        socket.on('game-state-updated', (data) => {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            this.dialogueProcessing = false;
            this.app.screenData = data;
            m.redraw();
        });
    },

    determinePlayerRole(data) {
        if (!data) return null;
        const socketId = this.app.socketManager.socket.id;
        if (data.players.princess?.id === socketId) {
            return 'princess';
        } else if (data.players.helper?.id === socketId) {
            return 'helper';
        }
        return null;
    },


    leaveGame(vnode) {
        const gameData = this.getGameData(vnode);
        this.app.leaveRoom(gameData.roomId);
        this.app.showScreen('mainMenu');
        NotificationManager.add('–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∏–≥—Ä—É', 'info');
    },

    toggleChat() {
        this.chatVisible = !this.chatVisible;
    },

    sendChatMessage(vnode) {
        const input = document.getElementById('chat-input');
        const message = input.value.trim();
        const gameData = this.getGameData(vnode);
        if (message && gameData) {
            this.app.sendChatMessage(gameData.roomId, message);
            input.value = '';
        }
    },

    addChatMessage(data) {
        const messagesDiv = document.getElementById('chat-messages');
        if (messagesDiv) {
            const messageEl = document.createElement('div');
            messageEl.className = 'chat-message';
            messageEl.innerHTML = `<strong>${data.sender}:</strong> ${data.message}`;
            messagesDiv.appendChild(messageEl);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }
    },

    handleOutfitRequestCreated(data) {
        // Update game data to include the new request
        if (data.gameData) {
            this.app.screenData = data.gameData;
        }
        m.redraw();
    },

    handleOutfitRequestResolved(data) {
        if (data.accepted) {
            NotificationManager.add('–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω –æ–¥–µ–∂–¥–æ–π –ø—Ä–∏–Ω—è—Ç!', 'success');
        } else {
            NotificationManager.add('–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω –æ–¥–µ–∂–¥–æ–π –æ—Ç–∫–ª–æ–Ω–µ–Ω.', 'info');
        }
        // Update game data if provided
        if (data.gameData) {
            this.app.screenData = data.gameData;
        }
        m.redraw();
    },

    respondToOutfitRequest(accept, vnode) {
        const gameData = this.getGameData(vnode);
        const activeOutfitRequest = gameData?.activeOutfitRequest;
        if (activeOutfitRequest && gameData) {
            this.app.socketManager.socket.emit('respond-outfit-swap', {
                roomId: gameData.roomId,
                requestId: activeOutfitRequest.requestId,
                accepted: accept
            });
        }
    },

    makeChoice(choiceId, character, vnode) {
        const gameData = this.getGameData(vnode);
        if (gameData) {
            // Handle outfit swap request separately
            if (choiceId === 'request_outfit_swap') {
                this.app.socketManager.socket.emit('request-outfit-swap', {
                    roomId: gameData.roomId,
                    character: character
                });
            } else {
                this.app.makeChoice(gameData.roomId, choiceId, character);
            }
        }
    },

    getOutfitName(outfitId) {
        return OUTFIT_NAMES[outfitId] || outfitId;
    },

    getLocationName(locationId) {
        const locationNames = {
            'princess_chamber': '–°–ø–∞–ª—å–Ω—è –∫–Ω—è–∂–Ω—ã',
            'throne_room': '–¢—Ä–æ–Ω–Ω—ã–π –∑–∞–ª',
            'kitchen': '–ö—É—Ö–Ω—è',
            'garden': '–°–∞–¥',
            'armory': '–ê—Ä—Å–µ–Ω–∞–ª',
            'private_quarters': '–õ–∏—á–Ω—ã–µ –ø–æ–∫–æ–∏',
            'secret_passage': '–¢–∞–π–Ω—ã–π –ø—Ä–æ—Ö–æ–¥'
        };
        return locationNames[locationId] || locationId;
    },

    renderOutfitRequest(vnode) {
        const gameData = this.getGameData(vnode);
        const activeOutfitRequest = gameData?.activeOutfitRequest;
        if (!activeOutfitRequest) return null;

        const socketId = this.app.socketManager.socket.id;
        const isTargetPlayer = activeOutfitRequest.targetPlayerId === socketId;
        const isRequestInitiator = activeOutfitRequest.fromPlayerId === socketId;

        if (isTargetPlayer) {
            const fromCharacterName = activeOutfitRequest.fromCharacter === 'princess' ? '–ö–Ω—è–∂–Ω–∞' : '–ü–æ–º–æ—â–Ω–∏—Ü–∞';
            return m('.outfit-request-notification.incoming', [
                m('.request-header', 'üëó –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω –æ–¥–µ–∂–¥–æ–π'),
                m('.request-message', `${fromCharacterName} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å—Å—è –æ–¥–µ–∂–¥–æ–π!`),
                m('.request-actions', [
                    m('button.btn.btn-success.request-btn', {
                        onclick: () => this.respondToOutfitRequest(true, vnode)
                    }, '‚úÖ –ü—Ä–∏–Ω—è—Ç—å'),
                    m('button.btn.btn-secondary.request-btn', {
                        onclick: () => this.respondToOutfitRequest(false, vnode)
                    }, '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å')
                ])
            ]);
        } else if (isRequestInitiator) {
            const targetCharacterName = activeOutfitRequest.targetCharacter === 'princess' ? '–ö–Ω—è–∂–Ω–∞' : '–ü–æ–º–æ—â–Ω–∏—Ü–∞';
            return m('.outfit-request-notification.outgoing', [
                m('.request-header', 'üëó –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'),
                m('.request-message', `–û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç ${targetCharacterName}...`),
                m('.request-waiting', '‚è≥')
            ]);
        }
        return null;
    },

    renderChoiceButton(choice, character, vnode) {
        const playerRole = this.getPlayerRole(vnode);
        const isMyRole = playerRole === character;
        const style = choice.danger ? 'danger' : (choice.safe ? 'success' : 'primary');
        
        return m(`button.btn.btn-${style}`, {
            onclick: () => this.makeChoice(choice.id, character, vnode),
            disabled: !isMyRole && !choice.isOutfitRequest
        }, [
            choice.icon ? `${choice.icon} ` : '',
            choice.text || choice.action || '–î–µ–π—Å—Ç–≤–∏–µ'
        ]);
    },

    renderQuestInfo(character, data) {
        const quest = data.quests && data.quests[character] && data.quests[character].active;
        
        if (!quest) {
            return null;
        }

        const currentStep = quest.steps[quest.currentStep];
        
        return m('.quest-info', { style: 'margin: 10px 0; padding: 10px; background: rgba(255, 255, 255, 0.1); border-radius: 5px; border-left: 3px solid #007bff;' }, [
            m('.quest-title', { style: 'font-weight: bold; color: #007bff;' }, ['üìã ', quest.title]),
            m('.quest-description', { style: 'font-size: 0.9em; margin: 5px 0;' }, quest.description),
            currentStep && m('.quest-current-step', { style: 'font-size: 0.85em; font-style: italic;' }, [
                'üéØ –¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞: ', currentStep.description
            ])
        ]);
    },

    renderCurrentPlayerPanel(vnode, data) {
        const playerRole = this.getPlayerRole(vnode);
        
        if (playerRole === 'princess') {
            return m('.single-player-layout', [
                m('.player-panel.panel-princess', [
                    m('h3', { style: 'background: #ffcccb; color: #8b0000;' }, 'üëë –ö–Ω—è–∂–Ω–∞ –ü—É–ª–ø—É–ª–∞–∫'),
                    m('div', [
                        m('strong', '–ò–≥—Ä–æ–∫: '), data.players.princess?.name || '-',
                        m('br'),
                        m('strong', '–ù–∞—Ä—è–¥: '), this.getOutfitName(data.stats.princess?.outfit || 'princess_dress'),
                        m('br'),
                        data.locations?.princess && [
                            m('strong', '–õ–æ–∫–∞—Ü–∏—è: '), 
                            data.locations.princess.icon + ' ' + data.locations.princess.name
                        ]
                    ]),
                    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏–∏ –∫–Ω—è–∂–Ω—ã
                    data.locations?.princess && m('.location-info', { style: 'margin: 10px 0; font-size: 0.9em;' }, [
                        data.stats.princess?.npcsPresent?.length > 0 ? 
                            ['üë• ', m('em', `–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: ${data.stats.princess.npcsPresent.join(', ')}`)] :
                            data.locations.princess.canChangeOutfit ?
                                ['ü§´ ', m('em', '–ù–∏–∫–æ–≥–æ –Ω–µ—Ç')] :
                                ['üë• ', m('em', '–ü—É–±–ª–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ')]
                    ]),
                    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–≤–µ—Å—Ç–µ
                    this.renderQuestInfo('princess', data),
                    m('div', this.renderCharacterChoices('princess', data.choices.princess, vnode))
                ])
            ]);
        } else if (playerRole === 'helper') {
            return m('.single-player-layout', [
                m('.player-panel.panel-helper', [
                    m('h3', { style: 'background: #e0f2e7; color: #155724;' }, 'üßô‚Äç‚ôÄÔ∏è –ü–æ–º–æ—â–Ω–∏—Ü–∞ –≤–µ–¥—å–º—ã'),
                    m('div', [
                        m('strong', '–ò–≥—Ä–æ–∫: '), data.players.helper?.name || '-',
                        m('br'),
                        m('strong', '–ù–∞—Ä—è–¥: '), this.getOutfitName(data.stats.helper?.outfit || 'common_dress'),
                        m('br'),
                        data.locations?.helper && [
                            m('strong', '–õ–æ–∫–∞—Ü–∏—è: '), 
                            data.locations.helper.icon + ' ' + data.locations.helper.name
                        ]
                    ]),
                    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–º–æ—â–Ω–∏—Ü—ã
                    data.locations?.helper && m('.location-info', { style: 'margin: 10px 0; font-size: 0.9em;' }, [
                        data.stats.helper?.npcsPresent?.length > 0 ? 
                            ['üë• ', m('em', `–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: ${data.stats.helper.npcsPresent.join(', ')}`)] :
                            data.locations.helper.canChangeOutfit ?
                                ['ü§´ ', m('em', '–ù–∏–∫–æ–≥–æ –Ω–µ—Ç')] :
                                ['üë• ', m('em', '–ü—É–±–ª–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ')]
                    ]),
                    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–≤–µ—Å—Ç–µ
                    this.renderQuestInfo('helper', data),
                    m('div', this.renderCharacterChoices('helper', data.choices.helper, vnode))
                ])
            ]);
        }
        
        return m('div', '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ...');
    },

    renderCharacterChoices(character, choices, vnode) {
        const playerRole = this.getPlayerRole(vnode);
        const isMyRole = playerRole === character;
        const hasChoices = choices && choices.length > 0;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±–æ—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        if (isMyRole && hasChoices) {
            const outfitChoices = choices.filter(choice => choice.isOutfitRequest);
            const movementChoices = choices.filter(choice => choice.isMovement);
            const npcChoices = choices.filter(choice => choice.isNPCInteraction);
            const actionChoices = choices.filter(choice => !choice.isOutfitRequest && !choice.isMovement && !choice.isNPCInteraction);
            
            return [
                actionChoices.length > 0 && m('div', [
                    m('.choice-section-header', '‚ö° –í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è:'),
                    actionChoices.map(choice => this.renderChoiceButton(choice, character, vnode))
                ]),
                npcChoices.length > 0 && m('div.mt-2', [
                    m('.choice-section-header', 'üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å:'),
                    npcChoices.map(choice => this.renderChoiceButton(choice, character, vnode))
                ]),
                outfitChoices.length > 0 && m('div.mt-2', [
                    m('.choice-section-header', 'üëó –°–º–µ–Ω–∞ –æ–¥–µ–∂–¥—ã:'),
                    outfitChoices.map(choice => this.renderChoiceButton(choice, character, vnode))
                ]),
                movementChoices.length > 0 && m('div.mt-2', [
                    m('.choice-section-header', 'üö∂ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ:'),
                    movementChoices.map(choice => this.renderChoiceButton(choice, character, vnode))
                ])
            ];
        } else if (isMyRole) {
            return m('em', '–û–±–¥—É–º—ã–≤–∞–µ—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥...');
        }
        
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–≥–æ–º –∏–≥—Ä–æ–∫–µ
        return null;
    },

    renderNPCDialogue(vnode) {
        const gameData = this.getGameData(vnode);
        const playerRole = this.getPlayerRole(vnode);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        const dialogue = gameData.npcDialogues && gameData.npcDialogues[playerRole];
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        if (!dialogue) return null;
        
        const attitudeClass = dialogue.attitude === 'hostile' ? 'danger' : 'success';
        
        return [
            // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
            m('.npc-dialogue-overlay', {
                style: 'position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0, 0, 0, 0.6); z-index: 999;',
                onclick: (e) => e.stopPropagation() // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Ñ–æ–Ω
            }),
            // –°–∞–º–æ –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
            m('.npc-dialogue-modal', {
                style: 'position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); max-width: 500px; z-index: 1000; border-radius: 12px; padding: 25px;'
            }, [
                m('h3', { class: `text-${attitudeClass}` }, dialogue.npcName),
                m('.npc-greeting', dialogue.greeting),
                m('.npc-choices', dialogue.choices.map(choice => 
                    m('button.btn.btn-primary', {
                        style: 'display: block; width: 100%; margin: 12px 0; padding: 12px;',
                        onclick: () => this.respondToNPCDialogue(choice.id, playerRole, vnode),
                        disabled: this.dialogueProcessing
                    }, choice.text)
                )),
                // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞
                m('button.btn.btn-secondary', {
                    style: 'margin-top: 15px; padding: 8px 16px;',
                    onclick: () => this.closeNPCDialogue(vnode),
                    disabled: this.dialogueProcessing
                }, '‚ùå –ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥')
            ])
        ];
    },

    closeNPCDialogue(vnode) {
        const gameData = this.getGameData(vnode);
        const playerRole = this.getPlayerRole(vnode);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏–∞–ª–æ–≥ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω –∏ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
        if (!gameData.npcDialogues[playerRole] || this.dialogueProcessing) {
            return;
        }
        
        this.dialogueProcessing = true;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞
        this.app.socketManager.socket.emit('close-npc-dialogue');
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
        setTimeout(() => {
            this.dialogueProcessing = false;
        }, 1000);
    },

    respondToNPCDialogue(choiceId, character, vnode) {
        const gameData = this.getGameData(vnode);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏–∞–ª–æ–≥ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω –∏ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
        if (!gameData.npcDialogues[character] || this.dialogueProcessing) {
            return;
        }
        
        this.dialogueProcessing = true;
        
        this.app.socketManager.socket.emit('npc-dialogue-choice', {
            choiceId: choiceId,
            character: character
        });
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
        setTimeout(() => {
            this.dialogueProcessing = false;
        }, 1000);
    },

    view(vnode) {
        const gameData = this.getGameData(vnode);
        if (!gameData) {
            return m('div', '–ó–∞–≥—Ä—É–∑–∫–∞...');
        }

        const data = gameData;

        return m('div#coop-game-screen.fade-in', [
            // Header
            m('.text-center.mb-2', [
                m('button.btn.btn-secondary', {
                    onclick: () => this.leaveGame(vnode),
                    title: '–ü–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É'
                }, 'üö™ –í—ã–π—Ç–∏'),
                m('span.mx-2', ['–ö–æ–º–Ω–∞—Ç–∞: ', m('strong', data.roomId)]),
                m('button.btn.btn-secondary', {
                    onclick: () => this.toggleChat()
                }, 'üí¨ –ß–∞—Ç')
            ]),

            // NPC dialogue modal
            this.renderNPCDialogue(vnode),

            // Outfit request container
            m('#outfit-request-container.request-container', this.renderOutfitRequest(vnode)),

            // Story section
            m('.card#story-section', [
                m('.card-header', data.scene.title),
                m('#story-text', m.trust(data.scene.text))
            ]),

            // Player panel - only show current player's information
            this.renderCurrentPlayerPanel(vnode, data),

            // Chat section
            m(`#chat-section.chat-section${this.chatVisible ? '' : '.hidden'}`, [
                m('.chat-messages#chat-messages'),
                m('.chat-input-container', [
                    m('input#chat-input.chat-input', {
                        type: 'text',
                        placeholder: '–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ...',
                        maxlength: 200,
                        onkeypress: (e) => {
                            if (e.key === 'Enter') this.sendChatMessage(vnode);
                        }
                    }),
                    m('button.btn.chat-send', {
                        onclick: () => this.sendChatMessage(vnode)
                    }, '–û—Ç–ø—Ä–∞–≤–∏—Ç—å')
                ])
            ])
        ]);
    }
};

export default CoopGame;