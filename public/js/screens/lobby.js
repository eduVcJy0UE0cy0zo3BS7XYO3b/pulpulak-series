import { loadComponent } from '../utils/helpers.js';

class Lobby {
    constructor(app) {
        this.app = app;
        this.element = null;
        this.roomData = null;
        this.isHost = false;
    }

    async show(data) {
        this.roomData = data;
        this.isHost = data.isHost || false;
        
        this.element = await loadComponent('lobby');
        this.app.container.appendChild(this.element);
        this.setupEventListeners();
        this.updateLobby(data);
    }

    hide() {
        if (this.element) {
            this.element.remove();
            this.element = null;
        }
    }

    setupEventListeners() {
        // –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        this.element.querySelector('[data-action="back-to-menu"]').addEventListener('click', () => {
            this.app.showScreen('mainMenu');
        });

        // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ö–æ—Å—Ç–∞)
        this.element.querySelector('[data-action="start-coop-game"]').addEventListener('click', () => {
            if (this.isHost && this.roomData) {
                this.app.startCoopGame(this.roomData.roomId);
            }
        });

        // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ ID –∫–æ–º–Ω–∞—Ç—ã –ø—Ä–∏ –∫–ª–∏–∫–µ
        const roomIdDisplay = this.element.querySelector('#room-id-display');
        roomIdDisplay.addEventListener('click', () => {
            navigator.clipboard.writeText(roomIdDisplay.textContent).then(() => {
                const originalText = roomIdDisplay.textContent;
                roomIdDisplay.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
                setTimeout(() => {
                    roomIdDisplay.textContent = originalText;
                }, 1000);
            }).catch(() => {
                // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
                roomIdDisplay.select();
                document.execCommand('copy');
            });
        });
    }

    updateLobby(data) {
        this.roomData = data;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º ID –∫–æ–º–Ω–∞—Ç—ã
        this.element.querySelector('#room-id-display').textContent = data.roomId;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        this.updatePlayersList(data.players);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫–∞
        this.updateStartButton(data.players);
    }

    updatePlayersList(players) {
        const playersList = this.element.querySelector('#players-list');
        playersList.innerHTML = '';

        // –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–Ω—è–∂–Ω—ã
        const princessCard = this.createPlayerCard('princess', players.princess);
        playersList.appendChild(princessCard);

        // –ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–º–æ—â–Ω–∏—Ü—ã
        const helperCard = this.createPlayerCard('helper', players.helper);
        playersList.appendChild(helperCard);
    }

    createPlayerCard(role, playerData) {
        const card = document.createElement('div');
        card.className = 'player-card';

        const roleInfo = {
            princess: {
                name: 'üëë –ö–Ω—è–∂–Ω–∞ –ü—É–ª–ø—É–ª–∞–∫',
                icon: 'üëë',
                class: 'role-princess'
            },
            helper: {
                name: 'üßô‚Äç‚ôÄÔ∏è –ü–æ–º–æ—â–Ω–∏—Ü–∞ –≤–µ–¥—å–º—ã',
                icon: 'üßô‚Äç‚ôÄÔ∏è',
                class: 'role-helper'
            }
        };

        const info = roleInfo[role];

        if (playerData) {
            card.innerHTML = `
                <div class="player-info">
                    <div class="player-avatar">${info.icon}</div>
                    <div>
                        <div><strong>${info.name}</strong></div>
                        <div>–ò–≥—Ä–æ–∫: ${playerData.name || playerData.id}</div>
                        ${playerData.id === this.app.socketManager.socket.id ? '<em>(–≠—Ç–æ –≤—ã)</em>' : ''}
                    </div>
                </div>
                <div class="player-role ${info.class}">–ì–æ—Ç–æ–≤</div>
            `;
        } else {
            card.innerHTML = `
                <div class="player-info">
                    <div class="player-avatar">‚ùì</div>
                    <div>
                        <div><strong>${info.name}</strong></div>
                        <div><em>–û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞...</em></div>
                    </div>
                </div>
                <div class="player-role role-waiting">–û–∂–∏–¥–∞–Ω–∏–µ</div>
            `;
        }

        return card;
    }

    updateStartButton(players) {
        const startBtn = this.element.querySelector('#start-game-btn');
        const waitingText = this.element.querySelector('.waiting-text');
        
        const canStart = players.princess && players.helper;
        
        startBtn.disabled = !canStart || !this.isHost;
        
        if (!this.isHost) {
            startBtn.textContent = '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ö–æ—Å—Ç–∞';
            waitingText.innerHTML = '<em>–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É</em>';
        } else if (canStart) {
            startBtn.textContent = '‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É';
            waitingText.innerHTML = '<em>–í—Å–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã!</em>';
        } else {
            startBtn.textContent = '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤';
            waitingText.innerHTML = '<em>–û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...</em>';
        }
    }
}

export default Lobby;
