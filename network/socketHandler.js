const CoopGameLogic = require('../game/coopGameLogic');

class SocketHandler {
    constructor(io) {
        this.io = io;
        this.rooms = new Map();
        this.playerRooms = new Map(); // socketId -> roomId
        this.gameLogic = new CoopGameLogic();
        this.setupEventHandlers();
    }

    setupEventHandlers() {
        this.io.on('connection', (socket) => {
            console.log(`üîå –ò–≥—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);

            // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
            socket.on('create-room', () => {
                const roomId = this.generateRoomId();
                const roomData = {
                    id: roomId,
                    players: {
                        princess: null,
                        helper: null
                    },
                    gameState: 'waiting',
                    host: socket.id
                };

                this.rooms.set(roomId, roomData);
                this.playerRooms.set(socket.id, roomId);
                socket.join(roomId);

                console.log(`üè† –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: ${roomId} —Ö–æ—Å—Ç–æ–º ${socket.id}`);
                
                socket.emit('room-created', {
                    roomId: roomId,
                    players: roomData.players,
                    isHost: true
                });
            });

            // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
            socket.on('join-room', (roomId) => {
                const room = this.rooms.get(roomId);
                if (!room) {
                    socket.emit('error', '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                    return;
                }

                if (room.gameState !== 'waiting') {
                    socket.emit('error', '–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å');
                    return;
                }

                // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å
                if (!room.players.princess) {
                    room.players.princess = { id: socket.id, name: `–ò–≥—Ä–æ–∫ ${socket.id.substring(0, 6)}` };
                } else if (!room.players.helper) {
                    room.players.helper = { id: socket.id, name: `–ò–≥—Ä–æ–∫ ${socket.id.substring(0, 6)}` };
                } else {
                    socket.emit('error', '–ö–æ–º–Ω–∞—Ç–∞ –ø–æ–ª–Ω–∞');
                    return;
                }

                this.playerRooms.set(socket.id, roomId);
                socket.join(roomId);

                console.log(`üö™ –ò–≥—Ä–æ–∫ ${socket.id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);

                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ—Ö –≤ –ª–æ–±–±–∏
                const lobbyData = {
                    roomId: roomId,
                    players: room.players,
                    isHost: socket.id === room.host
                };

                socket.emit('room-joined', lobbyData);
                socket.to(roomId).emit('lobby-update', lobbyData);
            });

            // –ó–∞–ø—É—Å–∫ –∫–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
            socket.on('start-coop-game', (data) => {
                try {
                    const room = this.rooms.get(data.roomId);
                    if (!room || !room.players.princess || !room.players.helper) {
                        socket.emit('error', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã');
                        return;
                    }

                    if (socket.id !== room.host) {
                        socket.emit('error', '–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É');
                        return;
                    }

                    room.gameState = 'playing';
                    
                    const gameData = this.gameLogic.startGame(data.roomId, room.players);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    console.log('üì° –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã, –¥–∞–Ω–Ω—ã–µ:', {
                        roomId: data.roomId,
                        stats: gameData.stats,
                        helperOutfit: gameData.stats?.helper?.outfit,
                        princessOutfit: gameData.stats?.princess?.outfit
                    });
                    
                    this.io.to(data.roomId).emit('game-started', gameData);
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã:', error);
                    socket.emit('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É');
                }
            });

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–æ–≤
            socket.on('make-choice', (data) => {
                try {
                    const roomId = this.playerRooms.get(socket.id);
                    if (!roomId) {
                        socket.emit('error', '–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–µ');
                        return;
                    }

                    const room = this.rooms.get(roomId);
                    if (!room || room.gameState !== 'playing') {
                        socket.emit('error', '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å');
                        return;
                    }

                    console.log(`üéØ –ü–æ–ª—É—á–µ–Ω –≤—ã–±–æ—Ä: ${data.choiceId} –æ—Ç ${socket.id} –¥–ª—è ${data.character}`);

                    const result = this.gameLogic.makeChoice(roomId, socket.id, data.choiceId, data.character);
                    
                    if (result.success) {
                        console.log('‚úÖ –í—ã–±–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', {
                            helperOutfit: result.gameData.stats?.helper?.outfit,
                            princessOutfit: result.gameData.stats?.princess?.outfit
                        });
                        
                        this.io.to(roomId).emit('game-update', result.gameData);
                    } else {
                        socket.emit('error', result.message);
                    }
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞:', error);
                    socket.emit('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä');
                }
            });

            // –ß–∞—Ç
            socket.on('chat-message', (data) => {
                const roomId = this.playerRooms.get(socket.id);
                if (roomId) {
                    const room = this.rooms.get(roomId);
                    let playerName = '–ò–≥—Ä–æ–∫';
                    
                    if (room.players.princess?.id === socket.id) {
                        playerName = '–ö–Ω—è–∂–Ω–∞';
                    } else if (room.players.helper?.id === socket.id) {
                        playerName = '–ü–æ–º–æ—â–Ω–∏—Ü–∞';
                    }

                    this.io.to(roomId).emit('chat-message', {
                        playerName: playerName,
                        message: data.message,
                        timestamp: new Date()
                    });
                }
            });

            // –ü–æ–∫–∏–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
            socket.on('leave-room', (roomId) => {
                this.handlePlayerLeave(socket, roomId);
            });

            // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
            socket.on('disconnect', () => {
                console.log(`‚ùå –ò–≥—Ä–æ–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);
                const roomId = this.playerRooms.get(socket.id);
                if (roomId) {
                    this.handlePlayerLeave(socket, roomId);
                }
            });
        });
    }

    handlePlayerLeave(socket, roomId) {
        const room = this.rooms.get(roomId);
        if (!room) return;

        // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
        if (room.players.princess?.id === socket.id) {
            room.players.princess = null;
        } else if (room.players.helper?.id === socket.id) {
            room.players.helper = null;
        }

        this.playerRooms.delete(socket.id);
        socket.leave(roomId);

        // –ï—Å–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ –±–æ–ª—å—à–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç, —É–¥–∞–ª—è–µ–º –µ—ë
        if (!room.players.princess && !room.players.helper) {
            this.rooms.delete(roomId);
            this.gameLogic.removeGame(roomId);
            console.log(`üóëÔ∏è –ö–æ–º–Ω–∞—Ç–∞ ${roomId} —É–¥–∞–ª–µ–Ω–∞`);
        } else {
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–≥—Ä–æ–∫–æ–≤
            socket.to(roomId).emit('player-left', {
                roomId: roomId,
                players: room.players
            });
        }
    }

    generateRoomId() {
        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        let result = '';
        for (let i = 0; i < 6; i++) {
            result += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return result;
    }
}

module.exports = SocketHandler;
