const CoopGameLogic = require('../game/coopGameLogic');

class SocketHandler {
    constructor(io) {
        this.io = io;
        this.rooms = new Map();
        this.playerRooms = new Map(); // socketId -> roomId
        this.gameLogic = new CoopGameLogic();
        this.setupEventHandlers();
    }

    setupEventHandlers() {
        this.io.on('connection', (socket) => {
            console.log(`üîå –ò–≥—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);
            
            // Store username
            socket.username = null;
            
            // Handle username setting
            socket.on('set-username', (username) => {
                socket.username = username;
                console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${socket.id}`);
            });

            // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
            socket.on('create-room', (data) => {
                // Set username if provided
                if (data && data.username) {
                    socket.username = data.username;
                }
                const roomId = this.generateRoomId();
                const playerName = socket.username || `–ò–≥—Ä–æ–∫ ${socket.id.substring(0, 6)}`;
                
                const roomData = {
                    id: roomId,
                    players: {
                        princess: { id: socket.id, name: playerName }, // –°–æ–∑–¥–∞—Ç–µ–ª—å —Å—Ä–∞–∑—É —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫–Ω—è–∂–Ω–æ–π
                        helper: null
                    },
                    gameState: 'waiting'
                };

                this.rooms.set(roomId, roomData);
                this.playerRooms.set(socket.id, roomId);
                socket.join(roomId);

                console.log(`üè† –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: ${roomId}, –∏–≥—Ä–æ–∫ ${playerName} - –∫–Ω—è–∂–Ω–∞`);
                
                socket.emit('room-created', {
                    roomId: roomId,
                    players: roomData.players
                });
            });

            // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
            socket.on('join-room', (data) => {
                const roomId = typeof data === 'string' ? data : data.roomId;
                
                // Set username if provided
                if (data && data.username) {
                    socket.username = data.username;
                }
                const room = this.rooms.get(roomId);
                if (!room) {
                    socket.emit('error', '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                    return;
                }

                if (room.gameState !== 'waiting') {
                    socket.emit('error', '–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å');
                    return;
                }

                // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å
                const playerName = socket.username || `–ò–≥—Ä–æ–∫ ${socket.id.substring(0, 6)}`;
                
                if (!room.players.princess) {
                    room.players.princess = { id: socket.id, name: playerName };
                } else if (!room.players.helper) {
                    room.players.helper = { id: socket.id, name: playerName };
                } else {
                    socket.emit('error', '–ö–æ–º–Ω–∞—Ç–∞ –ø–æ–ª–Ω–∞');
                    return;
                }

                this.playerRooms.set(socket.id, roomId);
                socket.join(roomId);

                console.log(`üö™ –ò–≥—Ä–æ–∫ ${socket.id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);

                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ—Ö –≤ –ª–æ–±–±–∏
                const lobbyData = {
                    roomId: roomId,
                    players: room.players
                };

                socket.emit('room-joined', lobbyData);
                socket.to(roomId).emit('lobby-update', lobbyData);
            });

            // –ó–∞–ø—É—Å–∫ –∫–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
            socket.on('start-coop-game', (data) => {
                try {
                    const room = this.rooms.get(data.roomId);
                    if (!room || !room.players.princess || !room.players.helper) {
                        socket.emit('error', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã');
                        return;
                    }

                    // –õ—é–±–æ–π –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –∫–æ–≥–¥–∞ –æ–±–∞ –≥–æ—Ç–æ–≤—ã

                    room.gameState = 'playing';
                    
                    const gameData = this.gameLogic.startGame(data.roomId, room.players);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    console.log('üì° –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã, –¥–∞–Ω–Ω—ã–µ:', {
                        roomId: data.roomId,
                        stats: gameData.stats,
                        helperOutfit: gameData.stats?.helper?.outfit,
                        princessOutfit: gameData.stats?.princess?.outfit
                    });
                    
                    this.io.to(data.roomId).emit('game-started', gameData);
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã:', error);
                    socket.emit('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É');
                }
            });

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–æ–≤
            socket.on('make-choice', (data) => {
		try {
                    const roomId = this.playerRooms.get(socket.id);
                    if (!roomId) {
			socket.emit('error', '–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–µ');
			return;
                    }

                    const room = this.rooms.get(roomId);
                    if (!room || room.gameState !== 'playing') {
			socket.emit('error', '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å');
			return;
                    }

                    console.log(`üéØ –ü–æ–ª—É—á–µ–Ω –≤—ã–±–æ—Ä: ${data.choiceId} –æ—Ç ${socket.id} –¥–ª—è ${data.character}`);

                    // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±–º–µ–Ω–∞ –æ–¥–µ–∂–¥–æ–π, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                    if (data.choiceId === 'request_outfit_swap') {
			socket.emit('request-outfit-swap', { character: data.character });
			return;
                    }

                    const result = this.gameLogic.makeChoice(roomId, socket.id, data.choiceId, data.character);
                    
                    if (result.success) {
			this.io.to(roomId).emit('game-update', result.gameData);
                    } else {
			socket.emit('error', result.message);
                    }
		} catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞:', error);
                    socket.emit('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä');
		}
            });

            // –ß–∞—Ç
            socket.on('chat-message', (data) => {
                const roomId = this.playerRooms.get(socket.id);
                if (roomId) {
                    const room = this.rooms.get(roomId);
                    let playerName = socket.username || '–ò–≥—Ä–æ–∫';
                    let role = '';
                    
                    if (room.players.princess?.id === socket.id) {
                        role = ' (–ö–Ω—è–∂–Ω–∞)';
                    } else if (room.players.helper?.id === socket.id) {
                        role = ' (–ü–æ–º–æ—â–Ω–∏—Ü–∞)';
                    }

                    this.io.to(roomId).emit('chat-message', {
                        sender: playerName + role,
                        message: data.message,
                        timestamp: new Date()
                    });
                }
            });

	    socket.on('request-outfit-swap', (data) => {
		try {
                    const roomId = this.playerRooms.get(socket.id);
                    if (!roomId) {
			socket.emit('error', '–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–µ');
			return;
                    }

                    const room = this.rooms.get(roomId);
                    if (!room || room.gameState !== 'playing') {
			socket.emit('error', '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å');
			return;
                    }

                    console.log(`üëó –ó–∞–ø—Ä–æ—Å –æ–±–º–µ–Ω–∞ –æ–¥–µ–∂–¥–æ–π –æ—Ç ${socket.id} –¥–ª—è ${data.character}`);

                    const result = this.gameLogic.createOutfitSwapRequest(roomId, socket.id, data.character);
                    
                    if (result.success) {
			// –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
			const updatedGameData = this.gameLogic.getGameData(roomId);
			this.io.to(roomId).emit('outfit-request-created', {
                            request: result.request,
                            message: result.message,
                            gameData: updatedGameData
			});
                    } else {
			socket.emit('error', result.message);
                    }
		} catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –æ–±–º–µ–Ω–∞ –æ–¥–µ–∂–¥–æ–π:', error);
                    socket.emit('error', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å');
		}
            });

            // –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ–±–º–µ–Ω–∞ –æ–¥–µ–∂–¥–æ–π
            socket.on('respond-outfit-swap', (data) => {
		try {
                    const roomId = this.playerRooms.get(socket.id);
                    if (!roomId) {
			socket.emit('error', '–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–µ');
			return;
                    }

                    console.log(`üëó –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ–±–º–µ–Ω–∞: ${data.accepted} –æ—Ç ${socket.id}`);

                    const result = this.gameLogic.respondToOutfitSwapRequest(roomId, socket.id, data.accepted);
                    
                    if (result.success) {
			// –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
			const updatedGameData = this.gameLogic.getGameData(roomId);
			this.io.to(roomId).emit('outfit-request-resolved', {
                            accepted: result.accepted,
                            declined: result.declined,
                            message: result.message,
                            gameData: updatedGameData
			});
                    } else {
			socket.emit('error', result.message);
                    }
		} catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ–±–º–µ–Ω–∞ –æ–¥–µ–∂–¥–æ–π:', error);
                    socket.emit('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç');
		}
            });
	    
            // –û—Ç–≤–µ—Ç –Ω–∞ –¥–∏–∞–ª–æ–≥ —Å NPC
            socket.on('npc-dialogue-choice', (data) => {
                try {
                    const roomId = this.playerRooms.get(socket.id);
                    if (!roomId) {
                        socket.emit('error', '–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–µ');
                        return;
                    }

                    const room = this.rooms.get(roomId);
                    if (!room || room.gameState !== 'playing') {
                        socket.emit('error', '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å');
                        return;
                    }

                    console.log(`üí¨ –í—ã–±–æ—Ä –≤ –¥–∏–∞–ª–æ–≥–µ NPC –æ—Ç ${socket.id}: ${data.choiceId}`);

                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤ –¥–∏–∞–ª–æ–≥–µ
                    const result = this.gameLogic.processNPCDialogueChoice(roomId, socket.id, data.choiceId, data.character);
                    
                    if (result.success) {
                        const updatedGameData = this.gameLogic.getGameData(roomId);
                        this.io.to(roomId).emit('game-state-updated', updatedGameData);
                        
                        if (result.message) {
                            this.io.to(roomId).emit('game-message', {
                                type: result.type || 'info',
                                message: result.message
                            });
                        }
                    } else {
                        socket.emit('error', result.message);
                    }
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞ NPC:', error);
                    socket.emit('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä');
                }
            });

            // –ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å NPC
            socket.on('close-npc-dialogue', () => {
                try {
                    const roomId = this.playerRooms.get(socket.id);
                    if (!roomId) {
                        socket.emit('error', '–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–µ');
                        return;
                    }

                    console.log(`üí¨ –ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ NPC –æ—Ç ${socket.id}`);

                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
                    const result = this.gameLogic.closeNPCDialogue(roomId, socket.id);
                    
                    if (result.success) {
                        const updatedGameData = this.gameLogic.getGameData(roomId);
                        this.io.to(roomId).emit('game-state-updated', updatedGameData);
                    } else {
                        socket.emit('error', result.message);
                    }
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞ NPC:', error);
                    socket.emit('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥');
                }
            });
            
            // –ü–æ–∫–∏–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
            socket.on('leave-room', (roomId) => {
                this.handlePlayerLeave(socket, roomId);
            });

            // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
            socket.on('disconnect', () => {
                console.log(`‚ùå –ò–≥—Ä–æ–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);
                const roomId = this.playerRooms.get(socket.id);
                if (roomId) {
                    this.handlePlayerLeave(socket, roomId);
                }
            });
        });
    }

    handlePlayerLeave(socket, roomId) {
        const room = this.rooms.get(roomId);
        if (!room) return;

        // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
        if (room.players.princess?.id === socket.id) {
            room.players.princess = null;
        } else if (room.players.helper?.id === socket.id) {
            room.players.helper = null;
        }

        this.playerRooms.delete(socket.id);
        socket.leave(roomId);

        // –ï—Å–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ –±–æ–ª—å—à–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç, —É–¥–∞–ª—è–µ–º –µ—ë
        if (!room.players.princess && !room.players.helper) {
            this.rooms.delete(roomId);
            this.gameLogic.removeGame(roomId);
            console.log(`üóëÔ∏è –ö–æ–º–Ω–∞—Ç–∞ ${roomId} —É–¥–∞–ª–µ–Ω–∞`);
        } else {
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–≥—Ä–æ–∫–æ–≤
            socket.to(roomId).emit('player-left', {
                roomId: roomId,
                players: room.players,
                playerName: socket.username || '–ò–≥—Ä–æ–∫'
            });
        }
    }

    generateRoomId() {
        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        let result = '';
        for (let i = 0; i < 6; i++) {
            result += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return result;
    }
}

module.exports = SocketHandler;
