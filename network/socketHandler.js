class SocketHandler {
    constructor(io) {
        this.io = io;
        this.rooms = new Map(); // –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–º–Ω–∞—Ç
        this.playerRooms = new Map(); // –°–≤—è–∑—å –∏–≥—Ä–æ–∫ -> –∫–æ–º–Ω–∞—Ç–∞
        this.setupEventHandlers();
        console.log('‚úÖ SocketHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    setupEventHandlers() {
        this.io.on('connection', (socket) => {
            console.log('üéÆ –ò–≥—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:', socket.id);

            // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
            socket.on('create-room', () => {
                console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –æ—Ç –∏–≥—Ä–æ–∫–∞:', socket.id);
                
                try {
                    const roomId = this.generateRoomId();
                    const room = {
                        id: roomId,
                        players: {
                            princess: { 
                                id: socket.id, 
                                name: this.generatePlayerName() 
                            },
                            helper: null
                        },
                        gameState: 'lobby',
                        createdAt: new Date()
                    };

                    this.rooms.set(roomId, room);
                    this.playerRooms.set(socket.id, roomId);
                    socket.join(roomId);

                    console.log(`‚úÖ –ö–æ–º–Ω–∞—Ç–∞ ${roomId} —Å–æ–∑–¥–∞–Ω–∞ –∏–≥—Ä–æ–∫–æ–º ${socket.id}`);
                    
                    const roomData = this.getRoomData(roomId);
                    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:', roomData);
                    
                    socket.emit('room-created', roomData);
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
                    socket.emit('error', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É');
                }
            });

            // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
            socket.on('join-room', (roomId) => {
                console.log(`üö™ –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomId} –æ—Ç –∏–≥—Ä–æ–∫–∞ ${socket.id}`);
                
                try {
                    const room = this.rooms.get(roomId);
                    if (!room) {
                        console.log(`‚ùå –ö–æ–º–Ω–∞—Ç–∞ ${roomId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                        socket.emit('error', '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                        return;
                    }

                    if (room.gameState !== 'lobby') {
                        console.log(`‚ùå –ò–≥—Ä–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId} —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å`);
                        socket.emit('error', '–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å');
                        return;
                    }

                    if (room.players.helper) {
                        console.log(`‚ùå –ö–æ–º–Ω–∞—Ç–∞ ${roomId} –ø–æ–ª–Ω–∞`);
                        socket.emit('error', '–ö–æ–º–Ω–∞—Ç–∞ –ø–æ–ª–Ω–∞');
                        return;
                    }

                    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –∫–∞–∫ –ø–æ–º–æ—â–Ω–∏—Ü—É
                    room.players.helper = { 
                        id: socket.id, 
                        name: this.generatePlayerName() 
                    };
                    this.playerRooms.set(socket.id, roomId);
                    socket.join(roomId);

                    console.log(`‚úÖ –ò–≥—Ä–æ–∫ ${socket.id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
                    
                    const roomData = this.getRoomData(roomId);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–µ–º—É—Å—è –∏–≥—Ä–æ–∫—É
                    socket.emit('room-joined', {
                        ...roomData,
                        yourRole: 'helper'
                    });

                    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–±–±–∏ –¥–ª—è –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ
                    this.io.to(roomId).emit('lobby-update', roomData);
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:', error);
                    socket.emit('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ');
                }
            });

            // –ó–∞–ø—É—Å–∫ –∫–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
            socket.on('start-coop-game', (data) => {
                console.log(`üéÆ –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ ${data.roomId}`);
                
                try {
                    const room = this.rooms.get(data.roomId);
                    if (!room || !room.players.princess || !room.players.helper) {
                        socket.emit('error', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã');
                        return;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–æ–º–Ω–∞—Ç—ã (–∫–Ω—è–∂–Ω—ã)
                    if (room.players.princess.id !== socket.id) {
                        socket.emit('error', '–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É');
                        return;
                    }

                    room.gameState = 'playing';
                    
                    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
                    const gameData = {
                        roomId: data.roomId,
                        players: room.players,
                        scene: {
                            title: "–£—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ",
                            text: `–£—Ç—Ä–µ–Ω–Ω–∏–π —Å–≤–µ—Ç –ø—Ä–æ–±–∏–≤–∞–µ—Ç—Å—è —Å–∫–≤–æ–∑—å —Ç—è–∂–µ–ª—ã–µ —à—Ç–æ—Ä—ã –∫–Ω—è–∂–µ—Å–∫–æ–π —Å–ø–∞–ª—å–Ω–∏. 
                            
                            –ö–Ω—è–∂–Ω–∞ –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è –∏ –≤–∏–¥–∏—Ç —Ä—è–¥–æ–º –Ω–µ–∑–Ω–∞–∫–æ–º—É—é –¥–µ–≤—É—à–∫—É, –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂—É—é –Ω–∞ –Ω–µ—ë. 
                            –î–µ–≤—É—à–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Å–µ—Å—Ç—Ä–æ–π –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞–∫.
                            
                            <em>–¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä—ã –∑–∞ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!</em>`
                        },
                        choices: {
                            princess: [
                                {
                                    id: "princess_greet",
                                    text: "–ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å",
                                    description: "–¢–µ–ø–ª–æ –ø–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è —Å '—Å–µ—Å—Ç—Ä–æ–π'"
                                },
                                {
                                    id: "princess_suspicious",
                                    text: "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –æ—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è",
                                    description: "–ß—Ç–æ-—Ç–æ –∫–∞–∂–µ—Ç—Å—è —Å—Ç—Ä–∞–Ω–Ω—ã–º..."
                                }
                            ],
                            helper: [
                                {
                                    id: "helper_explain",
                                    text: "–û–±—ä—è—Å–Ω–∏—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é",
                                    description: "–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –∏ –≤–æ–π–Ω—É"
                                },
                                {
                                    id: "helper_magic",
                                    text: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞–≥–∏—é",
                                    description: "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–∞–≥–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä—å–≥–∏"
                                }
                            ]
                        },
                        stats: {
                            princess: {
                                awareness: 0,
                                outfit: '–ù–æ—á–Ω–∞—è —Ä—É–±–∞—à–∫–∞',
                                loyalty: 50
                            },
                            helper: {
                                influence: 50,
                                secretsKnown: ['parents_dead', 'magic_items'],
                                trustLevel: 75
                            }
                        },
                        currentTurn: 'princess',
                        chapter: 1
                    };

                    console.log(`‚úÖ –ö–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ ${data.roomId}`);
                    this.io.to(data.roomId).emit('game-started', gameData);
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã:', error);
                    socket.emit('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É');
                }
            });

            // –í—ã–±–æ—Ä –≤ –∫–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–µ
            socket.on('make-choice', (data) => {
                console.log(`üéØ –í—ã–±–æ—Ä –æ—Ç –∏–≥—Ä–æ–∫–∞ ${socket.id}:`, data);
                
                try {
                    const roomId = this.playerRooms.get(socket.id);
                    if (!roomId) {
                        socket.emit('error', '–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–µ');
                        return;
                    }

                    const room = this.rooms.get(roomId);
                    if (!room || room.gameState !== 'playing') {
                        socket.emit('error', '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å');
                        return;
                    }

                    // –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
                    const responseText = this.getChoiceResponse(data.choiceId);
                    
                    const gameData = {
                        roomId: roomId,
                        players: room.players,
                        scene: {
                            title: "–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–±–æ—Ä–∞",
                            text: responseText
                        },
                        choices: {
                            princess: [
                                {
                                    id: "continue",
                                    text: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                                    description: "–ò–¥—Ç–∏ –¥–∞–ª—å—à–µ –ø–æ —Å—é–∂–µ—Ç—É"
                                }
                            ],
                            helper: [
                                {
                                    id: "continue_helper",
                                    text: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                                    description: "–ò–¥—Ç–∏ –¥–∞–ª—å—à–µ –ø–æ —Å—é–∂–µ—Ç—É"
                                }
                            ]
                        },
                        stats: {
                            princess: { awareness: 10, outfit: '–ù–æ—á–Ω–∞—è —Ä—É–±–∞—à–∫–∞', loyalty: 50 },
                            helper: { influence: 60, secretsKnown: ['parents_dead'], trustLevel: 75 }
                        },
                        currentTurn: data.character === 'princess' ? 'helper' : 'princess',
                        chapter: 1
                    };

                    this.io.to(roomId).emit('game-update', gameData);
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞:', error);
                    socket.emit('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä');
                }
            });

            // –ß–∞—Ç
            socket.on('chat-message', (data) => {
                try {
                    const roomId = this.playerRooms.get(socket.id);
                    if (!roomId) return;

                    const room = this.rooms.get(roomId);
                    if (!room) return;

                    const playerName = this.getPlayerName(socket.id, room);
                    const chatData = {
                        playerName: playerName,
                        message: data.message,
                        timestamp: new Date()
                    };

                    this.io.to(roomId).emit('chat-message', chatData);
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç–∞:', error);
                }
            });

            // –ü–æ–∫–∏–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
            socket.on('leave-room', (roomId) => {
                this.handlePlayerLeave(socket.id, roomId);
            });

            // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
            socket.on('disconnect', () => {
                console.log('üëã –ò–≥—Ä–æ–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è:', socket.id);
                const roomId = this.playerRooms.get(socket.id);
                if (roomId) {
                    this.handlePlayerLeave(socket.id, roomId);
                }
            });

            // –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            socket.emit('connection-test', { 
                message: '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!', 
                socketId: socket.id 
            });
        });
    }

    generateRoomId() {
        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        let result = '';
        for (let i = 0; i < 4; i++) {
            result += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–∫–æ–π ID –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (this.rooms.has(result)) {
            return this.generateRoomId();
        }
        return result;
    }

    generatePlayerName() {
        const adjectives = ['–ú—É–¥—Ä—ã–π', '–°–º–µ–ª—ã–π', '–•–∏—Ç—Ä—ã–π', '–î–æ–±—Ä—ã–π', '–ë—ã—Å—Ç—Ä—ã–π'];
        const nouns = ['–°—Ç—Ä–∞–Ω–Ω–∏–∫', '–†—ã—Ü–∞—Ä—å', '–ú—É–¥—Ä–µ—Ü', '–ë–∞—Ä–¥', '–õ—É—á–Ω–∏–∫'];
        const adj = adjectives[Math.floor(Math.random() * adjectives.length)];
        const noun = nouns[Math.floor(Math.random() * nouns.length)];
        return `${adj} ${noun}`;
    }

    getChoiceResponse(choiceId) {
        const responses = {
            princess_greet: "–ö–Ω—è–∂–Ω–∞ —Ç–µ–ø–ª–æ –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∞ '—Å–µ—Å—Ç—Ä—É'. –î–µ–≤—É—à–∫–∞ —É–ª—ã–±–Ω—É–ª–∞—Å—å –≤ –æ—Ç–≤–µ—Ç.",
            princess_suspicious: "–ö–Ω—è–∂–Ω–∞ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ—Å–º–æ—Ç—Ä–µ–ª–∞—Å—å. –ß—Ç–æ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫–∞–∂–µ—Ç—Å—è —Å—Ç—Ä–∞–Ω–Ω—ã–º...",
            helper_explain: "–ü–æ–º–æ—â–Ω–∏—Ü–∞ —Å–ø–æ–∫–æ–π–Ω–æ –æ–±—ä—è—Å–Ω–∏–ª–∞ —Å–∏—Ç—É–∞—Ü–∏—é —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏ –∏ –≤–æ–π–Ω–æ–π.",
            helper_magic: "–ü–æ–º–æ—â–Ω–∏—Ü–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∞ –º–∞–≥–∏—é —Å–µ—Ä–µ–≥. –ï—ë —Å–ª–æ–≤–∞ —Å—Ç–∞–ª–∏ –∑–≤—É—á–∞—Ç—å —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–µ–µ.",
            continue: "–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...",
            continue_helper: "–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è..."
        };
        
        return responses[choiceId] || "–ß—Ç–æ-—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ...";
    }

    getRoomData(roomId) {
        const room = this.rooms.get(roomId);
        if (!room) return null;

        return {
            roomId: roomId,
            players: room.players,
            gameState: room.gameState
        };
    }

    getPlayerName(socketId, room) {
        if (room.players.princess?.id === socketId) {
            return room.players.princess.name + ' (–ö–Ω—è–∂–Ω–∞)';
        }
        if (room.players.helper?.id === socketId) {
            return room.players.helper.name + ' (–ü–æ–º–æ—â–Ω–∏—Ü–∞)';
        }
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫';
    }

    handlePlayerLeave(socketId, roomId) {
        try {
            const room = this.rooms.get(roomId);
            if (!room) return;

            const playerName = this.getPlayerName(socketId, room);
            
            // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
            if (room.players.princess?.id === socketId) {
                room.players.princess = null;
            }
            if (room.players.helper?.id === socketId) {
                room.players.helper = null;
            }

            this.playerRooms.delete(socketId);

            // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞—è, —É–¥–∞–ª—è–µ–º –µ–µ
            if (!room.players.princess && !room.players.helper) {
                this.rooms.delete(roomId);
                console.log(`üóëÔ∏è –ö–æ–º–Ω–∞—Ç–∞ ${roomId} —É–¥–∞–ª–µ–Ω–∞ - –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤`);
                return;
            }

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–≥—Ä–æ–∫–æ–≤
            this.io.to(roomId).emit('player-left', {
                playerName: playerName,
                ...this.getRoomData(roomId)
            });

            console.log(`üëã –ò–≥—Ä–æ–∫ ${socketId} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É ${roomId}`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∏–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã:', error);
        }
    }
}

module.exports = SocketHandler;
