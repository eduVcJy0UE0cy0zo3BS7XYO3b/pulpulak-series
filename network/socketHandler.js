const CoopGameLogic = require('../game/coopGameLogic'); // –î–æ–±–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç

class SocketHandler {
    constructor(io) {
        this.io = io;
        this.rooms = new Map();
        this.playerRooms = new Map();
        this.gameLogic = new CoopGameLogic(); // –î–æ–±–∞–≤–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
        this.setupEventHandlers();
    }

    // –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ start-coop-game –∑–∞–º–µ–Ω–∏—Ç—å –∑–∞–≥–ª—É—à–∫—É:
    socket.on('start-coop-game', (data) => {
	try {
            const room = this.rooms.get(data.roomId);
            if (!room || !room.players.princess || !room.players.helper) {
		socket.emit('error', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã');
		return;
            }

            if (room.players.princess.id !== socket.id) {
		socket.emit('error', '–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É');
		return;
            }

            room.gameState = 'playing';
            
            const gameData = this.gameLogic.startGame(data.roomId, room.players);
            
            // –î–æ–±–∞–≤–∏–º –æ—Ç–ª–∞–¥–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            console.log('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ game-started:', {
		helperOutfit: gameData.stats?.helper?.outfit,
		princessOutfit: gameData.stats?.princess?.outfit
            });
            
            this.io.to(data.roomId).emit('game-started', gameData);
	} catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã:', error);
            socket.emit('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É');
	}
    });

    // –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ make-choice:
    socket.on('make-choice', (data) => {
        try {
            const roomId = this.playerRooms.get(socket.id);
            if (!roomId) {
                socket.emit('error', '–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–µ');
                return;
            }

            const room = this.rooms.get(roomId);
            if (!room || room.gameState !== 'playing') {
                socket.emit('error', '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å');
                return;
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
            const result = this.gameLogic.makeChoice(roomId, socket.id, data.choiceId, data.character);
            
            if (result.success) {
                this.io.to(roomId).emit('game-update', result.gameData);
            } else {
                socket.emit('error', result.message);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞:', error);
            socket.emit('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä');
        }
    });
}
