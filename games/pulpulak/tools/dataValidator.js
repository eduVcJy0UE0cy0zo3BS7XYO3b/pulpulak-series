/**
 * –í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
 */

const fs = require('fs');
const path = require('path');
const Ajv = require('ajv');

// –ò–º–ø–æ—Ä—Ç –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–≤
const JsonStoryLoader = require('../data-loaders/JsonStoryLoader');
const JsonLocationLoader = require('../data-loaders/JsonLocationLoader');
const JsonNPCLoader = require('../data-loaders/JsonNPCLoader');
const JsonQuestLoader = require('../data-loaders/JsonQuestLoader');

class DataValidator {
    constructor() {
        this.ajv = new Ajv({ allErrors: true });
        this._schemas = {};
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON —Å—Ö–µ–º—ã
     */
    async _loadSchemas() {
        if (Object.keys(this._schemas).length > 0) {
            return; // –°—Ö–µ–º—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        }

        const schemaFiles = {
            story: '../schemas/story.schema.json',
            location: '../schemas/location.schema.json',
            npc: '../schemas/npc.schema.json',
            quest: '../schemas/quest.schema.json'
        };

        for (const [name, filePath] of Object.entries(schemaFiles)) {
            try {
                const schemaPath = path.join(__dirname, filePath);
                const schemaData = await fs.promises.readFile(schemaPath, 'utf8');
                this._schemas[name] = JSON.parse(schemaData);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ —Å—Ö–µ–º–∞
                if (!this.ajv.getSchema(name)) {
                    this.ajv.addSchema(this._schemas[name], name);
                }
            } catch (error) {
                console.error(`Failed to load schema ${name}:`, error);
                throw error;
            }
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π
     */
    async validateStoryData() {
        console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π...');
        
        try {
            await this._loadSchemas();
            const loader = new JsonStoryLoader();
            const scenes = await loader.getAllScenesData();
            
            const validate = this.ajv.getSchema('story');
            const isValid = validate(scenes);
            
            const errors = [];
            if (!isValid) {
                errors.push(...validate.errors.map(err => 
                    `Schema validation: ${err.instancePath} ${err.message}`
                ));
            }

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∑–∞–≥—Ä—É–∑—á–∏–∫
            const loaderValidation = await loader.validateAllData();
            if (!loaderValidation.valid) {
                errors.push(...loaderValidation.errors);
            }

            return {
                dataType: 'stories',
                valid: errors.length === 0,
                errors,
                itemCount: Object.keys(scenes).length
            };
        } catch (error) {
            return {
                dataType: 'stories',
                valid: false,
                errors: [`Failed to validate story data: ${error.message}`],
                itemCount: 0
            };
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π
     */
    async validateLocationData() {
        console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π...');
        
        try {
            await this._loadSchemas();
            const loader = new JsonLocationLoader();
            const locations = await loader._loadData();
            
            const validate = this.ajv.getSchema('location');
            const isValid = validate(locations);
            
            const errors = [];
            if (!isValid) {
                errors.push(...validate.errors.map(err => 
                    `Schema validation: ${err.instancePath} ${err.message}`
                ));
            }

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∑–∞–≥—Ä—É–∑—á–∏–∫
            const loaderValidation = await loader.validateAllData();
            if (!loaderValidation.valid) {
                errors.push(...loaderValidation.errors);
            }

            return {
                dataType: 'locations',
                valid: errors.length === 0,
                errors,
                itemCount: Object.keys(locations).length
            };
        } catch (error) {
            return {
                dataType: 'locations',
                valid: false,
                errors: [`Failed to validate location data: ${error.message}`],
                itemCount: 0
            };
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö NPC
     */
    async validateNPCData() {
        console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö NPC...');
        
        try {
            await this._loadSchemas();
            const loader = new JsonNPCLoader();
            const npcData = await loader._loadData();
            
            const validate = this.ajv.getSchema('npc');
            const isValid = validate(npcData);
            
            const errors = [];
            if (!isValid) {
                errors.push(...validate.errors.map(err => 
                    `Schema validation: ${err.instancePath} ${err.message}`
                ));
            }

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∑–∞–≥—Ä—É–∑—á–∏–∫
            const loaderValidation = await loader.validateAllData();
            if (!loaderValidation.valid) {
                errors.push(...loaderValidation.errors);
            }

            return {
                dataType: 'npcs',
                valid: errors.length === 0,
                errors,
                itemCount: Object.keys(npcData.npcs || {}).length
            };
        } catch (error) {
            return {
                dataType: 'npcs',
                valid: false,
                errors: [`Failed to validate NPC data: ${error.message}`],
                itemCount: 0
            };
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤
     */
    async validateQuestData() {
        console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤...');
        
        try {
            await this._loadSchemas();
            const loader = new JsonQuestLoader();
            const quests = await loader.getAllQuests();
            
            const validate = this.ajv.getSchema('quest');
            const isValid = validate(quests);
            
            const errors = [];
            if (!isValid) {
                errors.push(...validate.errors.map(err => 
                    `Schema validation: ${err.instancePath} ${err.message}`
                ));
            }

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∑–∞–≥—Ä—É–∑—á–∏–∫
            const loaderValidation = await loader.validateAllData();
            if (!loaderValidation.valid) {
                errors.push(...loaderValidation.errors);
            }

            return {
                dataType: 'quests',
                valid: errors.length === 0,
                errors,
                itemCount: Object.keys(quests).length
            };
        } catch (error) {
            return {
                dataType: 'quests',
                valid: false,
                errors: [`Failed to validate quest data: ${error.message}`],
                itemCount: 0
            };
        }
    }

    /**
     * –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è –º–µ–∂–¥—É —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
     */
    async validateCrossReferences() {
        console.log('üîç –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –º–µ–∂–¥—É –¥–∞–Ω–Ω—ã–º–∏...');
        
        try {
            const storyLoader = new JsonStoryLoader();
            const locationLoader = new JsonLocationLoader();
            const npcLoader = new JsonNPCLoader();
            const questLoader = new JsonQuestLoader();

            const [scenes, locations, npcData, quests] = await Promise.all([
                storyLoader.getAllScenesData(),
                locationLoader._loadData(),
                npcLoader._loadData(),
                questLoader.getAllQuests()
            ]);

            const errors = [];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ —Å—Ü–µ–Ω –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏
            for (const [sceneId, scene] of Object.entries(scenes)) {
                if (scene.location && !locations[scene.location]) {
                    errors.push(`Scene ${sceneId}: references non-existent location ${scene.location}`);
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ –∫–≤–µ—Å—Ç–æ–≤ –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏ –∏ NPC
            for (const [questId, quest] of Object.entries(quests)) {
                for (const step of quest.steps || []) {
                    if (step.location && !locations[step.location]) {
                        errors.push(`Quest ${questId}, step ${step.id}: references non-existent location ${step.location}`);
                    }
                    if (step.npc && !npcData.npcs[step.npc]) {
                        errors.push(`Quest ${questId}, step ${step.id}: references non-existent NPC ${step.npc}`);
                    }
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –ª–æ–∫–∞—Ü–∏–∏ NPC
            for (const [locationId, npcIds] of Object.entries(npcData.baseNPCLocations || {})) {
                if (!locations[locationId]) {
                    errors.push(`NPC base locations: references non-existent location ${locationId}`);
                }
                for (const npcId of npcIds) {
                    if (!npcData.npcs[npcId]) {
                        errors.push(`NPC base locations: references non-existent NPC ${npcId} in location ${locationId}`);
                    }
                }
            }

            return {
                dataType: 'cross-references',
                valid: errors.length === 0,
                errors,
                itemCount: errors.length
            };
        } catch (error) {
            return {
                dataType: 'cross-references',
                valid: false,
                errors: [`Failed to validate cross-references: ${error.message}`],
                itemCount: 0
            };
        }
    }

    /**
     * –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async validateAllData() {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é JSON –¥–∞–Ω–Ω—ã—Ö...');
        
        const results = [];
        
        try {
            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
            results.push(await this.validateStoryData());
            results.push(await this.validateLocationData());
            results.push(await this.validateNPCData());
            results.push(await this.validateQuestData());
            results.push(await this.validateCrossReferences());

            const overallValid = results.every(result => result.valid);
            const totalErrors = results.reduce((sum, result) => sum + result.errors.length, 0);
            const totalItems = results.reduce((sum, result) => sum + result.itemCount, 0);

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            const report = {
                timestamp: new Date().toISOString(),
                overallValid,
                totalErrors,
                totalItems,
                results,
                summary: {
                    stories: results[0],
                    locations: results[1],
                    npcs: results[2],
                    quests: results[3],
                    crossReferences: results[4]
                }
            };

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            const reportPath = path.join(__dirname, '../validation-report.json');
            await fs.promises.writeFile(reportPath, JSON.stringify(report, null, 2));

            // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏:');
            results.forEach(result => {
                const status = result.valid ? '‚úÖ' : '‚ùå';
                console.log(`${status} ${result.dataType}: ${result.itemCount} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, ${result.errors.length} –æ—à–∏–±–æ–∫`);
                
                if (result.errors.length > 0) {
                    result.errors.forEach(error => {
                        console.log(`   - ${error}`);
                    });
                }
            });

            console.log(`\nüìã –û—Ç—á–µ—Ç –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${reportPath}`);
            console.log(`üìà –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: ${overallValid ? '‚úÖ –í–°–ï –î–ê–ù–ù–´–ï –í–ê–õ–ò–î–ù–´' : '‚ùå –ù–ê–ô–î–ï–ù–´ –û–®–ò–ë–ö–ò'}`);
            console.log(`üìä –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${totalItems}, –æ—à–∏–±–æ–∫: ${totalErrors}`);

            return report;
        } catch (error) {
            console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    /**
     * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
     */
    async quickValidation() {
        console.log('‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...');
        
        try {
            const checks = [
                { name: 'Story files', check: () => fs.promises.access(path.join(__dirname, '../data-json/storyData.json')) },
                { name: 'Location files', check: () => fs.promises.access(path.join(__dirname, '../data-json/locationData.json')) },
                { name: 'NPC files', check: () => fs.promises.access(path.join(__dirname, '../data-json/npcData.json')) },
                { name: 'Quest files', check: () => fs.promises.access(path.join(__dirname, '../data-json/questData.json')) }
            ];

            const results = [];
            for (const { name, check } of checks) {
                try {
                    await check();
                    results.push({ name, status: '‚úÖ', error: null });
                } catch (error) {
                    results.push({ name, status: '‚ùå', error: error.message });
                }
            }

            results.forEach(result => {
                console.log(`${result.status} ${result.name}${result.error ? ': ' + result.error : ''}`);
            });

            return results.every(result => result.status === '‚úÖ');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
            return false;
        }
    }
}

// –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const validator = new DataValidator();
    
    const command = process.argv[2];
    
    if (command === 'quick') {
        validator.quickValidation()
            .then(success => {
                process.exit(success ? 0 : 1);
            })
            .catch(error => {
                console.error('üí• –û—à–∏–±–∫–∞:', error);
                process.exit(1);
            });
    } else {
        validator.validateAllData()
            .then(report => {
                console.log('‚ú® –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
                process.exit(report.overallValid ? 0 : 1);
            })
            .catch(error => {
                console.error('üí• –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å:', error);
                process.exit(1);
            });
    }
}

module.exports = DataValidator;