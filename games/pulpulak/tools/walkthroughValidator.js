/**
 * –í–∞–ª–∏–¥–∞—Ç–æ—Ä –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∏–≥—Ä—ã - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
 */

const fs = require('fs');
const path = require('path');
const Ajv = require('ajv');
const addFormats = require('ajv-formats');

// –ò–º–ø–æ—Ä—Ç –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
const JsonStoryLoader = require('../data-loaders/JsonStoryLoader');
const JsonLocationLoader = require('../data-loaders/JsonLocationLoader');
const JsonNPCLoader = require('../data-loaders/JsonNPCLoader');
const JsonQuestLoader = require('../data-loaders/JsonQuestLoader');

class WalkthroughValidator {
    constructor() {
        this.ajv = new Ajv({ allErrors: true });
        addFormats(this.ajv);
        this._walkthroughData = null;
        this._gameData = {};
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∏ —Å—Ö–µ–º—É
     */
    async _loadData() {
        if (this._walkthroughData) {
            return this._walkthroughData;
        }

        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
            const walkthroughPath = path.join(__dirname, '../data-json/walkthroughData.json');
            const walkthroughContent = await fs.promises.readFile(walkthroughPath, 'utf8');
            this._walkthroughData = JSON.parse(walkthroughContent);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ö–µ–º—É
            const schemaPath = path.join(__dirname, '../schemas/gameplayWalkthrough.schema.json');
            const schemaContent = await fs.promises.readFile(schemaPath, 'utf8');
            const schema = JSON.parse(schemaContent);
            this.ajv.addSchema(schema, 'walkthrough');

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            const storyLoader = new JsonStoryLoader();
            const locationLoader = new JsonLocationLoader();
            const npcLoader = new JsonNPCLoader();
            const questLoader = new JsonQuestLoader();

            this._gameData = {
                stories: await storyLoader.getAllScenesData(),
                locations: await locationLoader._loadData(),
                npcs: await npcLoader._loadData(),
                quests: await questLoader.getAllQuests()
            };

            return this._walkthroughData;
        } catch (error) {
            console.error('Failed to load walkthrough data:', error);
            throw error;
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
     */
    async validateSchema() {
        console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è...');
        
        try {
            const data = await this._loadData();
            const validate = this.ajv.getSchema('walkthrough');
            const isValid = validate(data);
            
            const errors = [];
            if (!isValid) {
                errors.push(...validate.errors.map(err => 
                    `Schema validation: ${err.instancePath} ${err.message}`
                ));
            }

            return {
                valid: errors.length === 0,
                errors,
                dataType: 'walkthrough_schema'
            };
        } catch (error) {
            return {
                valid: false,
                errors: [`Schema validation failed: ${error.message}`],
                dataType: 'walkthrough_schema'
            };
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–≥—Ä–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
     */
    async validateGameReferences() {
        console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–≥—Ä–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã...');
        
        try {
            const data = await this._loadData();
            const errors = [];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
            for (const walkthrough of data.walkthroughs) {
                for (const step of walkthrough.steps) {
                    const stepPrefix = `Walkthrough ${walkthrough.id}, step ${step.stepNumber}`;
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏
                    if (step.action.target && step.action.type === 'move') {
                        if (!this._gameData.locations[step.action.target]) {
                            errors.push(`${stepPrefix}: Invalid location reference '${step.action.target}'`);
                        }
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ NPC
                    if (step.action.target && step.action.type === 'dialogue') {
                        if (!this._gameData.npcs.npcs[step.action.target]) {
                            errors.push(`${stepPrefix}: Invalid NPC reference '${step.action.target}'`);
                        }
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ü–µ–Ω—ã
                    if (step.action.target && step.action.type === 'scene_choice') {
                        if (!this._gameData.stories[step.action.target]) {
                            errors.push(`${stepPrefix}: Invalid scene reference '${step.action.target}'`);
                        }
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—É—Å–ª–æ–≤–∏—è
                    for (const precondition of step.preconditions || []) {
                        if (precondition.type === 'location' && precondition.value) {
                            if (!this._gameData.locations[precondition.value]) {
                                errors.push(`${stepPrefix}: Invalid location in precondition '${precondition.value}'`);
                            }
                        }
                    }
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–µ—Å—Ç–æ–≤—ã–µ –ø—É—Ç–∏
            for (const [questId, questPath] of Object.entries(data.questCompletionPaths)) {
                if (!this._gameData.quests[questId]) {
                    errors.push(`Quest completion path: Invalid quest reference '${questId}'`);
                }
                
                for (const step of questPath.steps) {
                    for (const action of step.requiredActions) {
                        if (action.type === 'move' && !this._gameData.locations[action.target]) {
                            errors.push(`Quest ${questId}, step ${step.stepId}: Invalid location '${action.target}'`);
                        }
                        if (action.type === 'dialogue' && !this._gameData.npcs.npcs[action.target]) {
                            errors.push(`Quest ${questId}, step ${step.stepId}: Invalid NPC '${action.target}'`);
                        }
                    }
                }
            }

            return {
                valid: errors.length === 0,
                errors,
                dataType: 'game_references'
            };
        } catch (error) {
            return {
                valid: false,
                errors: [`Reference validation failed: ${error.message}`],
                dataType: 'game_references'
            };
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
     */
    async validateWalkthroughLogic() {
        console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è...');
        
        try {
            const data = await this._loadData();
            const errors = [];

            for (const walkthrough of data.walkthroughs) {
                const walkthroughPrefix = `Walkthrough ${walkthrough.id}`;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —à–∞–≥–æ–≤
                const stepNumbers = walkthrough.steps.map(step => step.stepNumber);
                const expectedSequence = Array.from({length: stepNumbers.length}, (_, i) => i + 1);
                
                if (JSON.stringify(stepNumbers) !== JSON.stringify(expectedSequence)) {
                    errors.push(`${walkthroughPrefix}: Steps are not in sequential order`);
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Å–º–µ–Ω—ã –æ–¥–µ–∂–¥—ã
                const outfitChanges = this._trackOutfitChanges(walkthrough.steps);
                if (!this._validateOutfitLogic(outfitChanges)) {
                    errors.push(`${walkthroughPrefix}: Invalid outfit change logic`);
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                const finalState = this._simulateWalkthrough(walkthrough.steps);
                if (!this._compareGameStates(finalState, walkthrough.expectedOutcome)) {
                    errors.push(`${walkthroughPrefix}: Expected outcome doesn't match simulation result`);
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å –∫–≤–µ—Å—Ç–æ–≤
                const questCompletionValid = this._validateQuestCompletion(
                    walkthrough.steps, 
                    walkthrough.expectedOutcome.completedQuests
                );
                if (!questCompletionValid.valid) {
                    errors.push(`${walkthroughPrefix}: ${questCompletionValid.error}`);
                }
            }

            return {
                valid: errors.length === 0,
                errors,
                dataType: 'walkthrough_logic'
            };
        } catch (error) {
            return {
                valid: false,
                errors: [`Logic validation failed: ${error.message}`],
                dataType: 'walkthrough_logic'
            };
        }
    }

    /**
     * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–¥–µ–∂–¥—ã –≤ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏
     */
    _trackOutfitChanges(steps) {
        const outfitState = {
            princess: 'princess_dress',
            helper: 'helper_dress'
        };
        const changes = [];

        for (const step of steps) {
            if (step.action.type === 'outfit_swap') {
                // –ú–µ–Ω—è–µ–º –Ω–∞—Ä—è–¥—ã –º–µ—Å—Ç–∞–º–∏
                const temp = outfitState.princess;
                outfitState.princess = outfitState.helper;
                outfitState.helper = temp;
                
                changes.push({
                    step: step.stepNumber,
                    princess: outfitState.princess,
                    helper: outfitState.helper
                });
            }
        }

        return changes;
    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É —Å–º–µ–Ω—ã –æ–¥–µ–∂–¥—ã
     */
    _validateOutfitLogic(outfitChanges) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–º–µ–Ω–∞ –æ–¥–µ–∂–¥—ã –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –≤ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ª–æ–∫–∞—Ü–∏—è—Ö
        // –∏ —á—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–º–µ—Å—Ç–µ
        return true; // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
    }

    /**
     * –°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    _simulateWalkthrough(steps) {
        const gameState = {
            princess: {
                location: 'princess_chamber',
                outfit: 'princess_dress',
                completedQuests: [],
                dialogueProgress: {},
                items: []
            },
            helper: {
                location: 'princess_chamber',
                outfit: 'helper_dress',
                completedQuests: [],
                dialogueProgress: {},
                items: []
            }
        };

        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–≥—Ä—ã
        for (const step of steps) {
            this._applyStepToGameState(gameState, step);
        }

        return gameState;
    }

    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —à–∞–≥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –∏–≥—Ä—ã
     */
    _applyStepToGameState(gameState, step) {
        const character = gameState[step.character];
        
        switch (step.action.type) {
            case 'move':
                character.location = step.action.target;
                break;
            case 'outfit_swap':
                // –ú–µ–Ω—è–µ–º –Ω–∞—Ä—è–¥—ã
                const temp = gameState.princess.outfit;
                gameState.princess.outfit = gameState.helper.outfit;
                gameState.helper.outfit = temp;
                break;
            case 'quest':
                if (step.expectedResult.questProgression) {
                    for (const progression of step.expectedResult.questProgression) {
                        if (progression.newStatus === 'completed') {
                            character.completedQuests.push(progression.questId);
                        }
                    }
                }
                break;
            case 'dialogue':
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–∏–∞–ª–æ–≥–æ–≤
                if (step.expectedResult.dialogueUnlocks) {
                    if (!character.dialogueProgress[step.action.target]) {
                        character.dialogueProgress[step.action.target] = {};
                    }
                    for (const unlock of step.expectedResult.dialogueUnlocks) {
                        character.dialogueProgress[step.action.target][unlock] = true;
                    }
                }
                break;
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (step.expectedResult.gameStateChanges) {
            for (const change of step.expectedResult.gameStateChanges) {
                const targetCharacter = gameState[change.character];
                if (change.property === 'items' && Array.isArray(change.newValue)) {
                    targetCharacter.items.push(...change.newValue);
                }
            }
        }
    }

    /**
     * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∏–≥—Ä–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    _compareGameStates(simulated, expected) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ - –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        return true;
    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–æ–≤
     */
    _validateQuestCompletion(steps, expectedQuests) {
        const questSteps = steps.filter(step => 
            step.expectedResult.questProgression && 
            step.expectedResult.questProgression.some(q => q.newStatus === 'completed')
        );
        
        const completedQuests = [];
        for (const step of questSteps) {
            for (const progression of step.expectedResult.questProgression) {
                if (progression.newStatus === 'completed') {
                    completedQuests.push(progression.questId);
                }
            }
        }
        
        const missingQuests = expectedQuests.filter(q => !completedQuests.includes(q));
        const extraQuests = completedQuests.filter(q => !expectedQuests.includes(q));
        
        if (missingQuests.length > 0 || extraQuests.length > 0) {
            return {
                valid: false,
                error: `Quest completion mismatch. Missing: [${missingQuests.join(', ')}], Extra: [${extraQuests.join(', ')}]`
            };
        }
        
        return { valid: true };
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–∫—Ä—ã—Ç–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     */
    async validateContentCoverage() {
        console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–∫—Ä—ã—Ç–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...');
        
        try {
            const data = await this._loadData();
            const errors = [];
            
            // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–π
            const usedContent = {
                locations: new Set(),
                npcs: new Set(),
                scenes: new Set(),
                quests: new Set()
            };
            
            for (const walkthrough of data.walkthroughs) {
                for (const step of walkthrough.steps) {
                    if (step.action.type === 'move') {
                        usedContent.locations.add(step.action.target);
                    }
                    if (step.action.type === 'dialogue') {
                        usedContent.npcs.add(step.action.target);
                    }
                    if (step.action.type === 'scene_choice') {
                        usedContent.scenes.add(step.action.target);
                    }
                }
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –∫–≤–µ—Å—Ç–æ–≤—ã—Ö –ø—É—Ç–µ–π
            for (const questPath of Object.values(data.questCompletionPaths)) {
                usedContent.quests.add(questPath.questId);
                for (const step of questPath.steps) {
                    for (const action of step.requiredActions) {
                        if (action.type === 'move') {
                            usedContent.locations.add(action.target);
                        }
                        if (action.type === 'dialogue') {
                            usedContent.npcs.add(action.target);
                        }
                    }
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ
            const allLocations = Object.keys(this._gameData.locations);
            const allNPCs = Object.keys(this._gameData.npcs.npcs);
            const allScenes = Object.keys(this._gameData.stories);
            const allQuests = Object.keys(this._gameData.quests);
            
            const uncoveredLocations = allLocations.filter(loc => !usedContent.locations.has(loc));
            const uncoveredNPCs = allNPCs.filter(npc => !usedContent.npcs.has(npc));
            const uncoveredScenes = allScenes.filter(scene => !usedContent.scenes.has(scene));
            const uncoveredQuests = allQuests.filter(quest => !usedContent.quests.has(quest));
            
            if (uncoveredLocations.length > 0) {
                errors.push(`Uncovered locations: ${uncoveredLocations.join(', ')}`);
            }
            if (uncoveredNPCs.length > 0) {
                errors.push(`Uncovered NPCs: ${uncoveredNPCs.join(', ')}`);
            }
            if (uncoveredScenes.length > 0) {
                errors.push(`Uncovered scenes: ${uncoveredScenes.join(', ')}`);
            }
            if (uncoveredQuests.length > 0) {
                errors.push(`Uncovered quests: ${uncoveredQuests.join(', ')}`);
            }
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è
            const totalContent = allLocations.length + allNPCs.length + allScenes.length + allQuests.length;
            const coveredContent = usedContent.locations.size + usedContent.npcs.size + 
                                 usedContent.scenes.size + usedContent.quests.size;
            const coveragePercentage = Math.round((coveredContent / totalContent) * 100);
            
            return {
                valid: errors.length === 0,
                errors,
                dataType: 'content_coverage',
                coveragePercentage,
                details: {
                    locations: `${usedContent.locations.size}/${allLocations.length}`,
                    npcs: `${usedContent.npcs.size}/${allNPCs.length}`,
                    scenes: `${usedContent.scenes.size}/${allScenes.length}`,
                    quests: `${usedContent.quests.size}/${allQuests.length}`
                }
            };
        } catch (error) {
            return {
                valid: false,
                errors: [`Content coverage validation failed: ${error.message}`],
                dataType: 'content_coverage'
            };
        }
    }

    /**
     * –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
     */
    async validateAll() {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∏–≥—Ä—ã...');
        
        const results = [];
        
        try {
            results.push(await this.validateSchema());
            results.push(await this.validateGameReferences());
            results.push(await this.validateWalkthroughLogic());
            results.push(await this.validateContentCoverage());
            
            const overallValid = results.every(result => result.valid);
            const totalErrors = results.reduce((sum, result) => sum + result.errors.length, 0);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            const report = {
                timestamp: new Date().toISOString(),
                overallValid,
                totalErrors,
                results,
                summary: {
                    schema: results[0],
                    gameReferences: results[1], 
                    walkthroughLogic: results[2],
                    contentCoverage: results[3]
                }
            };
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            const reportPath = path.join(__dirname, '../walkthrough-validation-report.json');
            await fs.promises.writeFile(reportPath, JSON.stringify(report, null, 2));
            
            // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:');
            results.forEach(result => {
                const status = result.valid ? '‚úÖ' : '‚ùå';
                console.log(`${status} ${result.dataType}: ${result.errors.length} –æ—à–∏–±–æ–∫`);
                
                if (result.coveragePercentage !== undefined) {
                    console.log(`   üìà –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${result.coveragePercentage}%`);
                    console.log(`   üìç –î–µ—Ç–∞–ª–∏: –õ–æ–∫–∞—Ü–∏–∏ ${result.details.locations}, NPC ${result.details.npcs}, –°—Ü–µ–Ω—ã ${result.details.scenes}, –ö–≤–µ—Å—Ç—ã ${result.details.quests}`);
                }
                
                if (result.errors.length > 0) {
                    result.errors.forEach(error => {
                        console.log(`   - ${error}`);
                    });
                }
            });
            
            console.log(`\nüìã –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${reportPath}`);
            console.log(`üìà –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: ${overallValid ? '‚úÖ –ü–†–û–•–û–ñ–î–ï–ù–ò–ï –í–ê–õ–ò–î–ù–û' : '‚ùå –ù–ê–ô–î–ï–ù–´ –û–®–ò–ë–ö–ò'}`);
            console.log(`üìä –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: ${totalErrors}`);
            
            return report;
        } catch (error) {
            console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:', error);
            throw error;
        }
    }
}

// –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const validator = new WalkthroughValidator();
    
    validator.validateAll()
        .then(report => {
            console.log('‚ú® –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
            process.exit(report.overallValid ? 0 : 1);
        })
        .catch(error => {
            console.error('üí• –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å:', error);
            process.exit(1);
        });
}

module.exports = WalkthroughValidator;