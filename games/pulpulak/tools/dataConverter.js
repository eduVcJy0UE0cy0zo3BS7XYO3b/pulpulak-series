/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã –∏–∑ JS –º–æ–¥—É–ª–µ–π –≤ JSON —Ñ–∞–π–ª—ã
 */

const fs = require('fs');
const path = require('path');

// –ò–º–ø–æ—Ä—Ç –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const CoopStoryData = require('../data/coopStoryData');
const LocationData = require('../data/locationData');
const NPCData = require('../data/npcData');
const QuestData = require('../data/questData');

class DataConverter {
    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤ JSON
     */
    static async convertStoryData() {
        console.log('üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π...');
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ü–µ–Ω—ã
            const sceneIds = CoopStoryData.getAllScenes();
            const scenes = {};
            
            sceneIds.forEach(sceneId => {
                const scene = CoopStoryData.getScene(sceneId);
                if (scene) {
                    scenes[sceneId] = scene;
                }
            });
            
            const outputPath = path.join(__dirname, '../data-json/storyData.json');
            await fs.promises.mkdir(path.dirname(outputPath), { recursive: true });
            await fs.promises.writeFile(outputPath, JSON.stringify(scenes, null, 2));
            
            console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤:', outputPath);
            return scenes;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–π:', error);
            throw error;
        }
    }
    
    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ª–æ–∫–∞—Ü–∏–∏ –≤ JSON
     */
    static async convertLocationData() {
        console.log('üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π...');
        
        try {
            const locationIds = LocationData.getAllLocations();
            const locations = {};
            
            locationIds.forEach(locationId => {
                const location = LocationData.getLocation(locationId);
                if (location) {
                    locations[locationId] = location;
                }
            });
            
            const outputPath = path.join(__dirname, '../data-json/locationData.json');
            await fs.promises.mkdir(path.dirname(outputPath), { recursive: true });
            await fs.promises.writeFile(outputPath, JSON.stringify(locations, null, 2));
            
            console.log('‚úÖ –õ–æ–∫–∞—Ü–∏–∏ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤:', outputPath);
            return locations;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ª–æ–∫–∞—Ü–∏–π:', error);
            throw error;
        }
    }
    
    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç NPC –¥–∞–Ω–Ω—ã–µ –≤ JSON
     */
    static async convertNPCData() {
        console.log('üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö NPC...');
        
        try {
            // –î–ª—è NPC –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–æ–¥—É–ª—è
            const NPCModule = require('../data/npcData');
            const npcDataPath = path.join(__dirname, '../data/npcData.js');
            const npcContent = await fs.promises.readFile(npcDataPath, 'utf8');
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º NPCs –æ–±—ä–µ–∫—Ç –∏–∑ –∫–æ–¥–∞ (–ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–±)
            const npcsMatch = npcContent.match(/const NPCs = ({[\s\S]*?});/);
            const baseLocationsMatch = npcContent.match(/const BaseNPCLocations = ({[\s\S]*?});/);
            const movementRulesMatch = npcContent.match(/const NPCMovementRules = ({[\s\S]*?});/);
            
            if (!npcsMatch || !baseLocationsMatch || !movementRulesMatch) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ NPC –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞');
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º eval –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
            const NPCs = eval(`(${npcsMatch[1]})`);
            const BaseNPCLocations = eval(`(${baseLocationsMatch[1]})`);
            const NPCMovementRules = eval(`(${movementRulesMatch[1]})`);
            
            const npcData = {
                npcs: NPCs,
                baseNPCLocations: BaseNPCLocations,
                npcMovementRules: NPCMovementRules
            };
            
            const outputPath = path.join(__dirname, '../data-json/npcData.json');
            await fs.promises.mkdir(path.dirname(outputPath), { recursive: true });
            await fs.promises.writeFile(outputPath, JSON.stringify(npcData, null, 2));
            
            console.log('‚úÖ NPC –¥–∞–Ω–Ω—ã–µ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤:', outputPath);
            return npcData;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ NPC:', error);
            throw error;
        }
    }
    
    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∫–≤–µ—Å—Ç—ã –≤ JSON
     */
    static async convertQuestData() {
        console.log('üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤...');
        
        try {
            const allQuests = QuestData.getAllQuests();
            
            const outputPath = path.join(__dirname, '../data-json/questData.json');
            await fs.promises.mkdir(path.dirname(outputPath), { recursive: true });
            await fs.promises.writeFile(outputPath, JSON.stringify(allQuests, null, 2));
            
            console.log('‚úÖ –ö–≤–µ—Å—Ç—ã —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤:', outputPath);
            return allQuests;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–æ–≤:', error);
            throw error;
        }
    }
    
    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
     */
    static async convertAllData() {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...');
        
        const results = {};
        
        try {
            results.stories = await this.convertStoryData();
            results.locations = await this.convertLocationData();
            results.npcs = await this.convertNPCData();
            results.quests = await this.convertQuestData();
            
            console.log('üéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!');
            return results;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—â–µ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', error);
            throw error;
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
     */
    static async generateConversionReport() {
        console.log('üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏...');
        
        try {
            const results = await this.convertAllData();
            
            const report = {
                timestamp: new Date().toISOString(),
                conversionSummary: {
                    stories: Object.keys(results.stories || {}).length,
                    locations: Object.keys(results.locations || {}).length,
                    npcs: Object.keys(results.npcs?.npcs || {}).length,
                    quests: Object.keys(results.quests || {}).length
                },
                files: [
                    '../data-json/storyData.json',
                    '../data-json/locationData.json', 
                    '../data-json/npcData.json',
                    '../data-json/questData.json'
                ],
                schemas: [
                    '../schemas/story.schema.json',
                    '../schemas/location.schema.json',
                    '../schemas/npc.schema.json',
                    '../schemas/quest.schema.json'
                ]
            };
            
            const reportPath = path.join(__dirname, '../conversion-report.json');
            await fs.promises.writeFile(reportPath, JSON.stringify(report, null, 2));
            
            console.log('üìã –û—Ç—á–µ—Ç –æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤:', reportPath);
            console.log('üìà –°–≤–æ–¥–∫–∞:');
            console.log(`   - –ò—Å—Ç–æ—Ä–∏–π: ${report.conversionSummary.stories}`);
            console.log(`   - –õ–æ–∫–∞—Ü–∏–π: ${report.conversionSummary.locations}`);
            console.log(`   - NPC: ${report.conversionSummary.npcs}`);
            console.log(`   - –ö–≤–µ—Å—Ç–æ–≤: ${report.conversionSummary.quests}`);
            
            return report;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:', error);
            throw error;
        }
    }
}

// –ó–∞–ø—É—Å–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    DataConverter.generateConversionReport()
        .then(() => {
            console.log('‚ú® –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
            process.exit(0);
        })
        .catch(error => {
            console.error('üí• –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å:', error);
            process.exit(1);
        });
}

module.exports = DataConverter;