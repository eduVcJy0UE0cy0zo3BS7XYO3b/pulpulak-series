const GameConfigInterface = require('../../engine/interfaces/GameConfig');

// Import game data from local data folder
// const StoryData = require('./data/storyData');
// const LocationData = require('./data/locationData');
// const NPCData = require('./data/npcData');

/**
 * Template configuration for a new game
 * Copy this file and modify for your game
 */
class TemplateGameConfig extends GameConfigInterface {
    constructor() {
        super();
        
        // Basic game info
        this.gameId = 'template_game';
        this.gameName = 'Template Game';
        this.gameVersion = '1.0.0';
        this.maxPlayers = 2;
        
        // Characters - define who can play
        this.characters = {
            player1: {
                name: '–ò–≥—Ä–æ–∫ 1',
                description: '–ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫'
            },
            player2: {
                name: '–ò–≥—Ä–æ–∫ 2', 
                description: '–í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫'
            }
        };
        
        // Outfits system (optional)
        this.outfits = {
            default: {
                name: '–û–±—ã—á–Ω–∞—è –æ–¥–µ–∂–¥–∞',
                type: 'default',
                description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞—Ä—è–¥'
            }
        };
        
        // Story scenes
        this.scenes = this.loadScenes();
        this.startingScene = 'intro';
        
        // World data
        this.locations = this.loadLocations();
        this.npcs = this.loadNPCs();
        this.quests = this.loadQuests();
        
        // Game features - enable/disable as needed
        this.features = {
            outfitSwapping: false,      // –°–∏—Å—Ç–µ–º–∞ —Å–º–µ–Ω—ã –æ–¥–µ–∂–¥—ã
            turnBasedDialogue: true,    // –ü–æ—à–∞–≥–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏
            questSystem: false,         // –°–∏—Å—Ç–µ–º–∞ –∫–≤–µ—Å—Ç–æ–≤
            locationSystem: true,       // –°–∏—Å—Ç–µ–º–∞ –ª–æ–∫–∞—Ü–∏–π
            npcInteractions: false,     // –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å NPC
            freeMovement: true          // –°–≤–æ–±–æ–¥–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
        };
        
        // Initial state
        this.initialState = {
            startingLocation: 'main_room',
            startingOutfits: {
                player1: 'default',
                player2: 'default'
            },
            startingItems: {
                player1: [],
                player2: []
            },
            globalMemory: {}
        };
    }

    loadScenes() {
        // Define your story scenes here
        // Or import from ./data/storyData.js
        return {
            "intro": {
                title: "–í–≤–µ–¥–µ–Ω–∏–µ",
                text: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∏–≥—Ä—É!
                
                üéÆ <strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> –≠—Ç–æ —à–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã.
                
                <div style="background: rgba(0,255,0,0.1); padding: 10px; border-radius: 5px; margin: 10px 0;">
                üí° <strong>–°–æ–≤–µ—Ç:</strong> –ò–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Å—Ü–µ–Ω—ã!
                </div>`,
                
                choices: {
                    player1: [{
                        id: "start_game",
                        text: "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É",
                        description: "–ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ",
                        resultText: "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!",
                        nextScene: "main_game"
                    }],
                    player2: [{
                        id: "start_game",
                        text: "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", 
                        description: "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—é",
                        resultText: "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!",
                        nextScene: "main_game"
                    }]
                }
            },
            
            "main_game": {
                title: "–û—Å–Ω–æ–≤–Ω–∞—è –∏–≥—Ä–∞",
                text: `–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ. –ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?`,
                
                choices: {
                    player1: [{
                        id: "explore",
                        text: "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å",
                        description: "–û—Å–º–æ—Ç—Ä–µ—Ç—å –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏",
                        resultText: "–í—ã –∏—Å—Å–ª–µ–¥—É–µ—Ç–µ –∫–æ–º–Ω–∞—Ç—É"
                    }],
                    player2: [{
                        id: "wait",
                        text: "–ü–æ–¥–æ–∂–¥–∞—Ç—å",
                        description: "–î–æ–∂–¥–∞—Ç—å—Å—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
                        resultText: "–í—ã –∂–¥–µ—Ç–µ"
                    }]
                }
            }
        };
    }

    loadLocations() {
        // Define your game world here
        // Or import from ./data/locationData.js
        return {
            main_room: {
                name: '–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞',
                description: '–ü—Ä–æ—Å—Ç–æ—Ä–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤—ã—Ö–æ–¥–∞–º–∏.',
                connections: ['north_room', 'south_room'],
                canChangeOutfit: true,
                icon: 'üè†',
                npcs: []
            },
            
            north_room: {
                name: '–°–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞',
                description: '–¢–∏—Ö–∞—è –∫–æ–º–Ω–∞—Ç–∞ –Ω–∞ —Å–µ–≤–µ—Ä–µ.',
                connections: ['main_room'],
                canChangeOutfit: false,
                icon: '‚¨ÜÔ∏è',
                npcs: []
            },
            
            south_room: {
                name: '–Æ–∂–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞',
                description: '–ü—Ä–æ—Å—Ç–æ—Ä–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ –Ω–∞ —é–≥–µ.',
                connections: ['main_room'],
                canChangeOutfit: false,
                icon: '‚¨áÔ∏è',
                npcs: []
            }
        };
    }

    loadNPCs() {
        // Define your NPCs here
        // Or import from ./data/npcData.js
        return {
            // Example NPC (commented out)
            /*
            'example_npc': {
                id: 'example_npc',
                name: '–ü—Ä–∏–º–µ—Ä NPC',
                description: '–ü—Ä–∏–º–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞',
                likesNoble: true,
                dialogue: {
                    default: {
                        initial: {
                            greeting: '–ü—Ä–∏–≤–µ—Ç!',
                            choices: [{
                                id: 'greet',
                                text: '–ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è',
                                response: '–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç!'
                            }]
                        }
                    }
                }
            }
            */
        };
    }

    loadQuests() {
        // Define your quests here
        // Or import from ./data/questData.js
        return {
            // Example quest (commented out)
            /*
            'example_quest': {
                id: 'example_quest',
                character: 'player1',
                title: '–ü—Ä–∏–º–µ—Ä –∫–≤–µ—Å—Ç–∞',
                description: '–û–ø–∏—Å–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞',
                steps: [{
                    id: 'step1',
                    description: '–°–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ',
                    completed: false
                }],
                rewards: ['example_item']
            }
            */
        };
    }

    // Override if you need custom NPC location logic
    getNPCsForLocation(locationId, gameState = null, character = null) {
        const location = this.getLocation(locationId);
        if (!location) return [];
        
        // Simple implementation - just return NPCs assigned to location
        return location.npcs.map(id => this.getNPC(id)).filter(npc => npc);
    }
}

module.exports = TemplateGameConfig;