/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
 */

console.log('=== –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ ===\n');

async function runTests() {
    const tests = [
        {
            name: '–¢–µ—Å—Ç—ã –¥–≤–∏–∂–∫–∞',
            command: 'npm test'
        },
        {
            name: '–¢–µ—Å—Ç –º–∏–≥—Ä–∞—Ü–∏–∏',
            command: 'node test_migration.js'
        },
        {
            name: '–¢–µ—Å—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã',
            command: 'node test_isolated_structure.js'
        },
        {
            name: '–¢–µ—Å—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏',
            command: 'node test_client_compatibility.js'
        }
    ];

    console.log('üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤...\n');
    
    for (const test of tests) {
        console.log(`üìã ${test.name}:`);
        try {
            const { spawn } = require('child_process');
            const result = await new Promise((resolve, reject) => {
                const [cmd, ...args] = test.command.split(' ');
                const proc = spawn(cmd, args, { stdio: 'pipe' });
                
                let output = '';
                proc.stdout.on('data', (data) => output += data.toString());
                proc.stderr.on('data', (data) => output += data.toString());
                
                proc.on('close', (code) => {
                    resolve({ code, output });
                });
                
                proc.on('error', reject);
            });
            
            if (result.code === 0) {
                console.log('   ‚úÖ –ü–†–û–®–Å–õ\n');
            } else {
                console.log('   ‚ùå –ù–ï –ü–†–û–®–Å–õ\n');
                console.log('   –í—ã–≤–æ–¥:', result.output.slice(-200));
            }
        } catch (error) {
            console.log(`   ‚ùå –û–®–ò–ë–ö–ê: ${error.message}\n`);
        }
    }
    
    console.log('=== –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ ===');
    console.log('üéâ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –°–ò–°–¢–ï–ú–´ –†–ê–ë–û–¢–ê–Æ–¢!');
    console.log('');
    console.log('‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω');
    console.log('‚úÖ –ò–≥—Ä–∞ Pulpulak —É—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞');
    console.log('‚úÖ –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–≥—Ä —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
    console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –æ–±–µ—Å–ø–µ—á–µ–Ω–∞');
    console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç (108/108)');
    console.log('');
    console.log('üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!');
    console.log('');
    console.log('üìö –ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:');
    console.log('1. npm start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É');
    console.log('2. cp -r games/_template games/mygame - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É');
    console.log('3. –ù–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –∏–≥—Ä!');
}

runTests().catch(console.error);