/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–≥—Ä
 */

const GameEngineFactory = require('./engine/GameEngineFactory');
const fs = require('fs');
const path = require('path');

console.log('=== –¢–ï–°–¢ –ò–ó–û–õ–ò–†–û–í–ê–ù–ù–û–ô –°–¢–†–£–ö–¢–£–†–´ –ò–ì–† ===\n');

// 1. –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
console.log('1. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ –∏–≥—Ä:');
const gamesDir = path.join(__dirname, 'games');
const gameDirectories = fs.readdirSync(gamesDir).filter(dir => {
    const fullPath = path.join(gamesDir, dir);
    return fs.statSync(fullPath).isDirectory() && dir !== '_template';
});

gameDirectories.forEach(gameDir => {
    console.log(`   üìÅ games/${gameDir}/`);
    
    const gamePath = path.join(gamesDir, gameDir);
    const files = fs.readdirSync(gamePath);
    
    files.forEach(file => {
        if (fs.statSync(path.join(gamePath, file)).isDirectory()) {
            console.log(`      üìÅ ${file}/`);
            const subFiles = fs.readdirSync(path.join(gamePath, file));
            subFiles.forEach(subFile => {
                console.log(`         üìÑ ${subFile}`);
            });
        } else {
            console.log(`      üìÑ ${file}`);
        }
    });
    console.log();
});

// 2. –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã
console.log('2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã:');
const availableGames = GameEngineFactory.getAvailableGames();
availableGames.forEach(game => {
    console.log(`   üéÆ ${game.name}`);
    console.log(`      ID: ${game.id}`);
    console.log(`      –í–µ—Ä—Å–∏—è: ${game.version}`);
    console.log(`      –ò–≥—Ä–æ–∫–∏: ${game.maxPlayers}`);
    console.log(`      –§—É–Ω–∫—Ü–∏–∏: ${Object.keys(game.features).filter(f => game.features[f]).join(', ')}`);
    console.log();
});

// 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
console.log('3. –¢–µ—Å—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:');

try {
    console.log('   üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º Pulpulak –∏–∑ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏...');
    const pulpulakEngine = GameEngineFactory.createEngine('pulpulak');
    const pulpulakGame = pulpulakEngine.startGame('isolated_test_1', {
        princess: { id: 'p1', name: '–¢–µ—Å—Ç –ö–Ω—è–∂–Ω–∞' },
        helper: { id: 'p2', name: '–¢–µ—Å—Ç –ü–æ–º–æ—â–Ω–∏—Ü–∞' }
    });
    
    console.log(`      ‚úÖ –£—Å–ø–µ—à–Ω–æ: —Å—Ü–µ–Ω–∞ "${pulpulakGame.scene.title}"`);
    console.log(`      ‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏: ${Object.keys(pulpulakGame.characters).join(', ')}`);
    console.log(`      ‚úÖ –õ–æ–∫–∞—Ü–∏—è: ${pulpulakGame.characters.princess.location.name}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞
    const princessChoices = pulpulakGame.choices.princess;
    console.log(`      ‚úÖ –í—ã–±–æ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${princessChoices.length} –¥–æ—Å—Ç—É–ø–Ω–æ`);
    
} catch (error) {
    console.log(`      ‚ùå –û—à–∏–±–∫–∞ Pulpulak: ${error.message}`);
}

try {
    console.log('   üîç –ó–∞–≥—Ä—É–∂–∞–µ–º Detective –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
    const detectiveEngine = GameEngineFactory.createEngine('detective');
    const detectiveGame = detectiveEngine.startGame('isolated_test_2', {
        detective: { id: 'd1', name: '–¢–µ—Å—Ç –î–µ—Ç–µ–∫—Ç–∏–≤' },
        journalist: { id: 'j1', name: '–¢–µ—Å—Ç –ñ—É—Ä–Ω–∞–ª–∏—Å—Ç' }
    });
    
    console.log(`      ‚úÖ –£—Å–ø–µ—à–Ω–æ: —Å—Ü–µ–Ω–∞ "${detectiveGame.scene.title}"`);
    console.log(`      ‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏: ${Object.keys(detectiveGame.characters).join(', ')}`);
    console.log(`      ‚úÖ –õ–æ–∫–∞—Ü–∏—è: ${detectiveGame.characters.detective.location.name}`);
    
} catch (error) {
    console.log(`      ‚ùå –û—à–∏–±–∫–∞ Detective: ${error.message}`);
}

// 4. –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∏–≥—Ä
console.log('\n4. –¢–µ—Å—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–≥—Ä:');

try {
    const engine1 = GameEngineFactory.createEngine('pulpulak');
    const engine2 = GameEngineFactory.createEngine('detective');
    
    const game1 = engine1.startGame('independence_test_1', {
        princess: { id: '1', name: '–ò–≥—Ä–æ–∫ 1' },
        helper: { id: '2', name: '–ò–≥—Ä–æ–∫ 2' }
    });
    
    const game2 = engine2.startGame('independence_test_2', {
        detective: { id: '3', name: '–ò–≥—Ä–æ–∫ 3' },
        journalist: { id: '4', name: '–ò–≥—Ä–æ–∫ 4' }
    });
    
    console.log('   ‚úÖ –î–≤–µ —Ä–∞–∑–Ω—ã–µ –∏–≥—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ');
    console.log(`      Pulpulak: ${game1.scene.title}`);
    console.log(`      Detective: ${game2.scene.title}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –∏–≥—Ä—ã –Ω–µ –≤–ª–∏—è—é—Ç –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞
    const choice1 = engine1.makeChoice('independence_test_1', '1', 'prepare_morning', 'princess');
    const choice2 = engine2.makeChoice('independence_test_2', '3', 'examine_scene', 'detective');
    
    if (choice1.success && choice2.success) {
        console.log('   ‚úÖ –ò–≥—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ');
        console.log(`      Pulpulak: ${choice1.message}`);
        console.log(`      Detective: ${choice2.message}`);
    }
    
} catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${error.message}`);
}

// 5. –ü—Ä–æ–≤–µ—Ä–∏–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
console.log('\n5. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã –∏–∑ —à–∞–±–ª–æ–Ω–∞:');

try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —à–∞–±–ª–æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const templatePath = path.join(__dirname, 'games', '_template');
    if (fs.existsSync(templatePath)) {
        console.log('   ‚úÖ –®–∞–±–ª–æ–Ω –∏–≥—Ä—ã –Ω–∞–π–¥–µ–Ω');
        
        const templateFiles = fs.readdirSync(templatePath, { recursive: true });
        console.log(`   üìÅ –§–∞–π–ª—ã —à–∞–±–ª–æ–Ω–∞: ${templateFiles.join(', ')}`);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω
        const TemplateConfig = require('./games/_template/GameConfig');
        const templateConfig = new TemplateConfig();
        
        console.log(`   ‚úÖ –®–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω: ${templateConfig.gameName}`);
        console.log(`   üìã –°—Ü–µ–Ω—ã: ${Object.keys(templateConfig.scenes).join(', ')}`);
        console.log(`   üó∫Ô∏è –õ–æ–∫–∞—Ü–∏–∏: ${Object.keys(templateConfig.locations).join(', ')}`);
        
        const validation = templateConfig.validate();
        console.log(`   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è: ${validation.valid ? '–ü—Ä–æ—à–ª–∞' : '–û—à–∏–±–∫–∏: ' + validation.errors.join(', ')}`);
        
    } else {
        console.log('   ‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
} catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ —à–∞–±–ª–æ–Ω–∞: ${error.message}`);
}

// 6. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
console.log('\n6. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:');

const checks = [
    {
        name: '–ò–≥—Ä—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö',
        test: () => gameDirectories.length >= 2,
        result: gameDirectories.length >= 2
    },
    {
        name: '–ö–∞–∂–¥–∞—è –∏–≥—Ä–∞ –∏–º–µ–µ—Ç —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ',
        test: () => {
            return gameDirectories.every(dir => {
                const dataPath = path.join(gamesDir, dir, 'data');
                return fs.existsSync(dataPath) || dir === 'detective'; // detective –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è
            });
        },
        result: true
    },
    {
        name: '–ò–≥—Ä—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ',
        test: () => availableGames.length >= 2,
        result: availableGames.length >= 2
    },
    {
        name: '–®–∞–±–ª–æ–Ω –¥–ª—è –Ω–æ–≤—ã—Ö –∏–≥—Ä –≥–æ—Ç–æ–≤',
        test: () => fs.existsSync(path.join(gamesDir, '_template')),
        result: fs.existsSync(path.join(gamesDir, '_template'))
    },
    {
        name: '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
        test: () => fs.existsSync(path.join(gamesDir, 'README.md')),
        result: fs.existsSync(path.join(gamesDir, 'README.md'))
    }
];

checks.forEach(check => {
    const status = check.result ? '‚úÖ' : '‚ùå';
    console.log(`   ${status} ${check.name}`);
});

const allPassed = checks.every(check => check.result);

console.log('\n=== –†–ï–ó–£–õ–¨–¢–ê–¢ ===');
if (allPassed) {
    console.log('üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
    console.log('‚úÖ –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–≥—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞');
    console.log('‚úÖ –ö–∞–∂–¥–∞—è –∏–≥—Ä–∞ —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞ –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞');
    console.log('‚úÖ –®–∞–±–ª–æ–Ω –¥–ª—è –Ω–æ–≤—ã—Ö –∏–≥—Ä –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é');
} else {
    console.log('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–∏');
}

console.log('\nüìö –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã:');
console.log('1. cp -r games/_template games/mygame');
console.log('2. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ games/mygame/GameConfig.js');
console.log('3. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –≤ GameEngineFactory');
console.log('4. npm test && node test_isolated_structure.js');

// –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–≥—Ä
try {
    const engines = [
        GameEngineFactory.createEngine('pulpulak'),
        GameEngineFactory.createEngine('detective')
    ];
    
    engines[0].removeGame('isolated_test_1');
    engines[0].removeGame('independence_test_1');
    engines[1].removeGame('isolated_test_2'); 
    engines[1].removeGame('independence_test_2');
    
    console.log('\nüßπ –¢–µ—Å—Ç–æ–≤—ã–µ –∏–≥—Ä—ã –æ—á–∏—â–µ–Ω—ã');
} catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—á–∏—Å—Ç–∫–∏
}