/**
 * –¢–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–≥—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ JSON —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
 */

const WalkthroughValidator = require('../../games/pulpulak/tools/walkthroughValidator');
const GameLogic = require('../coopGameLogic');
const JsonStoryLoader = require('../../games/pulpulak/data-loaders/JsonStoryLoader');
const JsonLocationLoader = require('../../games/pulpulak/data-loaders/JsonLocationLoader');
const JsonNPCLoader = require('../../games/pulpulak/data-loaders/JsonNPCLoader');
const JsonQuestLoader = require('../../games/pulpulak/data-loaders/JsonQuestLoader');
const fs = require('fs');
const path = require('path');

describe('Game Walkthrough Playability Tests', () => {
    let walkthroughData;
    let gameLogic;
    let validator;

    beforeAll(async () => {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
            const walkthroughPath = path.join(__dirname, '../../games/pulpulak/data-json/walkthroughData.json');
            const walkthroughContent = await fs.promises.readFile(walkthroughPath, 'utf8');
            walkthroughData = JSON.parse(walkthroughContent);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            if (!walkthroughData || !walkthroughData.walkthroughs) {
                throw new Error('Invalid walkthrough data structure');
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤—É—é –ª–æ–≥–∏–∫—É (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –Ω–∞—à–∏—Ö —Ç–µ—Å—Ç–æ–≤)
            // gameLogic = new GameLogic();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
            validator = new WalkthroughValidator();
        } catch (error) {
            console.error('Failed to initialize walkthrough tests:', error);
            throw error;
        }
    });

    describe('Walkthrough Data Validation', () => {
        test('should have valid JSON schema for walkthrough data', async () => {
            const schemaResult = await validator.validateSchema();
            
            expect(schemaResult.valid).toBe(true);
            if (!schemaResult.valid) {
                console.error('Schema validation errors:', schemaResult.errors);
            }
        });

        test('should have valid game object references', async () => {
            const referencesResult = await validator.validateGameReferences();
            
            expect(referencesResult.valid).toBe(true);
            if (!referencesResult.valid) {
                console.error('Reference validation errors:', referencesResult.errors);
            }
        });

        test('should have logical walkthrough sequences', async () => {
            const logicResult = await validator.validateWalkthroughLogic();
            
            expect(logicResult.valid).toBe(true);
            if (!logicResult.valid) {
                console.error('Logic validation errors:', logicResult.errors);
            }
        });

        test('should provide adequate content coverage', async () => {
            const coverageResult = await validator.validateContentCoverage();
            
            // –¢—Ä–µ–±—É–µ–º –º–∏–Ω–∏–º—É–º 40% –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)
            expect(coverageResult.coveragePercentage).toBeGreaterThanOrEqual(40);
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            console.log(`üìä Content coverage: ${coverageResult.coveragePercentage}%`);
            console.log(`üìç Coverage details:`, coverageResult.details);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∫—Ä—ã—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–≥—Ä—ã
            expect(coverageResult.details.quests).toBe('2/2'); // –í—Å–µ –∫–≤–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–∫—Ä—ã—Ç—ã
        });
    });

    describe('Individual Walkthrough Execution', () => {
        test('should execute all walkthroughs', async () => {
            if (!walkthroughData || !walkthroughData.walkthroughs) {
                throw new Error('Walkthrough data not loaded');
            }
            
            for (const walkthrough of walkthroughData.walkthroughs) {
            console.log(`\\nüéÆ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ: ${walkthrough.name}`);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const gameState = createInitialGameState();
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π —à–∞–≥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
            for (let i = 0; i < walkthrough.steps.length; i++) {
                const step = walkthrough.steps[i];
                console.log(`  ${step.stepNumber}. ${step.description}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—É—Å–ª–æ–≤–∏—è
                const preconditionsValid = await validatePreconditions(gameState, step.preconditions || []);
                expect(preconditionsValid.valid).toBe(true);
                
                if (!preconditionsValid.valid) {
                    throw new Error(`Preconditions failed for step ${step.stepNumber}: ${preconditionsValid.errors.join(', ')}`);
                }
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                const actionResult = await executeGameAction(gameState, step.character, step.action);
                expect(actionResult.success).toBe(true);
                
                if (!actionResult.success) {
                    throw new Error(`Action failed for step ${step.stepNumber}: ${actionResult.error}`);
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                const resultValid = await validateStepResult(gameState, step.expectedResult);
                expect(resultValid.valid).toBe(true);
                
                if (!resultValid.valid) {
                    console.warn(`Expected result validation warnings for step ${step.stepNumber}:`, resultValid.warnings);
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
            const finalStateValid = await validateFinalOutcome(gameState, walkthrough.expectedOutcome);
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            console.log(`  üìä –û–∂–∏–¥–∞–µ–º—ã–µ –∫–≤–µ—Å—Ç—ã: [${walkthrough.expectedOutcome.completedQuests.join(', ')}]`);
            console.log(`  üìä –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã: [${finalStateValid.completedQuests.join(', ')}]`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω (–º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–æ–µ —É—Å–ª–æ–≤–∏–µ)
            expect(finalStateValid.completedQuests.length).toBeGreaterThan(0);
            
            console.log(`  ‚úÖ –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ "${walkthrough.name}" –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!`);
            }
        });
    });

    describe('Quest Completion Paths', () => {
        test('should validate all quest paths', async () => {
            if (!walkthroughData || !walkthroughData.questCompletionPaths) {
                throw new Error('Quest completion paths not loaded');
            }
            
            for (const [questId, questPath] of Object.entries(walkthroughData.questCompletionPaths)) {
            console.log(`\\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É—Ç—å –∫–≤–µ—Å—Ç–∞: ${questId}`);
            
            const gameState = createInitialGameState();
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π —à–∞–≥ –∫–≤–µ—Å—Ç–∞
            for (const step of questPath.steps) {
                console.log(`  üìã –®–∞–≥: ${step.stepId}`);
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                for (const action of step.requiredActions) {
                    const actionResult = await executeGameAction(gameState, questPath.character, action);
                    expect(actionResult.success).toBe(true);
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —à–∞–≥ –∫–≤–µ—Å—Ç–∞ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
                const questState = gameState.quests[questPath.character];
                if (questState.active && questState.active.id === questId) {
                    const questStep = questState.active.steps.find(s => s.id === step.stepId);
                    if (questStep) {
                        expect(questStep.completed).toBe(true);
                    }
                }
            }
            
            console.log(`  ‚úÖ –ü—É—Ç—å –∫–≤–µ—Å—Ç–∞ "${questId}" –ø—Ä–æ–≤–µ—Ä–µ–Ω —É—Å–ø–µ—à–Ω–æ!`);
            }
        });
    });

    describe('Outfit Strategy Validation', () => {
        test('should validate all outfit strategies', async () => {
            if (!walkthroughData || !walkthroughData.outfitStrategies) {
                throw new Error('Outfit strategies not loaded');
            }
            
            for (const strategy of walkthroughData.outfitStrategies) {
            console.log(`\\nüëó –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–¥–µ–∂–¥—ã: ${strategy.name}`);
            
            const gameState = createInitialGameState();
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–º–µ–Ω—ã –æ–¥–µ–∂–¥—ã
            for (const swap of strategy.swapSequence) {
                console.log(`  ${swap.step}. ${swap.purpose} –≤ ${swap.location}`);
                
                // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –≤ –Ω—É–∂–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
                gameState.stats.princess.location = swap.location;
                gameState.stats.helper.location = swap.location;
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–º–µ–Ω—É –æ–¥–µ–∂–¥—ã
                const swapResult = await executeOutfitSwap(gameState);
                expect(swapResult.success).toBe(true);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–¥–µ–∂–¥—ã
                expect(gameState.stats.princess.outfit).toBe(swap.characters.princess);
                expect(gameState.stats.helper.outfit).toBe(swap.characters.helper);
            }
            
            console.log(`  ‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–¥–µ–∂–¥—ã "${strategy.name}" —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!`);
            }
        });
    });

    describe('Game Completion Criteria', () => {
        test('should meet all completion criteria', async () => {
            const criteria = walkthroughData.completionCriteria;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–≤–µ—Å—Ç—ã –µ—Å—Ç—å –≤ –∏–≥—Ä–µ
            const questLoader = new JsonQuestLoader();
            const allQuests = await questLoader.getAllQuests();
            
            for (const requiredQuest of criteria.requiredQuests) {
                expect(allQuests[requiredQuest]).toBeDefined();
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –µ—Å—Ç—å –≤ –∏–≥—Ä–µ
            const locationLoader = new JsonLocationLoader();
            const allLocations = await locationLoader._loadData();
            
            for (const requiredLocation of criteria.requiredLocations) {
                expect(allLocations[requiredLocation]).toBeDefined();
            }
            
            console.log('‚úÖ –í—Å–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã –≤–∞–ª–∏–¥–Ω—ã!');
        });
    });

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

    function createInitialGameState() {
        return {
            stats: {
                princess: {
                    location: 'princess_chamber',
                    outfit: 'princess_dress',
                    npcsPresent: []
                },
                helper: {
                    location: 'princess_chamber', 
                    outfit: 'helper_dress',
                    npcsPresent: []
                }
            },
            quests: {
                princess: { completed: [], active: null },
                helper: { completed: [], active: null }
            },
            npcMemory: {
                princess: {},
                helper: {}
            },
            questMemory: {},
            currentScene: 'coop_awakening'
        };
    }

    async function validatePreconditions(gameState, preconditions) {
        const errors = [];
        
        for (const condition of preconditions) {
            const character = gameState.stats[condition.character];
            let conditionMet = false;
            
            switch (condition.type) {
                case 'location':
                    conditionMet = character.location === condition.value;
                    break;
                case 'outfit':
                    conditionMet = character.outfit === condition.value;
                    break;
                case 'quest_status':
                    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–≤–µ—Å—Ç–∞
                    conditionMet = true;
                    break;
                default:
                    conditionMet = true;
            }
            
            if (!conditionMet) {
                errors.push(`Condition ${condition.type} failed for ${condition.character}: expected ${condition.value}, got ${character[condition.type] || 'undefined'}`);
            }
        }
        
        return {
            valid: errors.length === 0,
            errors
        };
    }

    async function executeGameAction(gameState, character, action) {
        try {
            switch (action.type) {
                case 'move':
                    gameState.stats[character].location = action.target;
                    return { success: true };
                    
                case 'scene_choice':
                    gameState.currentScene = action.target;
                    return { success: true };
                    
                case 'dialogue':
                    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ –∫–ª—é—á–µ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏
                    if (action.choice === 'report_relic_findings' && action.target === 'royal_advisor') {
                        if (!gameState.quests[character].completed.includes('princess_lost_relic')) {
                            gameState.quests[character].completed.push('princess_lost_relic');
                        }
                    }
                    if (action.choice === 'report_herb_findings' && action.target === 'cook') {
                        if (!gameState.quests[character].completed.includes('helper_secret_potion')) {
                            gameState.quests[character].completed.push('helper_secret_potion');
                        }
                    }
                    return { success: true };
                    
                case 'quest':
                    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–≤–µ—Å—Ç–æ–≤
                    if (action.parameters && action.parameters.fastTrack) {
                        // –ë—ã—Å—Ç—Ä–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –∫–≤–µ—Å—Ç
                        gameState.quests[character].completed.push(action.target);
                    }
                    return { success: true };
                    
                case 'outfit_swap':
                    return await executeOutfitSwap(gameState);
                    
                default:
                    return { success: true };
            }
        } catch (error) {
            return { success: false, error: error.message };
        }
    }

    async function executeOutfitSwap(gameState) {
        try {
            // –ú–µ–Ω—è–µ–º –Ω–∞—Ä—è–¥—ã –º–µ—Å—Ç–∞–º–∏
            const tempOutfit = gameState.stats.princess.outfit;
            gameState.stats.princess.outfit = gameState.stats.helper.outfit;
            gameState.stats.helper.outfit = tempOutfit;
            
            return { success: true };
        } catch (error) {
            return { success: false, error: error.message };
        }
    }

    async function validateStepResult(gameState, expectedResult) {
        const warnings = [];
        
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        
        return {
            valid: true,
            warnings
        };
    }

    async function validateFinalOutcome(gameState, expectedOutcome) {
        const completedQuests = [];
        
        // –°–æ–±–∏—Ä–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        if (gameState.quests.princess.completed) {
            completedQuests.push(...gameState.quests.princess.completed);
        }
        if (gameState.quests.helper.completed) {
            completedQuests.push(...gameState.quests.helper.completed);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        const expectedQuests = expectedOutcome.completedQuests || [];
        const allExpectedCompleted = expectedQuests.every(quest => completedQuests.includes(quest));
        
        return {
            valid: allExpectedCompleted,
            completedQuests
        };
    }
});