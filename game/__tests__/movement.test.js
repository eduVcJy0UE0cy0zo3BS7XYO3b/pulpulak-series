const CoopGameLogic = require('../coopGameLogic');
const LocationData = require('../../games/pulpulak/data/locationData');
const MockGameConfig = require('./mocks/MockGameConfig');

describe('Movement System', () => {
    let gameLogic;
    let gameConfig;
    const roomId = 'TEST_ROOM';
    const players = {
        princess: { id: 'alice', name: '–ê–ª–∏—Å–∞' },
        helper: { id: 'bob', name: '–ë–æ–±' }
    };

    beforeEach(() => {
        gameConfig = new MockGameConfig();
        gameLogic = new CoopGameLogic(gameConfig);
        gameLogic.startGame(roomId, players);
    });

    describe('Movement choices generation', () => {
        test('–¥–æ–ª–∂–Ω—ã –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤—ã–±–æ—Ä—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è', () => {
            const gameData = gameLogic.getGameData(roomId);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä—ã –∫–Ω—è–∂–Ω—ã
            const princessChoices = gameData.choices.princess;
            const movementChoices = princessChoices.filter(c => c.isMovement);
            
            expect(movementChoices.length).toBeGreaterThan(0);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –≤—ã–±–æ—Ä—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–æ—Ä–∏–¥–æ—Ä –∏ –ª–∏—á–Ω—ã–µ –ø–æ–∫–æ–∏
            const targetLocations = movementChoices.map(c => c.targetLocation);
            expect(targetLocations).toContain('corridor_upper');
            expect(targetLocations).toContain('private_quarters');
        });

        test('–≤—ã–±–æ—Ä—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º', () => {
            const gameData = gameLogic.getGameData(roomId);
            
            const princessMovements = gameData.choices.princess.filter(c => c.isMovement);
            const helperMovements = gameData.choices.helper.filter(c => c.isMovement);
            
            expect(princessMovements.length).toBeGreaterThan(0);
            expect(helperMovements.length).toBeGreaterThan(0);
            expect(princessMovements.length).toBe(helperMovements.length);
        });
    });

    describe('processMovement', () => {
        test('–¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', () => {
            const gameState = gameLogic.games.get(roomId);
            
            const result = gameLogic.processMovement(gameState, 'corridor_upper', 'princess');
            
            expect(result.success).toBe(true);
            expect(result.gameState.stats.princess.location).toBe('corridor_upper');
            expect(result.message).toContain('–ö–Ω—è–∂–Ω–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∞—Å—å');
        });

        test('–Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª–∏—Ç—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—É—é –ª–æ–∫–∞—Ü–∏—é', () => {
            const gameState = gameLogic.games.get(roomId);
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ —Ç—Ä–æ–Ω–Ω—ã–π –∑–∞–ª –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Å–ø–∞–ª—å–Ω–∏
            const result = gameLogic.processMovement(gameState, 'throne_room', 'princess');
            
            expect(result.success).toBe(false);
            expect(result.message).toContain('–Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ø–∞—Å—Ç—å —Ç—É–¥–∞ –æ—Ç—Å—é–¥–∞');
            expect(gameState.stats.princess.location).toBe('princess_chamber');
        });

        test('–¥–æ–ª–∂–µ–Ω –æ—Ç–º–µ–Ω—è—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏', () => {
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω –æ–¥–µ–∂–¥–æ–π
            gameLogic.createOutfitSwapRequest(roomId, 'alice', 'princess');
            expect(gameLogic.outfitRequests.has(roomId)).toBe(true);
            
            // –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è
            const gameState = gameLogic.games.get(roomId);
            gameLogic.processMovement(gameState, 'corridor_upper', 'princess');
            
            // –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω
            expect(gameLogic.outfitRequests.has(roomId)).toBe(false);
        });

        test('–Ω–µ –¥–æ–ª–∂–µ–Ω –º–µ–Ω—è—Ç—å –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏', () => {
            const gameState = gameLogic.games.get(roomId);
            const turnBefore = gameState.turnOrder;
            
            gameLogic.processMovement(gameState, 'corridor_upper', 'princess');
            
            expect(gameState.turnOrder).toBe(turnBefore);
        });
    });

    describe('makeChoice with movement', () => {
        test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ makeChoice', () => {
            const result = gameLogic.makeChoice(roomId, 'alice', 'move_to_corridor_upper', 'princess');
            
            expect(result.success).toBe(true);
            expect(result.gameData.stats.princess.location).toBe('corridor_upper');
        });

        test('–ª—é–±–æ–π –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç', () => {
            const gameData = gameLogic.getGameData(roomId);
            
            // –°–µ–π—á–∞—Å —Ö–æ–¥ –∫–Ω—è–∂–Ω—ã, –Ω–æ –ø–æ–º–æ—â–Ω–∏—Ü–∞ —Ç–æ–∂–µ –º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è
            expect(gameData.currentTurn).toBe('princess');
            
            const result = gameLogic.makeChoice(roomId, 'bob', 'move_to_corridor_upper', 'helper');
            expect(result.success).toBe(true);
        });
    });

    describe('Outfit restrictions based on location', () => {
        test('–Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª–∏—Ç—å –º–µ–Ω—è—Ç—å –æ–¥–µ–∂–¥—É –≤ –ø—É–±–ª–∏—á–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö', () => {
            // –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –≤ —Ç—Ä–æ–Ω–Ω—ã–π –∑–∞–ª
            let gameState = gameLogic.games.get(roomId);
            gameState = gameLogic.immerStateManager.updateState(gameState, draft => {
                draft.stats.princess.location = 'throne_room';
                draft.stats.helper.location = 'throne_room';
            });
            gameLogic.games.set(roomId, gameState);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–æ–¥–µ–≤–∞—Ç—å—Å—è
            const canSwitch = gameLogic.canSwitchOutfits(gameState, 'princess');
            expect(canSwitch).toBe(false);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –æ–±–º–µ–Ω–∞ –Ω–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è
            const gameData = gameLogic.getGameData(roomId);
            const outfitChoices = gameData.choices.princess.filter(c => c.id === 'request_outfit_swap');
            expect(outfitChoices.length).toBe(0);
        });

        test('–¥–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª–∏—Ç—å –º–µ–Ω—è—Ç—å –æ–¥–µ–∂–¥—É –≤ —É–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö', () => {
            // –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –≤ —Ç–∞–π–Ω—ã–π —Å–∞–¥
            const gameState = gameLogic.games.get(roomId);
            gameState.stats.princess.location = 'secret_garden';
            gameState.stats.helper.location = 'secret_garden';
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–¥–µ–≤–∞—Ç—å—Å—è
            const canSwitch = gameLogic.canSwitchOutfits(gameState, 'princess');
            expect(canSwitch).toBe(true);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –æ–±–º–µ–Ω–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è
            const gameData = gameLogic.getGameData(roomId);
            const outfitChoices = gameData.choices.princess.filter(c => c.id === 'request_outfit_swap');
            expect(outfitChoices.length).toBe(1);
        });
    });

    describe('Complex movement scenarios', () => {
        test('–¥–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª–∏—Ç—å –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–æ–∫–∞—Ü–∏–π', () => {
            // –°–ø–∞–ª—å–Ω—è -> –ö–æ—Ä–∏–¥–æ—Ä -> –¢—Ä–æ–Ω–Ω—ã–π –∑–∞–ª -> –ë–æ–ª—å—à–æ–π –∑–∞–ª
            const moves = [
                { to: 'corridor_upper', from: 'princess_chamber' },
                { to: 'throne_room', from: 'corridor_upper' },
                { to: 'great_hall', from: 'throne_room' }
            ];
            
            moves.forEach(move => {
                const result = gameLogic.makeChoice(roomId, 'alice', `move_to_${move.to}`, 'princess');
                expect(result.success).toBe(true);
                expect(result.gameData.stats.princess.location).toBe(move.to);
            });
        });

        test('–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏', () => {
            // –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –≤ –∫—É—Ö–Ω—é —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
            let result;
            
            // –ò–∑ —Å–ø–∞–ª—å–Ω–∏ –≤ –∫–æ—Ä–∏–¥–æ—Ä
            result = gameLogic.makeChoice(roomId, 'alice', 'move_to_corridor_upper', 'princess');
            expect(result.success).toBe(true);
            
            // –ò–∑ –∫–æ—Ä–∏–¥–æ—Ä–∞ –Ω–∞ –ª–µ—Å—Ç–Ω–∏—Ü—É
            result = gameLogic.makeChoice(roomId, 'alice', 'move_to_stairs_main', 'princess');
            expect(result.success).toBe(true);
            
            // –° –ª–µ—Å—Ç–Ω–∏—Ü—ã –≤ –±–æ–ª—å—à–æ–π –∑–∞–ª
            result = gameLogic.makeChoice(roomId, 'alice', 'move_to_great_hall', 'princess');
            expect(result.success).toBe(true);
            
            // –ò–∑ –±–æ–ª—å—à–æ–≥–æ –∑–∞–ª–∞ –≤ –∫—É—Ö–Ω—é
            result = gameLogic.makeChoice(roomId, 'alice', 'move_to_kitchen', 'princess');
            expect(result.success).toBe(true);
            
            const gameData = gameLogic.getGameData(roomId);
            expect(gameData.locations.princess.name).toBe('–ö—É—Ö–Ω—è');
            expect(gameData.locations.princess.icon).toBe('üç≥');
            expect(gameData.locations.princess.canChangeOutfit).toBe(false);
        });
    });
});