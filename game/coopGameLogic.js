const CoopStoryData = require('./coopStoryData');
const LocationData = require('./locationData');
const NPCData = require('./npcData');
const QuestData = require('./questData');
const { OUTFIT_NAMES, CHARACTER_NAMES, CHARACTER_ROLES } = require('./constants');
const { processQuestAction } = require('./questActionHandlers');
const GameStateManager = require('./gameStateManager');
const ImmerStateManager = require('./stateManager');
const dataManagerFactory = require('./managers/DataManagerFactory');

class CoopGameLogic {
    constructor() {
        // –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        const managers = dataManagerFactory.getManagers();
        this.gameData = managers.gameData;
        this.playerData = managers.playerData;
        this.questData = managers.questData;
        this.outfitData = managers.outfitData;
        
        // –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        this.stateManager = new GameStateManager();
        this.immerStateManager = new ImmerStateManager();
    }

    // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
    startGame(roomId, players) {
        try {
            this.validateGameStartParameters(roomId, players);
            
            // –°–æ–∑–¥–∞—ë–º –∏–≥—Ä—É —á–µ—Ä–µ–∑ GameDataManager
            const gameState = this.gameData.createGame(roomId, players);
            
            this.initializeNPCs(gameState);
            
            return this.getGameData(roomId);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã:', error);
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É: ${error.message}`);
        }
    }

    validateGameStartParameters(roomId, players) {
        if (!roomId || typeof roomId !== 'string') {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–æ–º–Ω–∞—Ç—ã');
        }
        if (!players || !players.princess || !players.helper) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã');
        }
    }

    initializeNPCs(gameState) {
        try {
            this.playerData.updateAllNPCsPresent(gameState.roomId);
        } catch (npcError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ NPC:', npcError);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã NPC
        }
    }

    // –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω –æ–¥–µ–∂–¥–æ–π
    createOutfitSwapRequest(roomId, fromPlayerId, fromCharacter) {
        return this.outfitData.createOutfitSwapRequest(roomId, fromPlayerId, fromCharacter);
    }

    // –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ–±–º–µ–Ω–∞ –æ–¥–µ–∂–¥–æ–π
    respondToOutfitSwapRequest(roomId, playerId, accepted) {
        return this.outfitData.respondToOutfitSwapRequest(roomId, playerId, accepted);
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–æ–¥–µ–≤–∞—Ç—å—Å—è
    canSwitchOutfits(gameState, character) {
        return this.outfitData.canSwitchOutfits(gameState.roomId, character);
    }

    validateOutfitChange(gameState, character) {
        const validators = [
            () => this.hasNoNPCs(gameState, character),
            () => this.locationAllowsOutfitChange(gameState, character),
            () => this.playersInSameLocation(gameState, character),
            () => this.bothPlayersHaveNoNPCs(gameState, character)
        ];
        
        return validators.every(validate => validate());
    }

    hasNoNPCs(gameState, character) {
        const characterStats = gameState.stats[character];
        return !characterStats.npcsPresent || characterStats.npcsPresent.length === 0;
    }

    locationAllowsOutfitChange(gameState, character) {
        const characterStats = gameState.stats[character];
        return LocationData.canChangeOutfit(characterStats.location);
    }

    playersInSameLocation(gameState, character) {
        const characterStats = gameState.stats[character];
        const otherCharacter = character === 'princess' ? 'helper' : 'princess';
        return characterStats.location === gameState.stats[otherCharacter].location;
    }

    bothPlayersHaveNoNPCs(gameState, character) {
        const otherCharacter = character === 'princess' ? 'helper' : 'princess';
        return this.hasNoNPCs(gameState, otherCharacter);
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—ã–±–æ—Ä—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    getChoicesForCharacter(gameState, character, sceneData) {
        const choices = this.getSceneChoices(gameState, character, sceneData);
        const specialChoices = this.getSpecialChoices(gameState, character);
        
        return [...choices, ...specialChoices];
    }

    getSceneChoices(gameState, character, sceneData) {
        if (gameState.turnOrder !== character) {
            return [];
        }
        
        const choices = sceneData.choices[character] || [];
        return choices.filter(choice => this.isChoiceAvailable(choice, gameState, character));
    }

    getSpecialChoices(gameState, character) {
        const choices = [];
        
        // –í—ã–±–æ—Ä –æ–±–º–µ–Ω–∞ –æ–¥–µ–∂–¥–æ–π
        if (this.canSwitchOutfits(gameState, character) && !this.outfitData.hasActiveRequest(gameState.roomId)) {
            choices.push(this.createOutfitSwapChoice(character));
        }
        
        // –í—ã–±–æ—Ä—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        choices.push(...this.getMovementChoices(gameState, character));
        
        // –í—ã–±–æ—Ä—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å NPC
        choices.push(...this.getNPCInteractionChoices(gameState, character));
        
        return choices;
    }

    createOutfitSwapChoice(character) {
        const otherCharacter = character === 'princess' ? '–ø–æ–º–æ—â–Ω–∏—Ü–µ' : '–∫–Ω—è–∂–Ω–µ';
        return {
            id: 'request_outfit_swap',
            text: 'üëó –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–º–µ–Ω—è—Ç—å—Å—è –æ–¥–µ–∂–¥–æ–π',
            description: `–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å ${otherCharacter} –ø–æ–º–µ–Ω—è—Ç—å—Å—è –Ω–∞—Ä—è–¥–∞–º–∏`,
            isOutfitRequest: true
        };
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–≤ (–ù–ï –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–¥–µ–∂–¥—ã)
    makeChoice(roomId, playerId, choiceId, character) {
        try {
            const validation = this.validateGameState(roomId);
            if (!validation.valid) {
                return { success: false, message: validation.error };
            }

            if (!this.validatePlayer(validation.gameState, playerId, character)) {
                return { success: false, message: "–í—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ –¥—Ä—É–≥–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º" };
            }

            if (!this.validateTurn(validation.gameState, character, choiceId)) {
                return { success: false, message: "–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥" };
            }

            const result = this.processChoice(validation.gameState, choiceId, character);
            if (result.success) {
                return {
                    success: true,
                    gameData: this.getGameData(roomId),
                    message: result.message
                };
            }

            return result;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞:', error);
            return { 
                success: false, 
                message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è: ${error.message}` 
            };
        }
    }

    validateTurn(gameState, character, choiceId) {
        const isMovement = choiceId.startsWith('move_to_');
        const isNPCInteraction = choiceId.startsWith('talk_to_');
        const isSpecialAction = choiceId === 'request_outfit_swap';
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö–æ–¥–∞
        if (isMovement || isNPCInteraction || isSpecialAction) {
            return true;
        }
        
        return gameState.turnOrder === character;
    }

    // –û–±—â–∏–µ –º–µ—Ç–æ–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    validateGameState(roomId) {
        const gameState = this.gameData.getGame(roomId);
        return gameState ? { valid: true, gameState } : { valid: false, error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
    }

    validatePlayer(gameState, playerId, character) {
        const playerCharacter = gameState.players[character];
        return playerCharacter && playerCharacter.id === playerId;
    }

    processChoice(gameState, choiceId, character) {
        // –ó–∞–ø—Ä–æ—Å—ã –æ–¥–µ–∂–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        if (choiceId === 'request_outfit_swap') {
            return { 
                success: false, 
                message: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±–º–µ–Ω–∞ –æ–¥–µ–∂–¥–æ–π" 
            };
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
        if (choiceId.startsWith('move_to_')) {
            const targetLocation = choiceId.replace('move_to_', '');
            return this.processMovement(gameState, targetLocation, character);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å NPC
        if (choiceId.startsWith('talk_to_')) {
            const npcId = choiceId.replace('talk_to_', '');
            return this.processNPCInteraction(gameState, npcId, character);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–≤
        const sceneData = CoopStoryData.getScene(gameState.currentScene);
        const choice = sceneData.choices[character]?.find(c => c.id === choiceId);
        
        if (!choice) {
            return { success: false, message: "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä" };
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –≤—ã–±–æ—Ä–∞
        if (choice.effects) {
            gameState = this.applyEffects(gameState, choice.effects, character);
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            Object.assign(this.gameData.getGame(gameState.roomId), gameState);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–µ–Ω—è–µ—Ç—Å—è –ª–∏ —Å—Ü–µ–Ω–∞
        if (choice.nextScene) {
            this.gameData.updateScene(gameState.roomId, choice.nextScene);
            
            // –ü—Ä–∏ —Å–º–µ–Ω–µ —Å—Ü–µ–Ω—ã –æ—Ç–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            this.outfitData.cancelOutfitRequest(gameState.roomId);
        }

        // –ú–µ–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–∞
        this.gameData.switchTurn(gameState.roomId);

        return { 
            success: true, 
            message: choice.resultText || "–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω"
        };
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
    getActiveOutfitRequest(roomId) {
        return this.outfitData.getActiveOutfitRequest(roomId);
    }

    // –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å 
    cancelOutfitRequest(roomId) {
        this.outfitData.cancelOutfitRequest(roomId);
    }

    // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã –≤—ã–±–æ—Ä–∞
    applyEffects(gameState, effects, character) {
        return this.immerStateManager.updateState(gameState, draft => {
            if (effects.outfit) {
                draft.stats[character].outfit = effects.outfit;
            }
            if (effects.location) {
                draft.stats[character].location = effects.location;
                draft.stats[character].npcsPresent = this.getNPCsForLocation(effects.location, gameState, character);
            }
            if (effects.awareness) {
                draft.stats[character].awareness += effects.awareness;
            }
        });
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞
    isChoiceAvailable(choice, gameState, character) {
        // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
        return true;
    }

    // –°–º–µ–Ω–∏—Ç—å –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–∞
    switchTurn(gameState) {
        return this.immerStateManager.updateState(gameState, draft => {
            draft.turnOrder = draft.turnOrder === 'princess' ? 'helper' : 'princess';
        });
    }

    // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
    getGameData(roomId) {
        const gameState = this.gameData.getGame(roomId);
        if (!gameState) return null;

        const sceneData = CoopStoryData.getScene(gameState.currentScene);
        const choicesForCharacters = this.buildChoicesData(gameState, sceneData);
        const activeOutfitRequest = this.getActiveOutfitRequest(roomId);
        
        return this.gameData.buildClientGameData(roomId, choicesForCharacters, activeOutfitRequest);
    }

    buildSceneData(sceneData) {
        return {
            title: sceneData.title,
            text: sceneData.text
        };
    }

    buildChoicesData(gameState, sceneData) {
        return {
            princess: this.getChoicesForCharacter(gameState, 'princess', sceneData),
            helper: this.getChoicesForCharacter(gameState, 'helper', sceneData)
        };
    }

    buildLocationsData(gameState) {
        return {
            princess: LocationData.getLocationInfo(gameState.stats.princess.location),
            helper: LocationData.getLocationInfo(gameState.stats.helper.location)
        };
    }

    buildDialoguesData(gameState) {
        return {
            princess: gameState.npcDialogues?.princess || null,
            helper: gameState.npcDialogues?.helper || null
        };
    }

    buildQuestsData(gameState) {
        return {
            princess: {
                active: gameState.quests.princess.active,
                completed: gameState.quests.princess.completed.length
            },
            helper: {
                active: gameState.quests.helper.active,
                completed: gameState.quests.helper.completed.length
            }
        };
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    generateRequestId() {
        return Math.random().toString(36).substring(2, 15);
    }

    getCharacterName(character) {
        return CHARACTER_NAMES[character] || character;
    }

    getOutfitName(outfitId) {
        return OUTFIT_NAMES[outfitId] || outfitId;
    }

    getNPCsForLocation(location, gameState = null, character = null) {
        // –ü–æ–ª—É—á–∞–µ–º NPC –∏–∑ NPCData —Å —É—á—ë—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        const npcs = NPCData.getNPCsForLocation(location, gameState, character);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        return npcs.map(npc => npc.name);
    }

    getMovementChoices(gameState, character) {
        const currentLocation = gameState.stats[character].location;
        const locationInfo = LocationData.getLocationInfo(currentLocation);
        
        if (!locationInfo) return [];
        
        const choices = [];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å–æ—Å–µ–¥–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
        locationInfo.connections.forEach(connection => {
            choices.push({
                id: `move_to_${connection.id}`,
                text: `${connection.icon} –ü–µ—Ä–µ–π—Ç–∏: ${connection.name}`,
                description: `–û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ ${connection.name}`,
                isMovement: true,
                targetLocation: connection.id
            });
        });
        
        return choices;
    }

    processMovement(gameState, targetLocation, character) {
        const characterStats = gameState.stats[character];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª–µ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–∑ —Ç–µ–∫—É—â–µ–π
        const currentConnections = LocationData.getConnections(characterStats.location);
        if (!currentConnections.includes(targetLocation)) {
            return { 
                success: false, 
                message: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ø–∞—Å—Ç—å —Ç—É–¥–∞ –æ—Ç—Å—é–¥–∞" 
            };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–∫–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const locationInfo = LocationData.getLocation(targetLocation);
        if (!locationInfo) {
            return { 
                success: false, 
                message: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è" 
            };
        }

        // –û—Ç–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –ª—é–±–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if (this.outfitData.hasActiveRequest(gameState.roomId)) {
            this.cancelOutfitRequest(gameState.roomId);
        }

        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —á–µ—Ä–µ–∑ PlayerDataManager
        this.playerData.updateLocation(gameState.roomId, character, targetLocation);
        const updatedGameState = this.gameData.getGame(gameState.roomId);

        // –ù–ï –º–µ–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏
        // –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞–º —Å–≤–æ–±–æ–¥–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è

        return { 
            success: true, 
            message: `${character === 'princess' ? '–ö–Ω—è–∂–Ω–∞' : '–ü–æ–º–æ—â–Ω–∏—Ü–∞'} –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∞—Å—å –≤ ${locationInfo.name}`,
            gameState: updatedGameState
        };
    }

    removeGame(roomId) {
        this.gameData.deleteGame(roomId);
        this.outfitData.clearRoomRequests(roomId);
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—ã–±–æ—Ä—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å NPC
    getNPCInteractionChoices(gameState, character) {
        const choices = [];
        const characterLocation = gameState.stats[character].location;
        const npcs = NPCData.getNPCsForLocation(characterLocation, gameState, character);
        
        npcs.forEach(npc => {
            choices.push({
                id: `talk_to_${npc.id}`,
                text: `üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å ${npc.name}`,
                description: npc.description,
                isNPCInteraction: true,
                npcId: npc.id
            });
        });
        
        return choices;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å NPC
    processNPCInteraction(gameState, npcId, character) {
        try {
            const npc = NPCData.getNPC(npcId);
            if (!npc) {
                return { success: false, message: "NPC –Ω–µ –Ω–∞–π–¥–µ–Ω" };
            }

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Ä—è–¥ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        const outfit = gameState.stats[character].outfit;
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–∞–º—è—Ç—å NPC –∏ —Å–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ —á–µ—Ä–µ–∑ Immer
        let updatedGameState = gameState;
        if (!gameState.npcMemory[character][npcId]) {
            updatedGameState = this.immerStateManager.updateState(gameState, draft => {
                draft.npcMemory[character][npcId] = {};
            });
            this.games.set(updatedGameState.roomId, updatedGameState);
        }
        const npcMemory = updatedGameState.npcMemory[character][npcId];
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Ä—è–¥–∞, –ø–∞–º—è—Ç–∏, –ª–æ–∫–∞—Ü–∏–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–≤–µ—Å—Ç–∞
        const currentLocation = updatedGameState.stats[character].location;
        const questState = updatedGameState.quests[character];
        const globalQuestMemory = updatedGameState.globalQuestMemory;
        const dialogue = NPCData.getNPCDialogue(npcId, outfit, npcMemory, currentLocation, questState, globalQuestMemory);
        if (!dialogue) {
            return { success: false, message: "–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω" };
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–ª–æ–≥–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        updatedGameState = this.immerStateManager.updateState(updatedGameState, draft => {
            draft.npcDialogues[character] = {
                npcId: npcId,
                npcName: npc.name,
                greeting: dialogue.greeting,
                choices: dialogue.choices,
                attitude: NPCData.getNPCAttitude(npcId, outfit),
                activeCharacter: character, // –ö—Ç–æ –≤–µ–¥–µ—Ç –¥–∏–∞–ª–æ–≥
                isFollowUp: false // –§–ª–∞–≥ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–≤
            };
        });
        this.games.set(updatedGameState.roomId, updatedGameState);

        return { 
            success: true, 
            showDialogue: true,
            message: `–ù–∞—á–∞—Ç –¥–∏–∞–ª–æ–≥ —Å ${npc.name}`
        };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å NPC:', error);
            return { 
                success: false, 
                message: `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥: ${error.message}` 
            };
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –¥–∏–∞–ª–æ–≥–µ —Å NPC
    processNPCDialogueChoice(roomId, playerId, choiceId, character) {
        let gameState = this.games.get(roomId);
        if (!gameState) {
            return { success: false, message: "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
        const playerCharacter = gameState.players[character];
        if (!playerCharacter || playerCharacter.id !== playerId) {
            return { success: false, message: "–í—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ –¥—Ä—É–≥–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º" };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if (!gameState.npcDialogues[character]) {
            return { success: false, message: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞" };
        }

        const npcId = gameState.npcDialogues[character].npcId;
        const outfit = gameState.stats[character].outfit;

        // –ü–æ–ª—É—á–∞–µ–º –ø–∞–º—è—Ç—å NPC –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if (!gameState.npcMemory[character][npcId]) {
            gameState.npcMemory[character][npcId] = {};
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —á–µ—Ä–µ–∑ NPCData
        const isFollowUp = gameState.npcDialogues[character].isFollowUp || false;
        const currentChoices = isFollowUp ? gameState.npcDialogues[character].choices : [];
        
        // –°–æ–∑–¥–∞–µ–º –º—É—Ç–∞–±–µ–ª—å–Ω—É—é –∫–æ–ø–∏—é –ø–∞–º—è—Ç–∏ NPC –¥–ª—è NPCData
        const npcMemoryCopy = JSON.parse(JSON.stringify(gameState.npcMemory[character][npcId]));
        
        const result = NPCData.processDialogueChoice(
            npcId, 
            choiceId, 
            outfit, 
            npcMemoryCopy,
            isFollowUp,
            currentChoices,
            gameState.stats[character].location
        );
        if (!result) {
            return { success: false, message: "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä" };
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–º—è—Ç—å NPC –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
        gameState = this.immerStateManager.updateState(gameState, draft => {
            draft.npcMemory[character][npcId] = result.updatedMemory;
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –≤—ã–±–æ—Ä–∞
            if (result.effects) {
                if (result.effects.item) {
                    draft.stats[character].inventory.push(result.effects.item);
                }
                if (result.effects.info) {
                    draft.stats[character][result.effects.info] = true;
                }
            }
        });
        this.games.set(gameState.roomId, gameState);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–≤–µ—Å—Ç–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        const questResult = this.processQuestAction(gameState, character, choiceId, result);
        if (questResult && questResult.success && questResult.gameState) {
            gameState = questResult.gameState;
            this.games.set(gameState.roomId, gameState);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º NPC –≤ –ª–æ–∫–∞—Ü–∏—è—Ö –ø–æ—Å–ª–µ –∫–≤–µ—Å—Ç–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (NPC –º–æ–≥–ª–∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è)
        gameState = this.immerStateManager.updateState(gameState, draft => {
            draft.stats.princess.npcsPresent = this.getNPCsForLocation(draft.stats.princess.location, gameState, 'princess');
            draft.stats.helper.npcsPresent = this.getNPCsForLocation(draft.stats.helper.location, gameState, 'helper');
        });
        this.games.set(gameState.roomId, gameState);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º attitude –¥–æ –æ—á–∏—Å—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞
        const attitude = gameState.npcDialogues[character]?.attitude;

        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã–±–æ—Ä—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
        if (result.next_choices && result.next_choices.length > 0) {
            gameState = this.immerStateManager.updateState(gameState, draft => {
                draft.npcDialogues[character].choices = result.next_choices;
                draft.npcDialogues[character].greeting = result.response;
                draft.npcDialogues[character].isFollowUp = true;
            });
            this.games.set(gameState.roomId, gameState);

            return { 
                success: true, 
                message: result.response,
                type: attitude === 'hostile' ? 'warning' : 'success',
                hasFollowUp: true
            };
        } else {
            // –û—á–∏—â–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –º–µ–Ω—è–µ–º —Ö–æ–¥
            gameState = this.immerStateManager.updateState(gameState, draft => {
                draft.npcDialogues[character] = null;
            });
            gameState = this.switchTurn(gameState);
            this.games.set(gameState.roomId, gameState);

            return { 
                success: true, 
                message: result.response,
                type: attitude === 'hostile' ? 'warning' : 'success'
            };
        }
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å NPC
    closeNPCDialogue(roomId, playerId) {
        let gameState = this.games.get(roomId);
        if (!gameState) {
            return { success: false, message: "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" };
        }

        // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥–∞–Ω–Ω–æ–º—É –∏–≥—Ä–æ–∫—É
        let character = null;
        for (const [char, player] of Object.entries(gameState.players)) {
            if (player && player.id === playerId) {
                character = char;
                break;
            }
        }

        if (!character) {
            return { success: false, message: "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if (!gameState.npcDialogues[character]) {
            return { success: false, message: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞" };
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        gameState = this.immerStateManager.updateState(gameState, draft => {
            draft.npcDialogues[character] = null;
        });
        this.games.set(gameState.roomId, gameState);

        return { 
            success: true, 
            message: "–î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç",
            gameState: gameState
        };
    }

    // === –°–ò–°–¢–ï–ú–ê –ö–í–ï–°–¢–û–í ===

    // –ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç
    startQuest(gameState, character, questId) {
        const quest = QuestData.createQuestInstance(questId);
        if (!quest) {
            return { success: false, message: "–ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" };
        }

        if (gameState.quests[character].active) {
            return { success: false, message: "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç" };
        }

        const updatedState = this.immerStateManager.updateState(gameState, draft => {
            draft.quests[character].active = quest;
            
            // –°—Ä–∞–∑—É –æ—Ç–º–µ—á–∞–µ–º –∫–≤–µ—Å—Ç –∫–∞–∫ –≤–∑—è—Ç—ã–π –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏
            if (questId === 'princess_lost_relic') {
                draft.globalQuestMemory.princess_lost_relic = true;
            } else if (questId === 'helper_secret_potion') {
                draft.globalQuestMemory.helper_secret_potion = true;
            }
        });
        this.games.set(updatedState.roomId, updatedState);
        
        return { 
            success: true, 
            message: `–ù–∞—á–∞—Ç –∫–≤–µ—Å—Ç: ${quest.title}`,
            quest: quest,
            gameState: updatedState
        };
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞
    updateQuestProgress(gameState, character, stepId) {
        const activeQuest = gameState.quests[character].active;
        if (!activeQuest) {
            return { success: false, message: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞" };
        }

        const currentStep = activeQuest.steps[activeQuest.currentStep];
        if (currentStep && currentStep.id === stepId) {
            const updatedState = this.immerStateManager.updateState(gameState, draft => {
                const draftQuest = draft.quests[character].active;
                draftQuest.steps[draftQuest.currentStep].completed = true;
                draftQuest.currentStep++;
            });
            this.games.set(updatedState.roomId, updatedState);

            if (updatedState.quests[character].active.currentStep >= updatedState.quests[character].active.steps.length) {
                // –ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω
                const completedState = this.completeQuest(updatedState, character);
                return { 
                    success: true, 
                    completed: true,
                    message: `–ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: ${activeQuest.title}!`,
                    rewards: activeQuest.rewards,
                    gameState: completedState
                };
            } else {
                return { 
                    success: true, 
                    message: `–®–∞–≥ –∫–≤–µ—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${currentStep.description}`,
                    nextStep: updatedState.quests[character].active.steps[updatedState.quests[character].active.currentStep],
                    gameState: updatedState
                };
            }
        }

        return { success: false, message: "–ù–µ–≤–µ—Ä–Ω—ã–π —à–∞–≥ –∫–≤–µ—Å—Ç–∞" };
    }

    // –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–≤–µ—Å—Ç
    completeQuest(gameState, character) {
        const activeQuest = gameState.quests[character].active;
        if (activeQuest) {
            const updatedState = this.immerStateManager.updateState(gameState, draft => {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
                if (activeQuest.rewards) {
                    activeQuest.rewards.forEach(reward => {
                        draft.stats[character].inventory.push(reward);
                    });
                }

                // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–≤–µ—Å—Ç –≤ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ
                draft.quests[character].completed.push(activeQuest);
                draft.quests[character].active = null;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å –∫–≤–µ—Å—Ç–æ–≤
                if (activeQuest.id === 'princess_lost_relic') {
                    draft.globalQuestMemory.princess_lost_relic = true;
                } else if (activeQuest.id === 'helper_secret_potion') {
                    draft.globalQuestMemory.helper_secret_potion = true;
                }
            });
            this.games.set(updatedState.roomId, updatedState);
            return updatedState;
        }
        return gameState;
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–≤–µ—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    getCurrentQuest(gameState, character) {
        return gameState.quests[character].active;
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–≥ –∫–≤–µ—Å—Ç–∞
    getCurrentQuestStep(gameState, character) {
        const quest = this.getCurrentQuest(gameState, character);
        if (!quest || quest.currentStep >= quest.steps.length) {
            return null;
        }
        return quest.steps[quest.currentStep];
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç
    canStartQuest(gameState, character, questId) {
        const quest = QuestData.getQuest(questId);
        if (!quest || quest.character !== character) {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞
        if (gameState.quests[character].active) {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–≤–µ—Å—Ç –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à—ë–Ω —Ä–∞–Ω–µ–µ
        const completed = gameState.quests[character].completed;
        return !completed.some(q => q.id === questId);
    }

    // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–≤–µ—Å—Ç–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –¥–∏–∞–ª–æ–≥–∞
    processQuestAction(gameState, character, choiceId, dialogueResult) {
        // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å
        return processQuestAction(gameState, character, choiceId, dialogueResult, this);
    }

    // === –ú–ï–¢–û–î–´ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å) ===
    
    // –ò–º–∏—Ç–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–≥–æ gameLogic.games –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    get games() {
        return {
            get: (roomId) => this.gameData.getGame(roomId),
            set: (roomId, gameState) => {
                // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ—Å—Ç–∞–º–∏, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
                // –í –±—É–¥—É—â–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤—ã–∑–æ–≤—ã —á–µ—Ä–µ–∑ data managers
                const originalGame = this.gameData.getGame(roomId);
                if (originalGame) {
                    try {
                        // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏–≥—Ä—ã
                        Object.assign(originalGame, gameState);
                    } catch (error) {
                        // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –Ω–∞–ø—Ä—è–º—É—é:', error.message);
                    }
                }
            },
            has: (roomId) => this.gameData.hasGame(roomId),
            delete: (roomId) => this.gameData.deleteGame(roomId)
        };
    }

    // –ò–º–∏—Ç–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–≥–æ gameLogic.outfitRequests –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    get outfitRequests() {
        return {
            get: (roomId) => this.outfitData.getActiveOutfitRequest(roomId),
            has: (roomId) => this.outfitData.hasActiveRequest(roomId),
            delete: (roomId) => this.outfitData.cancelOutfitRequest(roomId)
        };
    }
}

module.exports = CoopGameLogic;
