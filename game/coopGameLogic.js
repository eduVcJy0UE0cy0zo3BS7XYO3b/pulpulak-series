const CoopStoryData = require('./coopStoryData');

class CoopGameLogic {
    constructor() {
        this.games = new Map(); // roomId -> gameState
        this.outfitRequests = new Map(); // roomId -> activeRequest
    }

    // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
    startGame(roomId, players) {
        const gameState = {
            roomId: roomId,
            players: players,
            currentScene: 'coop_awakening',
            turnOrder: 'princess', 
            chapter: 1,
            location: 'princess_chamber',
            npcsPresent: [], // –í–ê–ñ–ù–û: –≤ –Ω–∞—á–∞–ª–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç - –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–¥–µ–≤–∞—Ç—å—Å—è!
            stats: {
                princess: {
                    outfit: 'nightgown',
                    awareness: 0,
                    loyalty: {},
                    inventory: []
                },
                helper: {
                    outfit: 'common_dress',
                    awareness: 0,
                    secrets_revealed: 0,
                    inventory: ['translation_earrings', 'voice_medallion']
                }
            }
        };

        this.games.set(roomId, gameState);
        return this.getGameData(roomId);
    }

    // –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω –æ–¥–µ–∂–¥–æ–π
    createOutfitSwapRequest(roomId, fromPlayerId, fromCharacter) {
        const gameState = this.games.get(roomId);
        if (!gameState) {
            return { success: false, message: "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–æ–¥–µ–≤–∞—Ç—å—Å—è (–Ω–µ—Ç –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö)
        if (!this.canSwitchOutfits(gameState)) {
            return { 
                success: false, 
                message: "–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–æ–¥–µ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö!" 
            };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        if (this.outfitRequests.has(roomId)) {
            return { 
                success: false, 
                message: "–£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω –æ–¥–µ–∂–¥–æ–π" 
            };
        }

        const targetCharacter = fromCharacter === 'princess' ? 'helper' : 'princess';
        const targetPlayer = gameState.players[targetCharacter];

        if (!targetPlayer) {
            return { success: false, message: "–í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" };
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
        const request = {
            id: this.generateRequestId(),
            roomId: roomId,
            fromPlayerId: fromPlayerId,
            fromCharacter: fromCharacter,
            targetPlayerId: targetPlayer.id,
            targetCharacter: targetCharacter,
            timestamp: Date.now()
        };

        this.outfitRequests.set(roomId, request);

        return { 
            success: true, 
            request: request,
            message: `${this.getCharacterName(fromCharacter)} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å—Å—è –æ–¥–µ–∂–¥–æ–π`
        };
    }

    // –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ–±–º–µ–Ω–∞ –æ–¥–µ–∂–¥–æ–π
    respondToOutfitSwapRequest(roomId, playerId, accepted) {
        const request = this.outfitRequests.get(roomId);
        if (!request) {
            return { success: false, message: "–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" };
        }

        if (request.targetPlayerId !== playerId) {
            return { success: false, message: "–≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –Ω–µ –¥–ª—è –≤–∞—Å" };
        }

        // –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        this.outfitRequests.delete(roomId);

        if (!accepted) {
            return { 
                success: true, 
                declined: true,
                message: `${this.getCharacterName(request.targetCharacter)} –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –æ–¥–µ–∂–¥–æ–π`
            };
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–º–µ–Ω –æ–¥–µ–∂–¥–æ–π
        const gameState = this.games.get(roomId);
        if (!gameState) {
            return { success: false, message: "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" };
        }

        if (!this.canSwitchOutfits(gameState)) {
            return { 
                success: false, 
                message: "–û–±—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å - –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–æ–¥–µ–≤–∞—Ç—å—Å—è!" 
            };
        }

        // –ú–µ–Ω—è–µ–º –Ω–∞—Ä—è–¥—ã –º–µ—Å—Ç–∞–º–∏
        const { princess, helper } = gameState.stats;
        const tempOutfit = princess.outfit;
        princess.outfit = helper.outfit;
        helper.outfit = tempOutfit;

        console.log('üëó –û–±–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω:', {
            princessNew: princess.outfit,
            helperNew: helper.outfit
        });

        return {
            success: true,
            accepted: true,
            message: `–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –ø–æ–º–µ–Ω—è–ª–∏—Å—å –æ–¥–µ–∂–¥–æ–π! –ö–Ω—è–∂–Ω–∞ —Ç–µ–ø–µ—Ä—å –≤: ${this.getOutfitName(princess.outfit)}, –ø–æ–º–æ—â–Ω–∏—Ü–∞ –≤: ${this.getOutfitName(helper.outfit)}`
        };
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–æ–¥–µ–≤–∞—Ç—å—Å—è
    canSwitchOutfits(gameState) {
        // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–¥–µ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–∞–µ–¥–∏–Ω–µ
        return !gameState.npcsPresent || gameState.npcsPresent.length === 0;
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—ã–±–æ—Ä—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    getChoicesForCharacter(gameState, character, sceneData) {
        let choices = [];
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–±–æ—Ä—ã —Å—Ü–µ–Ω—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞, —á–µ–π —Ö–æ–¥)
        if (gameState.turnOrder === character) {
            choices = sceneData.choices[character] || [];
            choices = choices.filter(choice => {
                return this.isChoiceAvailable(choice, gameState, character);
            });
        }

        // –ö–ù–û–ü–ö–ê –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –æ–±–º–µ–Ω–∞ –æ–¥–µ–∂–¥–æ–π –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –û–ë–û–ò–• –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        // –µ—Å–ª–∏ –æ–Ω–∏ –Ω–∞–µ–¥–∏–Ω–µ –∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        if (this.canSwitchOutfits(gameState) && !this.outfitRequests.has(gameState.roomId)) {
            const otherCharacter = character === 'princess' ? '–ø–æ–º–æ—â–Ω–∏—Ü–µ' : '–∫–Ω—è–∂–Ω–µ';
            choices.push({
                id: 'request_outfit_swap',
                text: 'üëó –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–º–µ–Ω—è—Ç—å—Å—è –æ–¥–µ–∂–¥–æ–π',
                description: `–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å ${otherCharacter} –ø–æ–º–µ–Ω—è—Ç—å—Å—è –Ω–∞—Ä—è–¥–∞–º–∏`,
                isOutfitRequest: true
            });
        }

        return choices;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–≤ (–ù–ï –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–¥–µ–∂–¥—ã)
    makeChoice(roomId, playerId, choiceId, character) {
        const gameState = this.games.get(roomId);
        if (!gameState) {
            return { success: false, message: "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" };
        }

        const result = this.processChoice(gameState, choiceId, character);
        if (result.success) {
            return {
                success: true,
                gameData: this.getGameData(roomId),
                message: result.message
            };
        }

        return result;
    }

    processChoice(gameState, choiceId, character) {
        // –ó–∞–ø—Ä–æ—Å—ã –æ–¥–µ–∂–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        if (choiceId === 'request_outfit_swap') {
            return { 
                success: false, 
                message: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±–º–µ–Ω–∞ –æ–¥–µ–∂–¥–æ–π" 
            };
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–≤
        const sceneData = CoopStoryData.getScene(gameState.currentScene);
        const choice = sceneData.choices[character]?.find(c => c.id === choiceId);
        
        if (!choice) {
            return { success: false, message: "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä" };
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –≤—ã–±–æ—Ä–∞
        if (choice.effects) {
            this.applyEffects(gameState, choice.effects, character);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–µ–Ω—è–µ—Ç—Å—è –ª–∏ —Å—Ü–µ–Ω–∞
        if (choice.nextScene) {
            gameState.currentScene = choice.nextScene;
            
            // –ü—Ä–∏ —Å–º–µ–Ω–µ —Å—Ü–µ–Ω—ã –æ—Ç–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            this.cancelOutfitRequest(gameState.roomId);
            
            // –ü—Ä–∏ —Å–º–µ–Ω–µ —Å—Ü–µ–Ω—ã –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞
            const newSceneData = CoopStoryData.getScene(choice.nextScene);
            if (newSceneData.location) {
                gameState.location = newSceneData.location;
                gameState.npcsPresent = this.getNPCsForLocation(newSceneData.location);
            }
        }

        // –ú–µ–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–∞
        this.switchTurn(gameState);

        return { 
            success: true, 
            message: choice.resultText || "–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω"
        };
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
    getActiveOutfitRequest(roomId) {
        return this.outfitRequests.get(roomId) || null;
    }

    // –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å 
    cancelOutfitRequest(roomId) {
        this.outfitRequests.delete(roomId);
    }

    // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã –≤—ã–±–æ—Ä–∞
    applyEffects(gameState, effects, character) {
        if (effects.outfit) {
            gameState.stats[character].outfit = effects.outfit;
        }
        if (effects.location) {
            gameState.location = effects.location;
            gameState.npcsPresent = this.getNPCsForLocation(effects.location);
        }
        if (effects.awareness) {
            gameState.stats[character].awareness += effects.awareness;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞
    isChoiceAvailable(choice, gameState, character) {
        // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
        return true;
    }

    // –°–º–µ–Ω–∏—Ç—å –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–∞
    switchTurn(gameState) {
        gameState.turnOrder = gameState.turnOrder === 'princess' ? 'helper' : 'princess';
    }

    // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
    getGameData(roomId) {
        const gameState = this.games.get(roomId);
        if (!gameState) return null;

        const sceneData = CoopStoryData.getScene(gameState.currentScene);
        
        const gameData = {
            roomId: roomId,
            players: gameState.players,
            scene: {
                title: sceneData.title,
                text: sceneData.text
            },
            choices: {
                princess: this.getChoicesForCharacter(gameState, 'princess', sceneData),
                helper: this.getChoicesForCharacter(gameState, 'helper', sceneData)
            },
            stats: JSON.parse(JSON.stringify(gameState.stats)), // –ì–ª—É–±–æ–∫–∞—è –∫–æ–ø–∏—è
            currentTurn: gameState.turnOrder,
            chapter: gameState.chapter,
            location: gameState.location,
            npcsPresent: gameState.npcsPresent,
            activeOutfitRequest: this.getActiveOutfitRequest(roomId) // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ
        };

        return gameData;
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    generateRequestId() {
        return Math.random().toString(36).substring(2, 15);
    }

    getCharacterName(character) {
        return character === 'princess' ? '–ö–Ω—è–∂–Ω–∞' : '–ü–æ–º–æ—â–Ω–∏—Ü–∞';
    }

    getOutfitName(outfitId) {
        const outfitNames = {
            'nightgown': '–ù–æ—á–Ω–∞—è —Ä—É–±–∞—à–∫–∞',
            'princess_dress': '–ö–Ω—è–∂–µ—Å–∫–æ–µ –ø–ª–∞—Ç—å–µ',
            'common_dress': '–ü—Ä–æ—Å—Ç–æ–µ –ø–ª–∞—Ç—å–µ',
            'court_dress': '–ü—Ä–∏–¥–≤–æ—Ä–Ω–æ–µ –ø–ª–∞—Ç—å–µ'
        };
        return outfitNames[outfitId] || outfitId;
    }

    getNPCsForLocation(location) {
        const npcsByLocation = {
            'princess_chamber': [], // –ù–∏–∫–æ–≥–æ –Ω–µ—Ç - –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–¥–µ–≤–∞—Ç—å—Å—è
            'throne_room': ['–ö–æ—Ä–æ–ª—å', '–ö–æ—Ä–æ–ª–µ–≤–∞', '–°—Ç—Ä–∞–∂–Ω–∏–∫–∏'],
            'kitchen': ['–ü–æ–≤–∞—Ä', '–°–ª—É–≥–∏'],
            'garden': [],
            'armory': ['–û—Ä—É–∂–µ–π–Ω–∏–∫']
        };
        return npcsByLocation[location] || [];
    }

    removeGame(roomId) {
        this.games.delete(roomId);
        this.outfitRequests.delete(roomId);
    }
}

module.exports = CoopGameLogic;
