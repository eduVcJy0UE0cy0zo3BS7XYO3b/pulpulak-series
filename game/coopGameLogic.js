const CoopStoryData = require('./coopStoryData');

class CoopGameLogic {
    constructor() {
        this.games = new Map(); // roomId -> gameState
    }

    startGame(roomId, players) {
	const gameData = {
	    roomId: data.roomId,
	    players: room.players,
	    scene: {
		title: "–£—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ",
		text: `–£—Ç—Ä–µ–Ω–Ω–∏–π —Å–≤–µ—Ç –ø—Ä–æ–±–∏–≤–∞–µ—Ç—Å—è —Å–∫–≤–æ–∑—å —Ç—è–∂–µ–ª—ã–µ —à—Ç–æ—Ä—ã –∫–Ω—è–∂–µ—Å–∫–æ–π —Å–ø–∞–ª—å–Ω–∏. 
        
        –ö–Ω—è–∂–Ω–∞ –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è –∏ –≤–∏–¥–∏—Ç —Ä—è–¥–æ–º –Ω–µ–∑–Ω–∞–∫–æ–º—É—é –¥–µ–≤—É—à–∫—É, –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂—É—é –Ω–∞ –Ω–µ—ë. 
        –î–µ–≤—É—à–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Å–µ—Å—Ç—Ä–æ–π –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞–∫.
        
        üí° <strong>–í –∫–æ–º–Ω–∞—Ç–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç –∫—Ä–æ–º–µ –≤–∞—Å –¥–≤–æ–∏—Ö! –ú–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å—Å—è –æ–¥–µ–∂–¥–æ–π.</strong>`
	    },
	    choices: {
		princess: [
		    {
			id: "princess_greet",
			text: "–ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å",
			description: "–¢–µ–ø–ª–æ –ø–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è —Å '—Å–µ—Å—Ç—Ä–æ–π'"
		    },
		    {
			id: "princess_suspicious",
			text: "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –æ—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è",
			description: "–ß—Ç–æ-—Ç–æ –∫–∞–∂–µ—Ç—Å—è —Å—Ç—Ä–∞–Ω–Ω—ã–º..."
		    }
		],
		helper: [
		    {
			id: "helper_explain",
			text: "–û–±—ä—è—Å–Ω–∏—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é",
			description: "–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –∏ –≤–æ–π–Ω—É"
		    },
		    {
			id: "helper_magic",
			text: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞–≥–∏—é",
			description: "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–∞–≥–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä—å–≥–∏"
		    }
		]
	    },
	    stats: {
		princess: {
		    outfit: 'nightgown', // –Ω–æ—á–Ω–∞—è —Ä—É–±–∞—à–∫–∞
		    loyalty: 50
		},
		helper: {
		    outfit: 'common_dress', // –ø—Ä–æ—Å—Ç–æ–µ –ø–ª–∞—Ç—å–µ  
		    trustLevel: 75
		}
	    },
	    currentTurn: 'princess',
	    chapter: 1,
	    location: 'princess_chamber',
	    npcsPresent: [] // –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç - –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –æ–¥–µ–∂–¥—É
	};

        this.games.set(roomId, gameState);
        return this.getGameData(roomId);
    }

    makeChoice(roomId, playerId, choiceId, character) {
        const gameState = this.games.get(roomId);
        if (!gameState) {
            return { success: false, message: "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" };
        }

        const playerRole = this.getPlayerRole(gameState, playerId);
        if (playerRole !== character) {
            return { success: false, message: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º" };
        }

        const result = this.processChoice(gameState, choiceId, character);
        if (result.success) {
            return {
                success: true,
                gameData: this.getGameData(roomId),
                message: result.message
            };
        }

        return result;
    }

    processChoice(gameState, choiceId, character) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –æ–¥–µ–∂–¥—ã
        if (choiceId === 'switch_outfits') {
            return this.handleOutfitSwitch(gameState, character);
        }

        const sceneData = CoopStoryData.getScene(gameState.currentScene);
        const choice = sceneData.choices[character]?.find(c => c.id === choiceId);
        
        if (!choice) {
            return { success: false, message: "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä" };
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –≤—ã–±–æ—Ä–∞
        if (choice.effects) {
            this.applyEffects(gameState, choice.effects, character);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–µ–Ω—è–µ—Ç—Å—è –ª–∏ —Å—Ü–µ–Ω–∞
        if (choice.nextScene) {
            gameState.currentScene = choice.nextScene;
        }

        // –ú–µ–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–∞
        this.switchTurn(gameState);

        return { 
            success: true, 
            message: choice.resultText || "–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω"
        };
    }

    handleOutfitSwitch(gameState, character) {
	if (!this.canSwitchOutfits(gameState)) {
            return { 
		success: false, 
		message: "–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–æ–¥–µ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö!" 
            };
	}

	// –ú–µ–Ω—è–µ–º –Ω–∞—Ä—è–¥—ã –º–µ—Å—Ç–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É—è –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é
	const { princess, helper } = gameState.stats;
	[princess.outfit, helper.outfit] = [helper.outfit, princess.outfit];

	// –ù–µ–±–æ–ª—å—à–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ –¥–æ–≤–µ—Ä–∏—è –∑–∞ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
	helper.trustLevel = Math.min(100, helper.trustLevel + 5);
	princess.loyalty = Math.min(100, princess.loyalty + 5);

	// –ù–ï –º–µ–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–∞ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
	// this.switchTurn(gameState); - —É–±–∏—Ä–∞–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É

	const characterNames = {
            'princess': '–ö–Ω—è–∂–Ω–∞',
            'helper': '–ü–æ–º–æ—â–Ω–∏—Ü–∞'
	};

	return {
            success: true,
            message: `${characterNames[character]} –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∞ –ø–æ–º–µ–Ω—è—Ç—å—Å—è –æ–¥–µ–∂–¥–æ–π. –¢–µ–ø–µ—Ä—å –æ–Ω–∏ –≤—ã–≥–ª—è–¥—è—Ç –ø–æ-–¥—Ä—É–≥–æ–º—É! –ö–Ω—è–∂–Ω–∞ –Ω–æ—Å–∏—Ç ${this.getOutfitName(princess.outfit)}, –∞ –ø–æ–º–æ—â–Ω–∏—Ü–∞ - ${this.getOutfitName(helper.outfit)}.`
	};
    }

    canSwitchOutfits(gameState) {
	// –ú–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –æ–¥–µ–∂–¥—É —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç –∫—Ä–æ–º–µ –≥–µ—Ä–æ–∏–Ω—å
	console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω—ã –æ–¥–µ–∂–¥—ã:', {
            location: gameState.location,
            npcsPresent: gameState.npcsPresent,
            canSwitch: gameState.npcsPresent.length === 0
	});
	return gameState.npcsPresent.length === 0;
    }

    applyEffects(gameState, effects, character) {
        Object.keys(effects).forEach(effect => {
            const value = effects[effect];
            
            switch (effect) {
            case 'loyalty':
                gameState.stats.princess.loyalty = Math.max(0, Math.min(100, 
									gameState.stats.princess.loyalty + value));
                break;
            case 'trustLevel':
                gameState.stats.helper.trustLevel = Math.max(0, Math.min(100, 
									 gameState.stats.helper.trustLevel + value));
                break;
            case 'outfit':
                if (character === 'princess') {
                    gameState.stats.princess.outfit = value;
                } else if (character === 'helper') {
                    gameState.stats.helper.outfit = value;
                }
                break;
            case 'flag':
                gameState.flags[value] = true;
                break;
            case 'location':
                gameState.location = value;
                // –ü—Ä–∏ —Å–º–µ–Ω–µ –ª–æ–∫–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ NPC
                gameState.npcsPresent = this.getNPCsForLocation(value);
                break;
            }
        });
    }

    getNPCsForLocation(location) {
        const locationNPCs = {
            'princess_chamber': [], // —Ç–æ–ª—å–∫–æ –∫–Ω—è–∂–Ω–∞ –∏ –ø–æ–º–æ—â–Ω–∏—Ü–∞
            'throne_room': ['guards', 'courtiers'],
            'kitchen': ['cook', 'servants'],
            'garden': ['gardener'],
            'armory': ['guard_captain'],
            'village_square': ['villagers', 'merchants']
        };
        
        return locationNPCs[location] || [];
    }

    switchTurn(gameState) {
        gameState.turnOrder = gameState.turnOrder === 'princess' ? 'helper' : 'princess';
    }

    getGameData(roomId) {
        const gameState = this.games.get(roomId);
        if (!gameState) return null;

        const sceneData = CoopStoryData.getScene(gameState.currentScene);
        
        return {
            roomId: roomId,
            players: gameState.players,
            scene: {
                title: sceneData.title,
                text: sceneData.text
            },
            choices: {
                princess: this.getChoicesForCharacter(gameState, 'princess', sceneData),
                helper: this.getChoicesForCharacter(gameState, 'helper', sceneData)
            },
            stats: gameState.stats,
            currentTurn: gameState.turnOrder,
            chapter: gameState.chapter,
            location: gameState.location,
            npcsPresent: gameState.npcsPresent
        };
    }

    getChoicesForCharacter(gameState, character, sceneData) {
	let choices = [];
	
	// –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–±–æ—Ä—ã —Å—Ü–µ–Ω—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞, —á–µ–π —Ö–æ–¥)
	if (gameState.turnOrder === character) {
            choices = sceneData.choices[character] || [];
            choices = choices.filter(choice => {
		return this.isChoiceAvailable(choice, gameState, character);
            });
	}

	// –°–º–µ–Ω–∞ –æ–¥–µ–∂–¥—ã –¥–æ—Å—Ç—É–ø–Ω–∞ –í–°–ï–ì–î–ê, –µ—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–∞–µ–¥–∏–Ω–µ
	if (this.canSwitchOutfits(gameState)) {
            choices.push({
		id: 'switch_outfits',
		text: 'üëó –ü–æ–º–µ–Ω—è—Ç—å—Å—è –æ–¥–µ–∂–¥–æ–π',
		description: `${character === 'princess' ? '–ö–Ω—è–∂–Ω–∞' : '–ü–æ–º–æ—â–Ω–∏—Ü–∞'} —Å–µ–π—á–∞—Å –≤: ${this.getOutfitName(gameState.stats[character].outfit)}`,
		isOutfitChange: true
            });
	}

	return choices;
    }

    getOutfitName(outfitId) {
        const outfitNames = {
            'nightgown': '–ù–æ—á–Ω–∞—è —Ä—É–±–∞—à–∫–∞',
            'princess_dress': '–ö–Ω—è–∂–µ—Å–∫–æ–µ –ø–ª–∞—Ç—å–µ',
            'common_dress': '–ü—Ä–æ—Å—Ç–æ–µ –ø–ª–∞—Ç—å–µ',
            'court_dress': '–ü—Ä–∏–¥–≤–æ—Ä–Ω–æ–µ –ø–ª–∞—Ç—å–µ'
        };
        return outfitNames[outfitId] || outfitId;
    }

    isChoiceAvailable(choice, gameState, character) {
        if (!choice.requirements) return true;

        return choice.requirements.every(req => {
            switch (req.type) {
            case 'outfit':
                return gameState.stats[character].outfit === req.value;
            case 'loyalty':
                return gameState.stats.princess.loyalty >= req.value;
            case 'trustLevel':
                return gameState.stats.helper.trustLevel >= req.value;
            case 'flag':
                return gameState.flags[req.value];
            case 'npcsAbsent':
                return gameState.npcsPresent.length === 0;
            default:
                return true;
            }
        });
    }

    getPlayerRole(gameState, playerId) {
        if (gameState.players.princess?.id === playerId) {
            return 'princess';
        }
        if (gameState.players.helper?.id === playerId) {
            return 'helper';
        }
        return null;
    }

    removeGame(roomId) {
        this.games.delete(roomId);
    }
}

module.exports = CoopGameLogic;
