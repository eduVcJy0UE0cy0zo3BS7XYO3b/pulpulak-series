const CoopStoryData = require('./coopStoryData');
const LocationData = require('./locationData');
const NPCData = require('./npcData');

class CoopGameLogic {
    constructor() {
        this.games = new Map(); // roomId -> gameState
        this.outfitRequests = new Map(); // roomId -> activeRequest
    }

    // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
    startGame(roomId, players) {
        const gameState = {
            roomId: roomId,
            players: players,
            currentScene: 'coop_awakening',
            turnOrder: 'princess', 
            chapter: 1,
            // –£–±–∏—Ä–∞–µ–º –æ–±—â—É—é –ª–æ–∫–∞—Ü–∏—é, —Ç–µ–ø–µ—Ä—å —É –∫–∞–∂–¥–æ–≥–æ —Å–≤–æ—è
            stats: {
                princess: {
                    outfit: 'princess_dress', // –ö–Ω—è–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –≤ –∫–Ω—è–∂–µ—Å–∫–æ–º –ø–ª–∞—Ç—å–µ
                    awareness: 0,
                    loyalty: {},
                    inventory: [],
                    location: 'princess_chamber', // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è
                    npcsPresent: [] // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ NPC
                },
                helper: {
                    outfit: 'common_dress',
                    awareness: 0,
                    secrets_revealed: 0,
                    inventory: ['translation_earrings', 'voice_medallion'],
                    location: 'princess_chamber', // –ù–∞—á–∏–Ω–∞—é—Ç –≤–º–µ—Å—Ç–µ
                    npcsPresent: [] // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ NPC
                }
            }
        };

        this.games.set(roomId, gameState);
        return this.getGameData(roomId);
    }

    // –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω –æ–¥–µ–∂–¥–æ–π
    createOutfitSwapRequest(roomId, fromPlayerId, fromCharacter) {
        const gameState = this.games.get(roomId);
        if (!gameState) {
            return { success: false, message: "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–æ–¥–µ–≤–∞—Ç—å—Å—è (–Ω–µ—Ç –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö)
        if (!this.canSwitchOutfits(gameState, fromCharacter)) {
            return { 
                success: false, 
                message: "–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–æ–¥–µ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö!" 
            };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        if (this.outfitRequests.has(roomId)) {
            return { 
                success: false, 
                message: "–£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω –æ–¥–µ–∂–¥–æ–π" 
            };
        }

        const targetCharacter = fromCharacter === 'princess' ? 'helper' : 'princess';
        const targetPlayer = gameState.players[targetCharacter];

        if (!targetPlayer) {
            return { success: false, message: "–í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" };
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
        const request = {
            id: this.generateRequestId(),
            roomId: roomId,
            fromPlayerId: fromPlayerId,
            fromCharacter: fromCharacter,
            targetPlayerId: targetPlayer.id,
            targetCharacter: targetCharacter,
            timestamp: Date.now()
        };

        this.outfitRequests.set(roomId, request);

        return { 
            success: true, 
            request: request,
            message: `${this.getCharacterName(fromCharacter)} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å—Å—è –æ–¥–µ–∂–¥–æ–π`
        };
    }

    // –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ–±–º–µ–Ω–∞ –æ–¥–µ–∂–¥–æ–π
    respondToOutfitSwapRequest(roomId, playerId, accepted) {
        const request = this.outfitRequests.get(roomId);
        if (!request) {
            return { success: false, message: "–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" };
        }

        if (request.targetPlayerId !== playerId) {
            return { success: false, message: "–≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –Ω–µ –¥–ª—è –≤–∞—Å" };
        }

        // –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        this.outfitRequests.delete(roomId);

        if (!accepted) {
            return { 
                success: true, 
                declined: true,
                message: `${this.getCharacterName(request.targetCharacter)} –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –æ–¥–µ–∂–¥–æ–π`
            };
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–º–µ–Ω –æ–¥–µ–∂–¥–æ–π
        const gameState = this.games.get(roomId);
        if (!gameState) {
            return { success: false, message: "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" };
        }

        if (!this.canSwitchOutfits(gameState, request.fromCharacter)) {
            return { 
                success: false, 
                message: "–û–±—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å - –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–æ–¥–µ–≤–∞—Ç—å—Å—è!" 
            };
        }

        // –ú–µ–Ω—è–µ–º –Ω–∞—Ä—è–¥—ã –º–µ—Å—Ç–∞–º–∏
        const { princess, helper } = gameState.stats;
        const tempOutfit = princess.outfit;
        princess.outfit = helper.outfit;
        helper.outfit = tempOutfit;


        return {
            success: true,
            accepted: true,
            message: `–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –ø–æ–º–µ–Ω—è–ª–∏—Å—å –æ–¥–µ–∂–¥–æ–π! –ö–Ω—è–∂–Ω–∞ —Ç–µ–ø–µ—Ä—å –≤: ${this.getOutfitName(princess.outfit)}, –ø–æ–º–æ—â–Ω–∏—Ü–∞ –≤: ${this.getOutfitName(helper.outfit)}`
        };
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–æ–¥–µ–≤–∞—Ç—å—Å—è
    canSwitchOutfits(gameState, character) {
        const characterStats = gameState.stats[character];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç NPC —É —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        const noNpcs = !characterStats.npcsPresent || characterStats.npcsPresent.length === 0;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–∫–∞—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–æ–¥–µ–≤–∞—Ç—å—Å—è
        const locationAllows = LocationData.canChangeOutfit(characterStats.location);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –æ–¥–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ (–¥–ª—è –æ–±–º–µ–Ω–∞)
        const otherCharacter = character === 'princess' ? 'helper' : 'princess';
        const sameLocation = characterStats.location === gameState.stats[otherCharacter].location;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –≤—Ç–æ—Ä–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Ç–æ–∂–µ –Ω–µ—Ç NPC
        const otherHasNoNpcs = !gameState.stats[otherCharacter].npcsPresent || 
                              gameState.stats[otherCharacter].npcsPresent.length === 0;
        
        return noNpcs && locationAllows && sameLocation && otherHasNoNpcs;
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—ã–±–æ—Ä—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    getChoicesForCharacter(gameState, character, sceneData) {
        let choices = [];
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–±–æ—Ä—ã —Å—Ü–µ–Ω—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞, —á–µ–π —Ö–æ–¥)
        if (gameState.turnOrder === character) {
            choices = sceneData.choices[character] || [];
            choices = choices.filter(choice => {
                return this.isChoiceAvailable(choice, gameState, character);
            });
        }

        // –ö–ù–û–ü–ö–ê –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –æ–±–º–µ–Ω–∞ –æ–¥–µ–∂–¥–æ–π –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –û–ë–û–ò–• –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        // –µ—Å–ª–∏ –æ–Ω–∏ –Ω–∞–µ–¥–∏–Ω–µ –∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        if (this.canSwitchOutfits(gameState, character) && !this.outfitRequests.has(gameState.roomId)) {
            const otherCharacter = character === 'princess' ? '–ø–æ–º–æ—â–Ω–∏—Ü–µ' : '–∫–Ω—è–∂–Ω–µ';
            choices.push({
                id: 'request_outfit_swap',
                text: 'üëó –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–º–µ–Ω—è—Ç—å—Å—è –æ–¥–µ–∂–¥–æ–π',
                description: `–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å ${otherCharacter} –ø–æ–º–µ–Ω—è—Ç—å—Å—è –Ω–∞—Ä—è–¥–∞–º–∏`,
                isOutfitRequest: true
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –¥–ª—è –û–ë–û–ò–• –∏–≥—Ä–æ–∫–æ–≤ (–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ)
        const movementChoices = this.getMovementChoices(gameState, character);
        choices.push(...movementChoices);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å NPC (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞, —á–µ–π —Ö–æ–¥)
        if (gameState.turnOrder === character) {
            const npcChoices = this.getNPCInteractionChoices(gameState, character);
            choices.push(...npcChoices);
        }

        return choices;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–≤ (–ù–ï –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–¥–µ–∂–¥—ã)
    makeChoice(roomId, playerId, choiceId, character) {
        const gameState = this.games.get(roomId);
        if (!gameState) {
            return { success: false, message: "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
        const playerCharacter = gameState.players[character];
        if (!playerCharacter || playerCharacter.id !== playerId) {
            return { success: false, message: "–í—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ –¥—Ä—É–≥–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º" };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å —Ö–æ–¥ —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–¥–ª—è –æ–±—ã—á–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–≤, –Ω–æ –Ω–µ –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è)
        const isMovement = choiceId.startsWith('move_to_');
        if (!isMovement && choiceId !== 'request_outfit_swap' && gameState.turnOrder !== character) {
            return { success: false, message: "–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥" };
        }

        const result = this.processChoice(gameState, choiceId, character);
        if (result.success) {
            return {
                success: true,
                gameData: this.getGameData(roomId),
                message: result.message
            };
        }

        return result;
    }

    processChoice(gameState, choiceId, character) {
        // –ó–∞–ø—Ä–æ—Å—ã –æ–¥–µ–∂–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        if (choiceId === 'request_outfit_swap') {
            return { 
                success: false, 
                message: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±–º–µ–Ω–∞ –æ–¥–µ–∂–¥–æ–π" 
            };
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
        if (choiceId.startsWith('move_to_')) {
            const targetLocation = choiceId.replace('move_to_', '');
            return this.processMovement(gameState, targetLocation, character);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å NPC
        if (choiceId.startsWith('talk_to_')) {
            const npcId = choiceId.replace('talk_to_', '');
            return this.processNPCInteraction(gameState, npcId, character);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–≤
        const sceneData = CoopStoryData.getScene(gameState.currentScene);
        const choice = sceneData.choices[character]?.find(c => c.id === choiceId);
        
        if (!choice) {
            return { success: false, message: "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä" };
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –≤—ã–±–æ—Ä–∞
        if (choice.effects) {
            this.applyEffects(gameState, choice.effects, character);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–µ–Ω—è–µ—Ç—Å—è –ª–∏ —Å—Ü–µ–Ω–∞
        if (choice.nextScene) {
            gameState.currentScene = choice.nextScene;
            
            // –ü—Ä–∏ —Å–º–µ–Ω–µ —Å—Ü–µ–Ω—ã –æ—Ç–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            this.cancelOutfitRequest(gameState.roomId);
            
            // –ü—Ä–∏ —Å–º–µ–Ω–µ —Å—Ü–µ–Ω—ã –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞
            // –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –ª–æ–∫–∞—Ü–∏–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ
        }

        // –ú–µ–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–∞
        this.switchTurn(gameState);

        return { 
            success: true, 
            message: choice.resultText || "–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω"
        };
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
    getActiveOutfitRequest(roomId) {
        return this.outfitRequests.get(roomId) || null;
    }

    // –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å 
    cancelOutfitRequest(roomId) {
        this.outfitRequests.delete(roomId);
    }

    // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã –≤—ã–±–æ—Ä–∞
    applyEffects(gameState, effects, character) {
        if (effects.outfit) {
            gameState.stats[character].outfit = effects.outfit;
        }
        if (effects.location) {
            gameState.stats[character].location = effects.location;
            gameState.stats[character].npcsPresent = this.getNPCsForLocation(effects.location);
        }
        if (effects.awareness) {
            gameState.stats[character].awareness += effects.awareness;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞
    isChoiceAvailable(choice, gameState, character) {
        // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
        return true;
    }

    // –°–º–µ–Ω–∏—Ç—å –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–∞
    switchTurn(gameState) {
        gameState.turnOrder = gameState.turnOrder === 'princess' ? 'helper' : 'princess';
    }

    // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
    getGameData(roomId) {
        const gameState = this.games.get(roomId);
        if (!gameState) return null;

        const sceneData = CoopStoryData.getScene(gameState.currentScene);
        
        // –¢–µ–ø–µ—Ä—å –ª–æ–∫–∞—Ü–∏–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        const princessLocationInfo = LocationData.getLocationInfo(gameState.stats.princess.location);
        const helperLocationInfo = LocationData.getLocationInfo(gameState.stats.helper.location);
        
        const gameData = {
            roomId: roomId,
            players: gameState.players,
            scene: {
                title: sceneData.title,
                text: sceneData.text
            },
            choices: {
                princess: this.getChoicesForCharacter(gameState, 'princess', sceneData),
                helper: this.getChoicesForCharacter(gameState, 'helper', sceneData)
            },
            stats: JSON.parse(JSON.stringify(gameState.stats)), // –ì–ª—É–±–æ–∫–∞—è –∫–æ–ø–∏—è
            currentTurn: gameState.turnOrder,
            chapter: gameState.chapter,
            // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏—è—Ö
            locations: {
                princess: princessLocationInfo,
                helper: helperLocationInfo
            },
            activeOutfitRequest: this.getActiveOutfitRequest(roomId), // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ
            currentNPCDialogue: gameState.currentNPCDialogue || null // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –¥–∏–∞–ª–æ–≥–µ —Å NPC
        };

        return gameData;
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    generateRequestId() {
        return Math.random().toString(36).substring(2, 15);
    }

    getCharacterName(character) {
        return character === 'princess' ? '–ö–Ω—è–∂–Ω–∞' : '–ü–æ–º–æ—â–Ω–∏—Ü–∞';
    }

    getOutfitName(outfitId) {
        const outfitNames = {
            'nightgown': '–ù–æ—á–Ω–∞—è —Ä—É–±–∞—à–∫–∞',
            'princess_dress': '–ö–Ω—è–∂–µ—Å–∫–æ–µ –ø–ª–∞—Ç—å–µ',
            'common_dress': '–ü—Ä–æ—Å—Ç–æ–µ –ø–ª–∞—Ç—å–µ',
            'court_dress': '–ü—Ä–∏–¥–≤–æ—Ä–Ω–æ–µ –ø–ª–∞—Ç—å–µ'
        };
        return outfitNames[outfitId] || outfitId;
    }

    getNPCsForLocation(location) {
        // –ü–æ–ª—É—á–∞–µ–º NPC –∏–∑ NPCData
        const npcs = NPCData.getNPCsForLocation(location);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        return npcs.map(npc => npc.name);
    }

    getMovementChoices(gameState, character) {
        const currentLocation = gameState.stats[character].location;
        const locationInfo = LocationData.getLocationInfo(currentLocation);
        
        if (!locationInfo) return [];
        
        const choices = [];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å–æ—Å–µ–¥–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
        locationInfo.connections.forEach(connection => {
            choices.push({
                id: `move_to_${connection.id}`,
                text: `${connection.icon} –ü–µ—Ä–µ–π—Ç–∏: ${connection.name}`,
                description: `–û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ ${connection.name}`,
                isMovement: true,
                targetLocation: connection.id
            });
        });
        
        return choices;
    }

    processMovement(gameState, targetLocation, character) {
        const characterStats = gameState.stats[character];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª–µ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–∑ —Ç–µ–∫—É—â–µ–π
        const currentConnections = LocationData.getConnections(characterStats.location);
        if (!currentConnections.includes(targetLocation)) {
            return { 
                success: false, 
                message: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ø–∞—Å—Ç—å —Ç—É–¥–∞ –æ—Ç—Å—é–¥–∞" 
            };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–∫–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const locationInfo = LocationData.getLocation(targetLocation);
        if (!locationInfo) {
            return { 
                success: false, 
                message: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è" 
            };
        }

        // –û—Ç–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –ª—é–±–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if (this.outfitRequests.has(gameState.roomId)) {
            this.cancelOutfitRequest(gameState.roomId);
        }

        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        characterStats.location = targetLocation;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º NPC –¥–ª—è –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        characterStats.npcsPresent = this.getNPCsForLocation(targetLocation);

        // –ù–ï –º–µ–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏
        // –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞–º —Å–≤–æ–±–æ–¥–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è

        return { 
            success: true, 
            message: `${character === 'princess' ? '–ö–Ω—è–∂–Ω–∞' : '–ü–æ–º–æ—â–Ω–∏—Ü–∞'} –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∞—Å—å –≤ ${locationInfo.name}`
        };
    }

    removeGame(roomId) {
        this.games.delete(roomId);
        this.outfitRequests.delete(roomId);
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—ã–±–æ—Ä—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å NPC
    getNPCInteractionChoices(gameState, character) {
        const choices = [];
        const characterLocation = gameState.stats[character].location;
        const npcs = NPCData.getNPCsForLocation(characterLocation);
        
        npcs.forEach(npc => {
            choices.push({
                id: `talk_to_${npc.id}`,
                text: `üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å ${npc.name}`,
                description: npc.description,
                isNPCInteraction: true,
                npcId: npc.id
            });
        });
        
        return choices;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å NPC
    processNPCInteraction(gameState, npcId, character) {
        const npc = NPCData.getNPC(npcId);
        if (!npc) {
            return { success: false, message: "NPC –Ω–µ –Ω–∞–π–¥–µ–Ω" };
        }

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Ä—è–¥ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        const outfit = gameState.stats[character].outfit;
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Ä—è–¥–∞
        const dialogue = NPCData.getNPCDialogue(npcId, outfit);
        if (!dialogue) {
            return { success: false, message: "–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω" };
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –¥–∏–∞–ª–æ–≥–µ
        gameState.currentNPCDialogue = {
            npcId: npcId,
            npcName: npc.name,
            greeting: dialogue.greeting,
            choices: dialogue.choices,
            attitude: NPCData.getNPCAttitude(npcId, outfit),
            activeCharacter: character // –ö—Ç–æ –≤–µ–¥–µ—Ç –¥–∏–∞–ª–æ–≥
        };

        return { 
            success: true, 
            showDialogue: true,
            message: `–ù–∞—á–∞—Ç –¥–∏–∞–ª–æ–≥ —Å ${npc.name}`
        };
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –¥–∏–∞–ª–æ–≥–µ —Å NPC
    processNPCDialogueChoice(roomId, playerId, choiceId, character) {
        const gameState = this.games.get(roomId);
        if (!gameState) {
            return { success: false, message: "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
        const playerCharacter = gameState.players[character];
        if (!playerCharacter || playerCharacter.id !== playerId) {
            return { success: false, message: "–í—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ –¥—Ä—É–≥–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º" };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
        if (!gameState.currentNPCDialogue) {
            return { success: false, message: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞" };
        }

        // –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        const choice = gameState.currentNPCDialogue.choices.find(c => c.id === choiceId);
        if (!choice) {
            return { success: false, message: "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä" };
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –≤—ã–±–æ—Ä–∞
        if (choice.effects) {
            if (choice.effects.item) {
                gameState.stats[character].inventory.push(choice.effects.item);
            }
            if (choice.effects.info) {
                gameState.stats[character][choice.effects.info] = true;
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º attitude –¥–æ –æ—á–∏—Å—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞
        const attitude = gameState.currentNPCDialogue?.attitude;

        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥
        gameState.currentNPCDialogue = null;

        // –ú–µ–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–∞
        this.switchTurn(gameState);

        return { 
            success: true, 
            message: choice.response,
            type: attitude === 'hostile' ? 'warning' : 'success'
        };
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å NPC
    closeNPCDialogue(roomId, playerId) {
        const gameState = this.games.get(roomId);
        if (!gameState) {
            return { success: false, message: "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –∏ –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –µ–≥–æ –∑–∞–∫—Ä—ã—Ç—å
        if (!gameState.currentNPCDialogue) {
            return { success: false, message: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞" };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –∑–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ (—Ç–æ—Ç, –∫—Ç–æ –µ–≥–æ –Ω–∞—á–∞–ª)
        const activeCharacter = gameState.currentNPCDialogue.activeCharacter;
        const playerCharacter = gameState.players[activeCharacter];
        
        if (!playerCharacter || playerCharacter.id !== playerId) {
            return { success: false, message: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥" };
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
        gameState.currentNPCDialogue = null;

        return { 
            success: true, 
            message: "–î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç"
        };
    }
}

module.exports = CoopGameLogic;
