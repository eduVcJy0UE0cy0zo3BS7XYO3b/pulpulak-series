// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Scheme —Ç–µ—Å—Ç–æ–≤ –∏–∑ Node.js
// game/test-runner.js

const fs = require('fs');
const path = require('path');
const BiwaScheme = require('biwascheme');

class SchemeTestRunner {
  constructor() {
    this.interpreter = new BiwaScheme.Interpreter();
    this.setupJavaScriptBridge();
  }

  setupJavaScriptBridge() {
    // –ú–æ—Å—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ Scheme –≤ JavaScript
    this.interpreter.define('js-log', (message) => {
      console.log(message);
      return message;
    });

    // –ú–æ—Å—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–∏
    this.interpreter.define('js-symbol->string', (sym) => {
      return sym.toString();
    });

    // –ú–æ—Å—Ç –¥–ª—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫
    this.interpreter.define('js-string-append', (...strings) => {
      return strings.join('');
    });

    // –ú–æ—Å—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–∏—Å–µ–ª –≤ —Å—Ç—Ä–æ–∫–∏
    this.interpreter.define('js-number->string', (num) => {
      return num.toString();
    });

    // –ú–æ—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (display)
    this.interpreter.define('display', (message) => {
      process.stdout.write(message.toString());
    });

    // –ú–æ—Å—Ç –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    this.interpreter.define('newline', () => {
      process.stdout.write('\n');
    });

    // –ú–æ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤
    this.interpreter.define('string?', (obj) => {
      return typeof obj === 'string';
    });

    this.interpreter.define('symbol?', (obj) => {
      return obj && obj.constructor && obj.constructor.name === 'BiwaSymbol';
    });

    this.interpreter.define('number?', (obj) => {
      return typeof obj === 'number';
    });

    this.interpreter.define('boolean?', (obj) => {
      return typeof obj === 'boolean';
    });

    this.interpreter.define('list?', (obj) => {
      return Array.isArray(obj);
    });

    this.interpreter.define('null?', (obj) => {
      return obj === null || obj === undefined || (Array.isArray(obj) && obj.length === 0);
    });

    // –ú–æ—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è hash-table (–∏—Å–ø–æ–ª—å–∑—É–µ–º Map)
    this.interpreter.define('make-hash-table', () => {
      return new Map();
    });

    this.interpreter.define('hash-table-set!', (table, key, value) => {
      table.set(key, value);
      return value;
    });

    this.interpreter.define('hash-table-ref/default', (table, key, defaultValue) => {
      return table.has(key) ? table.get(key) : defaultValue;
    });

    // –ú–æ—Å—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
    this.interpreter.define('current-time', () => {
      return Date.now();
    });
  }

  loadSchemeFile(filePath) {
    try {
      const content = fs.readFileSync(filePath, 'utf8');
      this.interpreter.evaluate(content);
      return true;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
      return false;
    }
  }

  loadTestFramework() {
    const frameworkPath = path.join(__dirname, 'test-framework.scm');
    return this.loadSchemeFile(frameworkPath);
  }

  loadGameLogic() {
    const gamePath = path.join(__dirname, 'pulpulak-game.scm');
    return this.loadSchemeFile(gamePath);
  }

  loadTestSuite(suiteName) {
    const testPath = path.join(__dirname, 'tests', `${suiteName}.test.scm`);
    return this.loadSchemeFile(testPath);
  }

  runSchemeFunction(functionName, ...args) {
    try {
      const result = this.interpreter.evaluate(`(${functionName}${args.length > 0 ? ' ' + args.map(arg => JSON.stringify(arg)).join(' ') : ''})`);
      return result;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ ${functionName}:`, error.message);
      return null;
    }
  }

  async runAllTests() {
    console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Scheme –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...\n');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã
    console.log('üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');
    
    if (!this.loadGameLogic()) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä–æ–≤—É—é –ª–æ–≥–∏–∫—É');
    }
    console.log('‚úÖ –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');

    if (!this.loadTestFramework()) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫');
    }
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –∑–∞–≥—Ä—É–∂–µ–Ω');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞–±–æ—Ä—ã
    const testSuites = ['core-functions', 'game-logic', 'integration'];
    let allLoaded = true;

    for (const suite of testSuites) {
      if (!this.loadTestSuite(suite)) {
        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç—ã: ${suite}`);
        allLoaded = false;
      } else {
        console.log(`‚úÖ –¢–µ—Å—Ç—ã ${suite} –∑–∞–≥—Ä—É–∂–µ–Ω—ã`);
      }
    }

    if (!allLoaded) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞–±–æ—Ä—ã');
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
    const runTestsPath = path.join(__dirname, 'tests', 'run-tests.scm');
    if (!this.loadSchemeFile(runTestsPath)) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤');
    }
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞\n');

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    console.log('üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤...\n');
    
    try {
      const result = this.runSchemeFunction('run-all-tests');
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –≤—ã—Ö–æ–¥–∞
      if (result && Array.isArray(result)) {
        let totalFailed = 0;
        for (const suiteResult of result) {
          if (Array.isArray(suiteResult) && suiteResult.length >= 4) {
            totalFailed += suiteResult[3] || 0; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
          }
        }
        
        if (totalFailed > 0) {
          console.log(`\n‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —Å –æ—à–∏–±–∫–∞–º–∏: ${totalFailed} –Ω–µ—É–¥–∞—á–Ω—ã—Ö`);
          process.exit(1);
        } else {
          console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
          process.exit(0);
        }
      } else {
        console.log('\n‚úÖ –¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã');
        process.exit(0);
      }
    } catch (error) {
      console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error.message);
      process.exit(1);
    }
  }

  async runQuickTests() {
    console.log('‚ö° –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤...\n');
    
    if (!this.loadGameLogic() || !this.loadTestFramework()) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã');
    }

    this.loadTestSuite('core-functions');
    
    const runTestsPath = path.join(__dirname, 'tests', 'run-tests.scm');
    this.loadSchemeFile(runTestsPath);

    try {
      this.runSchemeFunction('run-quick-tests');
      console.log('\n‚úÖ –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
    } catch (error) {
      console.error('\n‚ùå –û—à–∏–±–∫–∞ –≤ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–∞—Ö:', error.message);
      process.exit(1);
    }
  }

  async runSpecificTest(testType) {
    console.log(`üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: ${testType}\n`);
    
    if (!this.loadGameLogic() || !this.loadTestFramework()) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã');
    }

    this.loadTestSuite(testType);
    
    const runTestsPath = path.join(__dirname, 'tests', 'run-tests.scm');
    this.loadSchemeFile(runTestsPath);

    try {
      let functionName;
      switch (testType) {
        case 'core-functions':
          functionName = 'run-all-core-tests';
          break;
        case 'game-logic':
          functionName = 'run-all-game-logic-tests';
          break;
        case 'integration':
          functionName = 'run-all-integration-tests';
          break;
        default:
          throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–æ–≤: ${testType}`);
      }
      
      this.runSchemeFunction(functionName);
      console.log(`\n‚úÖ –¢–µ—Å—Ç—ã ${testType} –∑–∞–≤–µ—Ä—à–µ–Ω—ã`);
    } catch (error) {
      console.error(`\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö ${testType}:`, error.message);
      process.exit(1);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Jest –∏–ª–∏ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
async function runSchemeTests(testType = 'all') {
  const runner = new SchemeTestRunner();
  
  try {
    switch (testType) {
      case 'quick':
        await runner.runQuickTests();
        break;
      case 'core':
        await runner.runSpecificTest('core-functions');
        break;
      case 'logic':
        await runner.runSpecificTest('game-logic');
        break;
      case 'integration':
        await runner.runSpecificTest('integration');
        break;
      case 'all':
      default:
        await runner.runAllTests();
        break;
    }
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö
module.exports = {
  SchemeTestRunner,
  runSchemeTests
};

// –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const testType = process.argv[2] || 'all';
  runSchemeTests(testType);
}