const { produce, enableMapSet, setAutoFreeze, enablePatches } = require('immer');

// –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Map/Set –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤ –±—É–¥—É—â–µ–º
enableMapSet();

// –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–∞—Ç—á–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
enablePatches();

// –í production –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
if (process.env.NODE_ENV === 'production') {
    setAutoFreeze(true);
}

class ImmerStateManager {
    constructor() {
        this.enablePatches = process.env.NODE_ENV === 'development';
        this.patchListeners = [];
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Immer
     * @param {Object} currentState - –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     * @param {Function} updater - –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è draft —Å–æ—Å—Ç–æ—è–Ω–∏—è
     * @returns {Object} –ù–æ–≤–æ–µ –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    updateState(currentState, updater) {
        return produce(currentState, updater, (patches, inversePatches) => {
            if (this.enablePatches) {
                console.log('üîÑ State patches:', patches);
                console.log('‚Ü©Ô∏è Inverse patches:', inversePatches);
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
                this.patchListeners.forEach(listener => {
                    listener(patches, inversePatches);
                });
            }
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ–π –∫–æ–ø–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     * @param {Object} state - –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     * @returns {Object} –ò–º–º—É—Ç–∞–±–µ–ª—å–Ω–∞—è –∫–æ–ø–∏—è
     */
    createDraft(state) {
        return produce(state, draft => draft);
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
     * @param {Function} listener - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ç—á–µ–π
     */
    addPatchListener(listener) {
        this.patchListeners.push(listener);
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
     * @param {Function} listener - –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
     */
    removePatchListener(listener) {
        const index = this.patchListeners.indexOf(listener);
        if (index > -1) {
            this.patchListeners.splice(index, 1);
        }
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞—Ç—á–∏ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)
     * @param {Object} state - –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     * @param {Array} patches - –ú–∞—Å—Å–∏–≤ –ø–∞—Ç—á–µ–π
     * @returns {Object} –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    applyPatches(state, patches) {
        return produce(state, draft => {
            patches.forEach(patch => {
                if (patch.op === 'replace') {
                    this.setPath(draft, patch.path, patch.value);
                } else if (patch.op === 'add') {
                    this.setPath(draft, patch.path, patch.value);
                } else if (patch.op === 'remove') {
                    this.removePath(draft, patch.path);
                }
            });
        });
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –ø—É—Ç–∏ –≤ –æ–±—ä–µ–∫—Ç–µ
     * @param {Object} obj - –û–±—ä–µ–∫—Ç
     * @param {Array} path - –ü—É—Ç—å –∫ —Å–≤–æ–π—Å—Ç–≤—É
     * @param {*} value - –ó–Ω–∞—á–µ–Ω–∏–µ
     */
    setPath(obj, path, value) {
        let current = obj;
        for (let i = 0; i < path.length - 1; i++) {
            current = current[path[i]];
        }
        current[path[path.length - 1]] = value;
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –ø—É—Ç–∏ –≤ –æ–±—ä–µ–∫—Ç–µ
     * @param {Object} obj - –û–±—ä–µ–∫—Ç
     * @param {Array} path - –ü—É—Ç—å –∫ —Å–≤–æ–π—Å—Ç–≤—É
     */
    removePath(obj, path) {
        let current = obj;
        for (let i = 0; i < path.length - 1; i++) {
            current = current[path[i]];
        }
        delete current[path[path.length - 1]];
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω—ã–º (–∑–∞–º–æ—Ä–æ–∂–µ–Ω)
     * @param {Object} obj - –û–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @returns {boolean} true –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω
     */
    isFrozen(obj) {
        return Object.isFrozen(obj);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
     * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    getStats() {
        return {
            patchListenersCount: this.patchListeners.length,
            patchingEnabled: this.enablePatches,
            autoFreezeEnabled: process.env.NODE_ENV === 'production'
        };
    }
}

module.exports = ImmerStateManager;