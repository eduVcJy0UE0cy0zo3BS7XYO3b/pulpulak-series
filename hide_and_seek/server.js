const express = require('express');
const http = require('http');
const socketIo = require('socket.io');

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

app.use(express.static('public'));

const rooms = {};

// –ò–≥—Ä–∞ –≤ –ø—Ä—è—Ç–∫–∏
const hideAndSeekGame = {
    locations: [
	{ id: 'closet', name: 'üö™ –®–∫–∞—Ñ', description: '–¢–µ–º–Ω—ã–π —à–∫–∞—Ñ —Å –æ–¥–µ–∂–¥–æ–π' },
	{ id: 'bed', name: 'üõèÔ∏è –ü–æ–¥ –∫—Ä–æ–≤–∞—Ç—å—é', description: '–ü—ã–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –ø–æ–¥ –∫—Ä–æ–≤–∞—Ç—å—é' },
	{ id: 'kitchen', name: 'üç≥ –ö—É—Ö–æ–Ω–Ω—ã–π —à–∫–∞—Ñ—á–∏–∫', description: '–®–∫–∞—Ñ—á–∏–∫ —Å –ø–æ—Å—É–¥–æ–π' },
	{ id: 'bathroom', name: 'üöø –ó–∞ —à—Ç–æ—Ä–∫–æ–π –≤ –≤–∞–Ω–Ω–æ–π', description: '–ó–∞ –∑–∞–Ω–∞–≤–µ—Å–∫–æ–π –¥—É—à–∞' },
	{ id: 'attic', name: 'ü™ú –ß–µ—Ä–¥–∞–∫', description: '–°—Ç–∞—Ä—ã–π –ø—ã–ª—å–Ω—ã–π —á–µ—Ä–¥–∞–∫' },
	{ id: 'basement', name: 'üî¶ –ü–æ–¥–≤–∞–ª', description: '–¢–µ–º–Ω—ã–π –ø–æ–¥–≤–∞–ª —Å –∫–æ—Ä–æ–±–∫–∞–º–∏' }
    ]
};

function cleanupRoom(roomId) {
    if (rooms[roomId]) {
	// –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–∫–µ—Ç—ã
	const activeSockets = [];
	for (const socketId of rooms[roomId].players) {
	    const socket = io.sockets.sockets.get(socketId);
	    if (socket && socket.connected) {
		activeSockets.push(socketId);
	    }
	}
	rooms[roomId].players = activeSockets;
	
	if (rooms[roomId].players.length === 0) {
	    console.log(`–ö–æ–º–Ω–∞—Ç–∞ ${roomId} —É–¥–∞–ª–µ–Ω–∞ - –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤`);
	    delete rooms[roomId];
	    return false;
	}
    }
    return true;
}

io.on('connection', (socket) => {
    console.log('–ò–≥—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:', socket.id);

    socket.on('create-room', () => {
	const roomId = Math.random().toString(36).substring(7);
	rooms[roomId] = {
	    players: [socket.id],
	    gameState: 'waiting',
	    seeker: null,
	    hider: null,
	    hideLocation: null,
	    searchAttempts: 0,
	    maxAttempts: 3,
	    searchedLocations: [],
	    gameResult: null
	};
	socket.join(roomId);
	console.log(`–ö–æ–º–Ω–∞—Ç–∞ ${roomId} —Å–æ–∑–¥–∞–Ω–∞ –∏–≥—Ä–æ–∫–æ–º ${socket.id}`);
	
	socket.emit('room-created', roomId);
	socket.emit('game-update', {
	    gameState: 'waiting',
	    playerCount: 1,
	    message: '–û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...'
	});
    });

    socket.on('join-room', (roomId) => {
	console.log(`–ò–≥—Ä–æ–∫ ${socket.id} –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
	
	if (!rooms[roomId]) {
	    socket.emit('error', '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
	    return;
	}

	// –û—á–∏—â–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –æ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	cleanupRoom(roomId);
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∏–≥—Ä–æ–∫
	if (!rooms[roomId].players.includes(socket.id)) {
	    if (rooms[roomId].players.length >= 2) {
		socket.emit('error', '–ö–æ–º–Ω–∞—Ç–∞ –ø–æ–ª–Ω–∞');
		return;
	    }
	    rooms[roomId].players.push(socket.id);
	}
	
	socket.join(roomId);
	console.log(`–ò–≥—Ä–æ–∫ ${socket.id} –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}. –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: ${rooms[roomId].players.length}`);

	// –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫, –∂–¥–µ–º –≤—Ç–æ—Ä–æ–≥–æ
	if (rooms[roomId].players.length === 1) {
	    socket.emit('game-update', {
		gameState: 'waiting',
		playerCount: 1,
		message: '–û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...'
	    });
	    return;
	}

	// –ï—Å–ª–∏ –æ–±–∞ –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å, –Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
	if (rooms[roomId].players.length === 2 && rooms[roomId].gameState === 'waiting') {
	    const players = rooms[roomId].players;
	    const seekerIndex = Math.floor(Math.random() * 2);
	    rooms[roomId].seeker = players[seekerIndex];
	    rooms[roomId].hider = players[1 - seekerIndex];
	    rooms[roomId].gameState = 'hiding';
	    
	    console.log(`–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
	    console.log(`–ò—â—É—â–∏–π: ${rooms[roomId].seeker}, –ü—Ä—è—á—É—â–∏–π—Å—è: ${rooms[roomId].hider}`);
	    
	    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞–º
	    io.to(rooms[roomId].seeker).emit('game-update', {
		gameState: 'waiting_for_hider',
		role: 'seeker',
		playerCount: 2,
		message: '–í—ã - –ò–©–£–©–ò–ô! üîç –ñ–¥–∏—Ç–µ, –ø–æ–∫–∞ –Ω–∞–ø–∞—Ä–Ω–∏–∫ —Å–ø—Ä—è—á–µ—Ç—Å—è...',
		maxAttempts: rooms[roomId].maxAttempts
	    });
	    
	    io.to(rooms[roomId].hider).emit('game-update', {
		gameState: 'hiding',
		role: 'hider',
		playerCount: 2,
		message: '–í—ã - –ü–†–Ø–ß–£–©–ò–ô–°–Ø! üôà –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ, –≥–¥–µ —Å–ø—Ä—è—Ç–∞—Ç—å—Å—è:',
		locations: hideAndSeekGame.locations
	    });
	} else {
	    // –ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	    const room = rooms[roomId];
	    if (socket.id === room.seeker) {
		socket.emit('game-update', {
		    gameState: room.gameState === 'hiding' ? 'waiting_for_hider' : room.gameState,
		    role: 'seeker',
		    playerCount: 2,
		    message: room.gameState === 'hiding' ? '–ñ–¥–∏—Ç–µ, –ø–æ–∫–∞ –Ω–∞–ø–∞—Ä–Ω–∏–∫ —Å–ø—Ä—è—á–µ—Ç—Å—è...' : '–ò—â–∏—Ç–µ!',
		    locations: room.gameState === 'seeking' ? hideAndSeekGame.locations : undefined,
		    attempts: room.searchAttempts,
		    maxAttempts: room.maxAttempts,
		    searchedLocations: room.searchedLocations
		});
	    } else if (socket.id === room.hider) {
		socket.emit('game-update', {
		    gameState: room.gameState === 'hiding' ? 'hiding' : 'hidden',
		    role: 'hider',
		    playerCount: 2,
		    message: room.gameState === 'hiding' ? '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ, –≥–¥–µ —Å–ø—Ä—è—Ç–∞—Ç—å—Å—è:' : '–í—ã —Å–ø—Ä—è—Ç–∞–ª–∏—Å—å, –∂–¥–∏—Ç–µ...',
		    locations: room.gameState === 'hiding' ? hideAndSeekGame.locations : undefined
		});
	    }
	}
    });

    socket.on('hide-in-location', (data) => {
	const room = Object.values(rooms).find(r => r.players.includes(socket.id));
	if (!room || room.hider !== socket.id || room.gameState !== 'hiding') return;

	const roomId = Object.keys(rooms).find(key => rooms[key] === room);
	room.hideLocation = data.locationId;
	room.gameState = 'seeking';
	
	const location = hideAndSeekGame.locations.find(loc => loc.id === data.locationId);
	console.log(`–ò–≥—Ä–æ–∫ —Å–ø—Ä—è—Ç–∞–ª—Å—è –≤: ${location.name}`);

	// –°–æ–æ–±—â–∞–µ–º –ø—Ä—è—á—É—â–µ–º—É—Å—è
	io.to(room.hider).emit('game-update', {
	    gameState: 'hidden',
	    role: 'hider',
	    message: `–í—ã —Å–ø—Ä—è—Ç–∞–ª–∏—Å—å –≤: ${location.name}. –ñ–¥–∏—Ç–µ, –ø–æ–∫–∞ –≤–∞—Å –∏—â—É—Ç...`,
	    hideLocation: location
	});

	// –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –∏—â—É—â–µ–≥–æ
	io.to(room.seeker).emit('game-update', {
	    gameState: 'seeking',
	    role: 'seeker',
	    message: `–ù–∞—á–∏–Ω–∞–π—Ç–µ –ø–æ–∏—Å–∫! –£ –≤–∞—Å ${room.maxAttempts} –ø–æ–ø—ã—Ç–æ–∫.`,
	    locations: hideAndSeekGame.locations,
	    attempts: room.searchAttempts,
	    maxAttempts: room.maxAttempts,
	    searchedLocations: room.searchedLocations
	});
    });

    socket.on('search-location', (data) => {
	const room = Object.values(rooms).find(r => r.players.includes(socket.id));
	if (!room || room.seeker !== socket.id || room.gameState !== 'seeking') return;

	const roomId = Object.keys(rooms).find(key => rooms[key] === room);
	const location = hideAndSeekGame.locations.find(loc => loc.id === data.locationId);
	
	room.searchAttempts++;
	room.searchedLocations.push(data.locationId);
	
	const found = room.hideLocation === data.locationId;
	
	console.log(`–ü–æ–∏—Å–∫ –≤: ${location.name}, –Ω–∞–π–¥–µ–Ω: ${found}`);

	if (found) {
	    room.gameState = 'finished';
	    room.gameResult = 'seeker_wins';
	    
	    io.to(roomId).emit('game-update', {
		gameState: 'finished',
		result: 'seeker_wins',
		message: `üéâ –ù–ê–ô–î–ï–ù! –ò—â—É—â–∏–π –Ω–∞—à–µ–ª –ø—Ä—è—á—É—â–µ–≥–æ—Å—è –≤: ${location.name}`,
		hideLocation: hideAndSeekGame.locations.find(loc => loc.id === room.hideLocation)
	    });
	    
	} else if (room.searchAttempts >= room.maxAttempts) {
	    room.gameState = 'finished';
	    room.gameResult = 'hider_wins';
	    const hideLocation = hideAndSeekGame.locations.find(loc => loc.id === room.hideLocation);
	    
	    io.to(roomId).emit('game-update', {
		gameState: 'finished',
		result: 'hider_wins',
		message: `üòé –ü–†–Ø–ß–£–©–ò–ô–°–Ø –ü–û–ë–ï–î–ò–õ! –û–Ω –±—ã–ª –≤: ${hideLocation.name}`,
		hideLocation: hideLocation
	    });
	    
	} else {
	    io.to(room.seeker).emit('game-update', {
		gameState: 'seeking',
		role: 'seeker',
		message: `–ù–µ —Ç–∞–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${room.maxAttempts - room.searchAttempts}`,
		locations: hideAndSeekGame.locations,
		attempts: room.searchAttempts,
		maxAttempts: room.maxAttempts,
		searchedLocations: room.searchedLocations
	    });

	    io.to(room.hider).emit('game-update', {
		gameState: 'hidden',
		role: 'hider',
		message: `–í–∞—Å –∏—â—É—Ç... –ü–æ–ø—ã—Ç–∫–∞ ${room.searchAttempts}/${room.maxAttempts}. –ü–æ–∫–∞ –Ω–µ –Ω–∞—à–ª–∏! üòä`,
		attempts: room.searchAttempts,
		maxAttempts: room.maxAttempts
	    });
	}
    });

    socket.on('play-again', () => {
	const room = Object.values(rooms).find(r => r.players.includes(socket.id));
	if (!room) return;

	const roomId = Object.keys(rooms).find(key => rooms[key] === room);
	
	// –°–±—Ä–æ—Å –∏–≥—Ä—ã
	const players = room.players;
	const seekerIndex = Math.floor(Math.random() * 2);
	room.seeker = players[seekerIndex];
	room.hider = players[1 - seekerIndex];
	room.gameState = 'hiding';
	room.hideLocation = null;
	room.searchAttempts = 0;
	room.searchedLocations = [];
	room.gameResult = null;

	console.log(`–ù–æ–≤–∞—è –∏–≥—Ä–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
	
	io.to(room.seeker).emit('game-update', {
	    gameState: 'waiting_for_hider',
	    role: 'seeker',
	    message: '–ù–æ–≤–∞—è –∏–≥—Ä–∞! –í—ã - –ò–©–£–©–ò–ô! üîç –ñ–¥–∏—Ç–µ, –ø–æ–∫–∞ –Ω–∞–ø–∞—Ä–Ω–∏–∫ —Å–ø—Ä—è—á–µ—Ç—Å—è...',
	    maxAttempts: room.maxAttempts
	});
	
	io.to(room.hider).emit('game-update', {
	    gameState: 'hiding',
	    role: 'hider',
	    message: '–ù–æ–≤–∞—è –∏–≥—Ä–∞! –í—ã - –ü–†–Ø–ß–£–©–ò–ô–°–Ø! üôà –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ, –≥–¥–µ —Å–ø—Ä—è—Ç–∞—Ç—å—Å—è:',
	    locations: hideAndSeekGame.locations
	});
    });

    socket.on('disconnect', () => {
	console.log('–ò–≥—Ä–æ–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è:', socket.id);
	Object.keys(rooms).forEach(roomId => {
	    if (rooms[roomId] && rooms[roomId].players.includes(socket.id)) {
		console.log(`–£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ ${socket.id} –∏–∑ –∫–æ–º–Ω–∞—Ç—ã ${roomId}`);
		rooms[roomId].players = rooms[roomId].players.filter(id => id !== socket.id);
		if (rooms[roomId].players.length === 0) {
		    console.log(`–ö–æ–º–Ω–∞—Ç–∞ ${roomId} —É–¥–∞–ª–µ–Ω–∞ - –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤`);
		    delete rooms[roomId];
		}
	    }
	});
    });
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
